NAME: temp
LAST DEPLOYED: Fri Dec 29 14:54:03 2023
NAMESPACE: apps
STATUS: pending-install
REVISION: 1
USER-SUPPLIED VALUES:
affinity: {}
autoscaling:
  apiVersion: autoscaling/v2
deployments:
  typebot-middleware:
    config:
      BROKERS: b-2.backendstreamsdat.d1lw48.c3.kafka.ap-southeast-1.amazonaws.com:9092,
        b-1.backendstreamsdat.d1lw48.c3.kafka.ap-southeast-1.amazonaws.com:9092, b-3.backendstreamsdat.d1lw48.c3.kafka.ap-southeast-1.amazonaws.com:9092
      PORT: 8080
      RAABTA_AGENTBOT_ACCESS_TOKEN: SXcxiHMgv2gLjjRRymiear5u
      RAABTA_API_URL: https://raabta-dev.maqsad.net
      RAABTA_MIDDLEWARE_ACCESS_TOKEN: 7hMwfSm6Z6CHqAjrKPMVxw2c
      TYPEBOT_BASE_URL: https://typebot-viewer-dev.maqsad.net/api
      TYPEBOT_FLOW_ID: maq-test-flow-g6l55vs
    image:
      repository: 629776801916.dkr.ecr.ap-southeast-1.amazonaws.com/be-cloud-saarif-typebot-middleware-service
env:
  ACTIVE_STORAGE_SERVICE: amazon
  ANDROID_BUNDLE_ID: com.chatwoot.app
  ANDROID_SHA256_CERT_FINGERPRINT: AC:73:8E:DE:EB:56:EA:CC:10:87:02:A7:65:37:7B:38:D4:5D:D4:53:F8:3B:FB:D3:C6:28:64:1D:AA:08:1E:D8
  ASSET_CDN_HOST: ""
  AWS_REGION: ap-southeast-1
  ENABLE_ACCOUNT_SIGNUP: false
  FB_APP_ID: ""
  FB_APP_SECRET: ""
  FB_VERIFY_TOKEN: ""
  FORCE_SSL: false
  FRONTEND_URL: https://raabta-dev.maqsad.net
  INSTALLATION_ENV: helm
  IOS_APP_ID: 6C953F3RX2.com.chatwoot.app
  LOG_LEVEL: info
  LOG_SIZE: 500
  MAILER_INBOUND_EMAIL_DOMAIN: ""
  MAILER_SENDER_EMAIL: ""
  MAILGUN_INGRESS_SIGNING_KEY: ""
  MANDRILL_INGRESS_API_KEY: ""
  RAILS_ENV: production
  RAILS_INBOUND_EMAIL_PASSWORD: ""
  RAILS_INBOUND_EMAIL_SERVICE: ""
  RAILS_LOG_TO_STDOUT: true
  RAILS_MAX_THREADS: 5
  REDIS_SENTINEL_MASTER_NAME: ""
  REDIS_SENTINELS: ""
  REDIS_TLS: false
  S3_BUCKET_NAME: maq-bucket-saarif-dev
  SECRET_KEY_BASE: replace_with_your_super_duper_secret_key_base
  SENTRY_DSN: ""
  SLACK_CLIENT_ID: ""
  SLACK_CLIENT_SECRET: ""
  SMTP_ADDRESS: ""
  SMTP_AUTHENTICATION: plain
  SMTP_ENABLE_STARTTLS_AUTO: true
  SMTP_OPENSSL_VERIFY_MODE: none
  SMTP_PASSWORD: ""
  SMTP_PORT: 587
  SMTP_USERNAME: ""
  TWITTER_APP_ID: ""
  TWITTER_CONSUMER_KEY: ""
  TWITTER_CONSUMER_SECRET: ""
  TWITTER_ENVIRONMENT: ""
  USE_INBOX_AVATAR_FOR_BOT: true
existingEnvSecret: ""
fullnameOverride: ""
hooks:
  affinity: {}
  migrate:
    env: []
    hookAnnotation: post-install,post-upgrade
    resources:
      limits:
        memory: 1000Mi
      requests:
        memory: 1000Mi
image:
  pullPolicy: IfNotPresent
  repository: chatwoot/chatwoot
  tag: v3.3.1
imagePullSecrets: []
ingress:
  annotations:
    alb.ingress.kubernetes.io/backend-connection-idle-timeout: "610"
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-southeast-1:629776801916:certificate/0b4a91e2-9024-43c8-a718-5a499fbf031c
    alb.ingress.kubernetes.io/group.name: default
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
  enabled: true
  hosts:
  - host: raabta-dev.maqsad.net
    paths:
    - backend:
        service:
          port:
            number: 3000
      path: /
      pathType: Prefix
  - host: raabta-dev.maqsad.net
    paths:
    - backend:
        service:
          port:
            number: 3000
      path: /middleware
      pathType: Prefix
  ingressClassName: alb
  tls: []
nameOverride: ""
nodeSelector: {}
podAnnotations: {}
podSecurityContext: {}
postgresql:
  auth:
    database: chatwoot_production
    postgresPassword: postgres
    username: postgres
  enabled: true
  nameOverride: chatwoot-postgresql
redis:
  auth:
    password: redis
  enabled: true
  master:
    persistence:
      enabled: true
  nameOverride: chatwoot-redis
  replica:
    replicaCount: 1
securityContext: {}
service:
  port: 80
  type: ClusterIP
serviceAccount:
  annotations: {}
  create: false
  name: maq-saarif-service-account
services:
  annotations: {}
  internalPort: 3000
  name: chatwoot
  targetPort: 3000
  type: ClusterIP
tolerations: []
web:
  hpa:
    cputhreshold: 75
    enabled: false
    maxpods: 10
    minpods: 1
  replicaCount: 1
  resources: {}
worker:
  hpa:
    cputhreshold: 75
    enabled: false
    maxpods: 10
    minpods: 2
  replicaCount: 2
  resources: {}

COMPUTED VALUES:
affinity: {}
autoscaling:
  apiVersion: autoscaling/v2
deployments:
  typebot-middleware:
    config:
      BROKERS: b-2.backendstreamsdat.d1lw48.c3.kafka.ap-southeast-1.amazonaws.com:9092,
        b-1.backendstreamsdat.d1lw48.c3.kafka.ap-southeast-1.amazonaws.com:9092, b-3.backendstreamsdat.d1lw48.c3.kafka.ap-southeast-1.amazonaws.com:9092
      PORT: 8080
      RAABTA_AGENTBOT_ACCESS_TOKEN: SXcxiHMgv2gLjjRRymiear5u
      RAABTA_API_URL: https://raabta-dev.maqsad.net
      RAABTA_MIDDLEWARE_ACCESS_TOKEN: 7hMwfSm6Z6CHqAjrKPMVxw2c
      TYPEBOT_BASE_URL: https://typebot-viewer-dev.maqsad.net/api
      TYPEBOT_FLOW_ID: maq-test-flow-g6l55vs
    image:
      repository: 629776801916.dkr.ecr.ap-southeast-1.amazonaws.com/be-cloud-saarif-typebot-middleware-service
env:
  ACTIVE_STORAGE_SERVICE: amazon
  ANDROID_BUNDLE_ID: com.chatwoot.app
  ANDROID_SHA256_CERT_FINGERPRINT: AC:73:8E:DE:EB:56:EA:CC:10:87:02:A7:65:37:7B:38:D4:5D:D4:53:F8:3B:FB:D3:C6:28:64:1D:AA:08:1E:D8
  ASSET_CDN_HOST: ""
  AWS_REGION: ap-southeast-1
  ENABLE_ACCOUNT_SIGNUP: false
  FB_APP_ID: ""
  FB_APP_SECRET: ""
  FB_VERIFY_TOKEN: ""
  FORCE_SSL: false
  FRONTEND_URL: https://raabta-dev.maqsad.net
  INSTALLATION_ENV: helm
  IOS_APP_ID: 6C953F3RX2.com.chatwoot.app
  LOG_LEVEL: info
  LOG_SIZE: 500
  MAILER_INBOUND_EMAIL_DOMAIN: ""
  MAILER_SENDER_EMAIL: ""
  MAILGUN_INGRESS_SIGNING_KEY: ""
  MANDRILL_INGRESS_API_KEY: ""
  RAILS_ENV: production
  RAILS_INBOUND_EMAIL_PASSWORD: ""
  RAILS_INBOUND_EMAIL_SERVICE: ""
  RAILS_LOG_TO_STDOUT: true
  RAILS_MAX_THREADS: 5
  REDIS_SENTINEL_MASTER_NAME: ""
  REDIS_SENTINELS: ""
  REDIS_TLS: false
  S3_BUCKET_NAME: maq-bucket-saarif-dev
  SECRET_KEY_BASE: replace_with_your_super_duper_secret_key_base
  SENTRY_DSN: ""
  SLACK_CLIENT_ID: ""
  SLACK_CLIENT_SECRET: ""
  SMTP_ADDRESS: ""
  SMTP_AUTHENTICATION: plain
  SMTP_ENABLE_STARTTLS_AUTO: true
  SMTP_OPENSSL_VERIFY_MODE: none
  SMTP_PASSWORD: ""
  SMTP_PORT: 587
  SMTP_USERNAME: ""
  TWITTER_APP_ID: ""
  TWITTER_CONSUMER_KEY: ""
  TWITTER_CONSUMER_SECRET: ""
  TWITTER_ENVIRONMENT: ""
  USE_INBOX_AVATAR_FOR_BOT: true
existingEnvSecret: ""
fullnameOverride: ""
hooks:
  affinity: {}
  migrate:
    env: []
    hookAnnotation: post-install,post-upgrade
    resources:
      limits:
        memory: 1000Mi
      requests:
        memory: 1000Mi
image:
  pullPolicy: IfNotPresent
  repository: chatwoot/chatwoot
  tag: v3.3.1
imagePullSecrets: []
ingress:
  annotations:
    alb.ingress.kubernetes.io/backend-connection-idle-timeout: "610"
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-southeast-1:629776801916:certificate/0b4a91e2-9024-43c8-a718-5a499fbf031c
    alb.ingress.kubernetes.io/group.name: default
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
  enabled: true
  hosts:
  - host: raabta-dev.maqsad.net
    paths:
    - backend:
        service:
          port:
            number: 3000
      path: /
      pathType: Prefix
  - host: raabta-dev.maqsad.net
    paths:
    - backend:
        service:
          port:
            number: 3000
      path: /middleware
      pathType: Prefix
  ingressClassName: alb
  tls: []
nameOverride: ""
nodeSelector: {}
podAnnotations: {}
podSecurityContext: {}
postgresql:
  architecture: standalone
  audit:
    clientMinMessages: error
    logConnections: false
    logDisconnections: false
    logHostname: false
    logLinePrefix: ""
    logTimezone: ""
    pgAuditLog: ""
    pgAuditLogCatalog: "off"
  auth:
    database: chatwoot_production
    enablePostgresUser: true
    existingSecret: ""
    password: ""
    postgresPassword: postgres
    replicationPassword: ""
    replicationUsername: repl_user
    secretKeys:
      adminPasswordKey: postgres-password
      replicationPasswordKey: replication-password
      userPasswordKey: password
    usePasswordFiles: false
    username: postgres
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      postgresql:
        auth:
          database: ""
          existingSecret: ""
          password: ""
          postgresPassword: ""
          secretKeys:
            adminPasswordKey: ""
            replicationPasswordKey: ""
            userPasswordKey: ""
          username: ""
        service:
          ports:
            postgresql: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  containerPorts:
    postgresql: 5432
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  extraDeploy: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    postgresql:
      auth:
        database: ""
        existingSecret: ""
        password: ""
        postgresPassword: ""
        secretKeys:
          adminPasswordKey: ""
          replicationPasswordKey: ""
          userPasswordKey: ""
        username: ""
      service:
        ports:
          postgresql: ""
    storageClass: ""
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/postgresql
    tag: 14.4.0-debian-11-r0
  kubeVersion: ""
  ldap:
    basedn: ""
    binddn: ""
    bindpw: ""
    enabled: false
    port: ""
    prefix: ""
    scheme: ""
    searchAttribute: ""
    searchFilter: ""
    server: ""
    suffix: ""
    tls:
      enabled: false
    uri: ""
  metrics:
    containerPorts:
      metrics: 9187
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customMetrics: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraEnvVars: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.10.1-debian-11-r6
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    prometheusRule:
      enabled: false
      labels: {}
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests: {}
    service:
      annotations:
        prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
        prometheus.io/scrape: "true"
      clusterIP: ""
      ports:
        metrics: 9187
      sessionAffinity: None
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  nameOverride: chatwoot-postgresql
  networkPolicy:
    egressRules:
      customRules: {}
      denyConnectionsToExternal: false
    enabled: false
    ingressRules:
      primaryAccessOnlyFrom:
        customRules: {}
        enabled: false
        namespaceSelector: {}
        podSelector: {}
      readReplicasAccessOnlyFrom:
        customRules: {}
        enabled: false
        namespaceSelector: {}
        podSelector: {}
    metrics:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlSharedPreloadLibraries: pgaudit
  primary:
    affinity: {}
    annotations: {}
    args: []
    command: []
    configuration: ""
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    existingExtendedConfigmap: ""
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    initdb:
      args: ""
      password: ""
      postgresqlWalDir: ""
      scripts: {}
      scriptsConfigMap: ""
      scriptsSecret: ""
      user: ""
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    pgHbaConfiguration: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    standby:
      enabled: false
      primaryHost: ""
      primaryPort: ""
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  psp:
    create: false
  rbac:
    create: false
    rules: []
  readReplicas:
    affinity: {}
    annotations: {}
    args: []
    command: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  replication:
    applicationName: my_application
    numSynchronousReplicas: 0
    synchronousCommit: "off"
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  shmVolume:
    enabled: true
    sizeLimit: ""
  tls:
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    crlFilename: ""
    enabled: false
    preferServerCiphers: true
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r5
    resources:
      limits: {}
      requests: {}
redis:
  architecture: replication
  auth:
    enabled: true
    existingSecret: ""
    existingSecretPasswordKey: ""
    password: redis
    sentinel: true
    usePasswordFiles: false
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      redis:
        password: ""
      storageClass: ""
  commonAnnotations: {}
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  existingConfigmap: ""
  extraDeploy: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    redis:
      password: ""
    storageClass: ""
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/redis
    tag: 6.2.7-debian-11-r3
  kubeVersion: ""
  master:
    affinity: {}
    args: []
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    count: 1
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    kind: StatefulSet
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      medium: ""
      path: /data
      selector: {}
      size: 8Gi
      sizeLimit: ""
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  metrics:
    command: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    enabled: false
    extraArgs: {}
    extraEnvVars: []
    extraVolumeMounts: []
    extraVolumes: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.40.0-debian-11-r0
    podAnnotations:
      prometheus.io/port: "9121"
      prometheus.io/scrape: "true"
    podLabels: {}
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    redisTargetHost: localhost
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      port: 9121
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabellings: []
      scrapeTimeout: ""
  nameOverride: chatwoot-redis
  networkPolicy:
    allowExternal: true
    enabled: false
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  podSecurityPolicy:
    create: false
    enabled: false
  rbac:
    create: false
    rules: []
  replica:
    affinity: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 1
      targetCPU: ""
      targetMemory: ""
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      medium: ""
      path: /data
      selector: {}
      size: 8Gi
      sizeLimit: ""
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  secretAnnotations: {}
  sentinel:
    args: []
    automateClusterRecovery: false
    command: []
    configuration: ""
    containerPorts:
      sentinel: 26379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    downAfterMilliseconds: 60000
    enabled: false
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    failoverTimeout: 18000
    getMasterTimeout: 220
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 6.2.7-debian-11-r4
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    masterSet: mymaster
    parallelSyncs: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: false
      medium: ""
      selector: {}
      size: 100Mi
      storageClass: ""
    preExecCmds: []
    quorum: 2
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
        sentinel: ""
      ports:
        redis: 6379
        sentinel: 26379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  sysctl:
    command: []
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r3
    mountHostSys: false
    resources:
      limits: {}
      requests: {}
  tls:
    authClients: true
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    dhParamsFilename: ""
    enabled: false
    existingSecret: ""
  useExternalDNS:
    additionalAnnotations: {}
    annotationKey: external-dns.alpha.kubernetes.io/
    enabled: false
    suffix: ""
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r3
    resources:
      limits: {}
      requests: {}
securityContext: {}
service:
  port: 80
  type: ClusterIP
serviceAccount:
  annotations: {}
  create: false
  name: maq-saarif-service-account
services:
  annotations: {}
  internalPort: 3000
  name: chatwoot
  targetPort: 3000
  type: ClusterIP
tolerations: []
web:
  hpa:
    cputhreshold: 75
    enabled: false
    maxpods: 10
    minpods: 1
  replicaCount: 1
  resources: {}
worker:
  hpa:
    cputhreshold: 75
    enabled: false
    maxpods: 10
    minpods: 2
  replicaCount: 2
  resources: {}

HOOKS:
---
# Source: chatwoot/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "temp-chatwoot-test-connection"
  labels:
    app: temp-chatwoot
    chart: "chatwoot-1.1.5"
    release: "temp"
    heritage: "Helm"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded  
spec:
  containers:
    - name: wget
      image: busybox
      imagePullPolicy: IfNotPresent
      command: ['wget']
      args: ['temp-chatwoot:3000']
  restartPolicy: Never
---
# Source: chatwoot/templates/migrations-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "temp-migrate"
  labels:
    app: temp-chatwoot
    chart: "chatwoot-1.1.5"
    release: "temp"
    heritage: "Helm"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
    "helm.sh/hook-weight": "-1"
spec:
  template:
    spec:
      restartPolicy: Never
      initContainers:
      - name: init-postgres
        image: "chatwoot/chatwoot:v3.3.1"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
          - -c
          - >-
            PG_READY="pg_isready -h temp-chatwoot-postgresql -p 5432";
            until $PG_READY;
            do
              sleep 2;
            done;
            echo "Database ready to accept connections."  ;
      - name: init-redis
        image: busybox:1.28
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "until nslookup temp-chatwoot-redis-master ; do echo waiting for temp-chatwoot-redis-master ; sleep 2; done;"]
      containers:
      - name: "db-migrate-job"
        image: "chatwoot/chatwoot:v3.3.1"
        args:
        - bundle
        - exec
        - rails
        - db:chatwoot_prepare
        env:
        envFrom:
          - secretRef:
              name: temp-chatwoot-env
        imagePullPolicy: IfNotPresent
        volumeMounts:
            - name: cache
              mountPath: /app/tmp
      serviceAccountName: maq-saarif-service-account
      volumes:
        - name: cache
          emptyDir: {}
MANIFEST:
---
# Source: chatwoot/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: temp-chatwoot-redis
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
---
# Source: chatwoot/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: temp-chatwoot-postgresql
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-postgresql
    helm.sh/chart: postgresql-11.6.7
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  password: "NTRmYVpNS0ZiNg=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: chatwoot/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: temp-chatwoot-redis
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  redis-password: "cmVkaXM="
---
# Source: chatwoot/templates/env-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: temp-chatwoot
    chart: "chatwoot-1.1.5"
    release: "temp"
    heritage: "Helm"
  name: temp-chatwoot-env
data:
  POSTGRES_HOST: "dGVtcC1jaGF0d29vdC1wb3N0Z3Jlc3Fs"
  POSTGRES_PORT: "NTQzMg=="
  POSTGRES_USERNAME: "cG9zdGdyZXM="
  POSTGRES_PASSWORD: "cG9zdGdyZXM="
  POSTGRES_DATABASE: "Y2hhdHdvb3RfcHJvZHVjdGlvbg=="
  REDIS_HOST: "dGVtcC1jaGF0d29vdC1yZWRpcy1tYXN0ZXI="
  REDIS_PORT: "NjM3OQ=="
  REDIS_PASSWORD: "cmVkaXM="
  REDIS_URL: "cmVkaXM6Ly86cmVkaXNAdGVtcC1jaGF0d29vdC1yZWRpcy1tYXN0ZXI6NjM3OQ=="
  ACTIVE_STORAGE_SERVICE: "YW1hem9u"
  ANDROID_BUNDLE_ID: "Y29tLmNoYXR3b290LmFwcA=="
  ANDROID_SHA256_CERT_FINGERPRINT: "QUM6NzM6OEU6REU6RUI6NTY6RUE6Q0M6MTA6ODc6MDI6QTc6NjU6Mzc6N0I6Mzg6RDQ6NUQ6RDQ6NTM6Rjg6M0I6RkI6RDM6QzY6Mjg6NjQ6MUQ6QUE6MDg6MUU6RDg="
  ASSET_CDN_HOST: ""
  AWS_REGION: "YXAtc291dGhlYXN0LTE="
  ENABLE_ACCOUNT_SIGNUP: "ZmFsc2U="
  FB_APP_ID: ""
  FB_APP_SECRET: ""
  FB_VERIFY_TOKEN: ""
  FORCE_SSL: "ZmFsc2U="
  FRONTEND_URL: "aHR0cHM6Ly9yYWFidGEtZGV2Lm1hcXNhZC5uZXQ="
  INSTALLATION_ENV: "aGVsbQ=="
  IOS_APP_ID: "NkM5NTNGM1JYMi5jb20uY2hhdHdvb3QuYXBw"
  LOG_LEVEL: "aW5mbw=="
  LOG_SIZE: "NTAw"
  MAILER_INBOUND_EMAIL_DOMAIN: ""
  MAILER_SENDER_EMAIL: ""
  MAILGUN_INGRESS_SIGNING_KEY: ""
  MANDRILL_INGRESS_API_KEY: ""
  RAILS_ENV: "cHJvZHVjdGlvbg=="
  RAILS_INBOUND_EMAIL_PASSWORD: ""
  RAILS_INBOUND_EMAIL_SERVICE: ""
  RAILS_LOG_TO_STDOUT: "dHJ1ZQ=="
  RAILS_MAX_THREADS: "NQ=="
  REDIS_SENTINELS: ""
  REDIS_SENTINEL_MASTER_NAME: ""
  REDIS_TLS: "ZmFsc2U="
  S3_BUCKET_NAME: "bWFxLWJ1Y2tldC1zYWFyaWYtZGV2"
  SECRET_KEY_BASE: "cmVwbGFjZV93aXRoX3lvdXJfc3VwZXJfZHVwZXJfc2VjcmV0X2tleV9iYXNl"
  SENTRY_DSN: ""
  SLACK_CLIENT_ID: ""
  SLACK_CLIENT_SECRET: ""
  SMTP_ADDRESS: ""
  SMTP_AUTHENTICATION: "cGxhaW4="
  SMTP_ENABLE_STARTTLS_AUTO: "dHJ1ZQ=="
  SMTP_OPENSSL_VERIFY_MODE: "bm9uZQ=="
  SMTP_PASSWORD: ""
  SMTP_PORT: "NTg3"
  SMTP_USERNAME: ""
  TWITTER_APP_ID: ""
  TWITTER_CONSUMER_KEY: ""
  TWITTER_CONSUMER_SECRET: ""
  TWITTER_ENVIRONMENT: ""
  USE_INBOX_AVATAR_FOR_BOT: "dHJ1ZQ=="
---
# Source: chatwoot/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: temp-chatwoot-redis-configuration
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: chatwoot/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: temp-chatwoot-redis-health
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: chatwoot/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: temp-chatwoot-redis-scripts
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        echo "${hostname}.${HEADLESS_SERVICE}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: chatwoot/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: temp-chatwoot-postgresql-hl
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-postgresql
    helm.sh/chart: postgresql-11.6.7
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: chatwoot-postgresql
    app.kubernetes.io/instance: temp
    app.kubernetes.io/component: primary
---
# Source: chatwoot/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: temp-chatwoot-postgresql
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-postgresql
    helm.sh/chart: postgresql-11.6.7
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: chatwoot-postgresql
    app.kubernetes.io/instance: temp
    app.kubernetes.io/component: primary
---
# Source: chatwoot/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: temp-chatwoot-redis-headless
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: chatwoot-redis
    app.kubernetes.io/instance: temp
---
# Source: chatwoot/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: temp-chatwoot-redis-master
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: chatwoot-redis
    app.kubernetes.io/instance: temp
    app.kubernetes.io/component: master
---
# Source: chatwoot/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: temp-chatwoot-redis-replicas
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: chatwoot-redis
    app.kubernetes.io/instance: temp
    app.kubernetes.io/component: replica
---
# Source: chatwoot/templates/web-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: temp-chatwoot
  creationTimestamp: null
  labels:
    app: temp-chatwoot
    chart: "chatwoot-1.1.5"
    release: "temp"
    heritage: "Helm"
spec:
  ports:
    - name: "chatwoot"
      port: 3000
      targetPort: 3000
  type: ClusterIP
  selector:
    app: temp-chatwoot
    role: web
status:
  loadBalancer: {}
---
# Source: chatwoot/templates/web-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: temp-chatwoot-web
  creationTimestamp: null
  labels:
    app: temp-chatwoot
    chart: "chatwoot-1.1.5"
    release: "temp"
    heritage: "Helm"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: temp-chatwoot
      release: "temp"
      role: web
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: temp-chatwoot
        release: "temp"
        role: web
      annotations:
        checksum/config: 927c64f93e74bd580a22d5b4a6a1c6cf7410a8df8f6458efa421d178cb354ced
    spec:
      containers:
        - args:
            - bundle
            - exec
            - rails
            - s
            - -p
            - "3000"
            - -b
            - 0.0.0.0
          command:
            - docker/entrypoints/rails.sh
          env:
          envFrom:
            - secretRef:
                name: temp-chatwoot-env
          image: "chatwoot/chatwoot:v3.3.1"
          name: chatwoot-web
          ports:
            - containerPort: 3000
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: cache
              mountPath: /app/tmp
      serviceAccountName: maq-saarif-service-account
      volumes:
        - name: cache
          emptyDir: {}
---
# Source: chatwoot/templates/worker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: temp-chatwoot-worker
  creationTimestamp: null
  labels:
    app: temp-chatwoot
    chart: "chatwoot-1.1.5"
    release: "temp"
    heritage: "Helm"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: temp-chatwoot
      release: "temp"
      role: worker
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: temp-chatwoot
        release: "temp"
        role: worker
      annotations:
        checksum/config: 927c64f93e74bd580a22d5b4a6a1c6cf7410a8df8f6458efa421d178cb354ced
    spec:
      containers:
        - args:
            - bundle
            - exec
            - sidekiq
            - -C
            - config/sidekiq.yml
          env:
          envFrom:
            - secretRef:
                name: temp-chatwoot-env
          image: "chatwoot/chatwoot:v3.3.1"
          name: chatwoot-workers
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: cache
              mountPath: /app/tmp
      serviceAccountName: maq-saarif-service-account
      volumes:
        - name: cache
          emptyDir: {}
---
# Source: chatwoot/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: temp-chatwoot-postgresql
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-postgresql
    helm.sh/chart: postgresql-11.6.7
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: temp-chatwoot-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: chatwoot-postgresql
      app.kubernetes.io/instance: temp
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: temp-chatwoot-postgresql
      labels:
        app.kubernetes.io/name: chatwoot-postgresql
        helm.sh/chart: postgresql-11.6.7
        app.kubernetes.io/instance: temp
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: chatwoot-postgresql
                    app.kubernetes.io/instance: temp
                    app.kubernetes.io/component: primary
                namespaces:
                  - "apps"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.4.0-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: temp-chatwoot-postgresql
                  key: postgres-password
            - name: POSTGRES_DB
              value: "chatwoot_production"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=chatwoot_production" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -d "dbname=chatwoot_production" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: chatwoot/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: temp-chatwoot-redis-master
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: chatwoot-redis
      app.kubernetes.io/instance: temp
      app.kubernetes.io/component: master
  serviceName: temp-chatwoot-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chatwoot-redis
        helm.sh/chart: redis-16.12.2
        app.kubernetes.io/instance: temp
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: ba3a26561cf06a42a4df5a65361fb30266a33db5409b0ebde22c0e9e94be408d
        checksum/health: 946164870739cf2e06048fa3736720737bb7666e5bb7d9d8be5fc0fcc53108ba
        checksum/scripts: abf113cae76256eb2701bc6d3d98a101056922e481e5f7e6ba881d5e623ae31f
        checksum/secret: d7a74c76812f0fd2983a04c591161b635438da978a06484a8c1d55d67812965f
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: temp-chatwoot-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: chatwoot-redis
                    app.kubernetes.io/instance: temp
                    app.kubernetes.io/component: master
                namespaces:
                  - "apps"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.7-debian-11-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: temp-chatwoot-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: temp-chatwoot-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: temp-chatwoot-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: temp-chatwoot-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: chatwoot-redis
          app.kubernetes.io/instance: temp
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: chatwoot/charts/redis/templates/replicas/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: temp-chatwoot-redis-replicas
  namespace: "apps"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: temp
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: chatwoot-redis
      app.kubernetes.io/instance: temp
      app.kubernetes.io/component: replica
  serviceName: temp-chatwoot-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chatwoot-redis
        helm.sh/chart: redis-16.12.2
        app.kubernetes.io/instance: temp
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: ba3a26561cf06a42a4df5a65361fb30266a33db5409b0ebde22c0e9e94be408d
        checksum/health: 946164870739cf2e06048fa3736720737bb7666e5bb7d9d8be5fc0fcc53108ba
        checksum/scripts: abf113cae76256eb2701bc6d3d98a101056922e481e5f7e6ba881d5e623ae31f
        checksum/secret: d7a74c76812f0fd2983a04c591161b635438da978a06484a8c1d55d67812965f
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: temp-chatwoot-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: chatwoot-redis
                    app.kubernetes.io/instance: temp
                    app.kubernetes.io/component: replica
                namespaces:
                  - "apps"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.7-debian-11-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: slave
            - name: REDIS_MASTER_HOST
              value: temp-chatwoot-redis-master-0.temp-chatwoot-redis-headless.apps.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: temp-chatwoot-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: temp-chatwoot-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: temp-chatwoot-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: temp-chatwoot-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: temp-chatwoot-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: chatwoot-redis
          app.kubernetes.io/instance: temp
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: chatwoot/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: temp-chatwoot
  labels:
    app: temp-chatwoot
    chart: "chatwoot-1.1.5"
    release: "temp"
    heritage: "Helm"
  annotations:
    alb.ingress.kubernetes.io/backend-connection-idle-timeout: "610"
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-southeast-1:629776801916:certificate/0b4a91e2-9024-43c8-a718-5a499fbf031c
    alb.ingress.kubernetes.io/group.name: default
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
spec:
  ingressClassName: alb
  rules:
    - host: "raabta-dev.maqsad.net"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: temp-chatwoot
                port:
                  number: 3000
    - host: "raabta-dev.maqsad.net"
      http:
        paths:
          - path: /middleware
            pathType: Prefix
            backend:
              service:
                name: temp-chatwoot
                port:
                  number: 3000

NOTES:
Thank you for installing chatwoot.

Your release is named temp.

To learn more about the release, try:

  $ helm status temp
  $ helm get all temp

NOTE: It may take a few minutes for the LoadBalancer IP to be available.
You can watch the status by running 
'kubectl get svc -w temp-chatwoot'

export SERVICE_IP=$(kubectl get svc --namespace apps temp-chatwoot -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
echo http://$SERVICE_IP:3000
