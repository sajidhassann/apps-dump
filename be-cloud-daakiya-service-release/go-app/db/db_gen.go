// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
//go:build !codeanalysis
// +build !codeanalysis

package db

import (
	"context"
	"os"
	"testing"

	"github.com/steebchen/prisma-client-go/engine"
	"github.com/steebchen/prisma-client-go/engine/mock"
	"github.com/steebchen/prisma-client-go/runtime/builder"
	"github.com/steebchen/prisma-client-go/runtime/lifecycle"
	"github.com/steebchen/prisma-client-go/runtime/raw"
	"github.com/steebchen/prisma-client-go/runtime/transaction"
	"github.com/steebchen/prisma-client-go/runtime/types"
	rawmodels "github.com/steebchen/prisma-client-go/runtime/types/raw"

	// no-op import for go modules
	_ "github.com/iancoleman/strcase"
	_ "github.com/joho/godotenv"
	_ "github.com/shopspring/decimal"
	_ "github.com/takuoki/gocase"
	_ "golang.org/x/text/cases"
)

// ignore unused os import as it may not be needed depending on engine type
var _ = os.DevNull

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

const RFC3339Milli = types.RFC3339Milli

type BatchResult = types.BatchResult

type DateTime = types.DateTime
type JSON = types.JSON
type Bytes = types.Bytes
type BigInt = types.BigInt
type Decimal = types.Decimal

type RawString = rawmodels.String
type RawInt = rawmodels.Int
type RawFloat = rawmodels.Float
type RawBoolean = rawmodels.Boolean
type RawDateTime = rawmodels.DateTime
type RawJSON = rawmodels.JSON
type RawBytes = rawmodels.Bytes
type RawBigInt = rawmodels.BigInt
type RawDecimal = rawmodels.Decimal

// deprecated: use SortOrder
type Direction = SortOrder

const (
	// deprecated: use SortOrderAsc
	ASC Direction = "asc"
	// deprecated: use SortOrderDesc
	DESC Direction = "desc"
)

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type userActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var userOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type UserRelationWith interface {
	getQuery() builder.Query
	with()
	userRelation()
}

type UserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p userDefaultParam) field() builder.Field {
	return p.data
}

func (p userDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p userDefaultParam) userModel() {}

type UserOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p userOrderByParam) field() builder.Field {
	return p.data
}

func (p userOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p userOrderByParam) userModel() {}

type UserCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	isCursor()
}

type userCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p userCursorParam) field() builder.Field {
	return p.data
}

func (p userCursorParam) isCursor() {}

func (p userCursorParam) getQuery() builder.Query {
	return p.query
}

func (p userCursorParam) userModel() {}

type UserParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	userModel()
}

type userParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userParamUnique) userModel() {}

func (userParamUnique) unique() {}

func (p userParamUnique) field() builder.Field {
	return p.data
}

func (p userParamUnique) getQuery() builder.Query {
	return p.query
}

type UserEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
}

type userEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsParam) userModel() {}

func (userEqualsParam) equals() {}

func (p userEqualsParam) field() builder.Field {
	return p.data
}

func (p userEqualsParam) getQuery() builder.Query {
	return p.query
}

type UserEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	userModel()
}

type userEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsUniqueParam) userModel() {}

func (userEqualsUniqueParam) unique() {}
func (userEqualsUniqueParam) equals() {}

func (p userEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type UserSetParam interface {
	field() builder.Field
	settable()
	userModel()
}

type userSetParam struct {
	data builder.Field
}

func (userSetParam) settable() {}

func (p userSetParam) field() builder.Field {
	return p.data
}

func (p userSetParam) userModel() {}

type UserWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	idField()
}

type UserWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDSetParam) userModel() {}

func (p userWithPrismaIDSetParam) idField() {}

type UserWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsParam) userModel() {}

func (p userWithPrismaIDEqualsParam) idField() {}

func (userWithPrismaIDSetParam) settable()  {}
func (userWithPrismaIDEqualsParam) equals() {}

type userWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsUniqueParam) userModel() {}
func (p userWithPrismaIDEqualsUniqueParam) idField()   {}

func (userWithPrismaIDEqualsUniqueParam) unique() {}
func (userWithPrismaIDEqualsUniqueParam) equals() {}

type UserWithPrismaTokensEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	tokensField()
}

type UserWithPrismaTokensSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	tokensField()
}

type userWithPrismaTokensSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaTokensSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaTokensSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaTokensSetParam) userModel() {}

func (p userWithPrismaTokensSetParam) tokensField() {}

type UserWithPrismaTokensWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	tokensField()
}

type userWithPrismaTokensEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaTokensEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaTokensEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaTokensEqualsParam) userModel() {}

func (p userWithPrismaTokensEqualsParam) tokensField() {}

func (userWithPrismaTokensSetParam) settable()  {}
func (userWithPrismaTokensEqualsParam) equals() {}

type userWithPrismaTokensEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaTokensEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaTokensEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaTokensEqualsUniqueParam) userModel()   {}
func (p userWithPrismaTokensEqualsUniqueParam) tokensField() {}

func (userWithPrismaTokensEqualsUniqueParam) unique() {}
func (userWithPrismaTokensEqualsUniqueParam) equals() {}

type UserWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	createdAtField()
}

type UserWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtSetParam) userModel() {}

func (p userWithPrismaCreatedAtSetParam) createdAtField() {}

type UserWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdAtField()
}

type userWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsParam) userModel() {}

func (p userWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (userWithPrismaCreatedAtSetParam) settable()  {}
func (userWithPrismaCreatedAtEqualsParam) equals() {}

type userWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedAtEqualsUniqueParam) userModel()      {}
func (p userWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (userWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (userWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type UserWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	updatedAtField()
}

type UserWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	updatedAtField()
}

type userWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtSetParam) userModel() {}

func (p userWithPrismaUpdatedAtSetParam) updatedAtField() {}

type UserWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	updatedAtField()
}

type userWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsParam) userModel() {}

func (p userWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (userWithPrismaUpdatedAtSetParam) settable()  {}
func (userWithPrismaUpdatedAtEqualsParam) equals() {}

type userWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedAtEqualsUniqueParam) userModel()      {}
func (p userWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (userWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (userWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type UserWithPrismaCohortsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	cohortsField()
}

type UserWithPrismaCohortsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	cohortsField()
}

type userWithPrismaCohortsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCohortsSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCohortsSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCohortsSetParam) userModel() {}

func (p userWithPrismaCohortsSetParam) cohortsField() {}

type UserWithPrismaCohortsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	cohortsField()
}

type userWithPrismaCohortsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCohortsEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCohortsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCohortsEqualsParam) userModel() {}

func (p userWithPrismaCohortsEqualsParam) cohortsField() {}

func (userWithPrismaCohortsSetParam) settable()  {}
func (userWithPrismaCohortsEqualsParam) equals() {}

type userWithPrismaCohortsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCohortsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCohortsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCohortsEqualsUniqueParam) userModel()    {}
func (p userWithPrismaCohortsEqualsUniqueParam) cohortsField() {}

func (userWithPrismaCohortsEqualsUniqueParam) unique() {}
func (userWithPrismaCohortsEqualsUniqueParam) equals() {}

type tokenActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var tokenOutput = []builder.Output{
	{Name: "token"},
	{Name: "userID"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type TokenRelationWith interface {
	getQuery() builder.Query
	with()
	tokenRelation()
}

type TokenWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tokenModel()
}

type tokenDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenDefaultParam) field() builder.Field {
	return p.data
}

func (p tokenDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p tokenDefaultParam) tokenModel() {}

type TokenOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	tokenModel()
}

type tokenOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenOrderByParam) field() builder.Field {
	return p.data
}

func (p tokenOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p tokenOrderByParam) tokenModel() {}

type TokenCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	tokenModel()
	isCursor()
}

type tokenCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenCursorParam) field() builder.Field {
	return p.data
}

func (p tokenCursorParam) isCursor() {}

func (p tokenCursorParam) getQuery() builder.Query {
	return p.query
}

func (p tokenCursorParam) tokenModel() {}

type TokenParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	tokenModel()
}

type tokenParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p tokenParamUnique) tokenModel() {}

func (tokenParamUnique) unique() {}

func (p tokenParamUnique) field() builder.Field {
	return p.data
}

func (p tokenParamUnique) getQuery() builder.Query {
	return p.query
}

type TokenEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tokenModel()
}

type tokenEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenEqualsParam) tokenModel() {}

func (tokenEqualsParam) equals() {}

func (p tokenEqualsParam) field() builder.Field {
	return p.data
}

func (p tokenEqualsParam) getQuery() builder.Query {
	return p.query
}

type TokenEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	tokenModel()
}

type tokenEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenEqualsUniqueParam) tokenModel() {}

func (tokenEqualsUniqueParam) unique() {}
func (tokenEqualsUniqueParam) equals() {}

func (p tokenEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tokenEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type TokenSetParam interface {
	field() builder.Field
	settable()
	tokenModel()
}

type tokenSetParam struct {
	data builder.Field
}

func (tokenSetParam) settable() {}

func (p tokenSetParam) field() builder.Field {
	return p.data
}

func (p tokenSetParam) tokenModel() {}

type TokenWithPrismaTokenEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tokenModel()
	tokenField()
}

type TokenWithPrismaTokenSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	tokenModel()
	tokenField()
}

type tokenWithPrismaTokenSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaTokenSetParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaTokenSetParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaTokenSetParam) tokenModel() {}

func (p tokenWithPrismaTokenSetParam) tokenField() {}

type TokenWithPrismaTokenWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tokenModel()
	tokenField()
}

type tokenWithPrismaTokenEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaTokenEqualsParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaTokenEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaTokenEqualsParam) tokenModel() {}

func (p tokenWithPrismaTokenEqualsParam) tokenField() {}

func (tokenWithPrismaTokenSetParam) settable()  {}
func (tokenWithPrismaTokenEqualsParam) equals() {}

type tokenWithPrismaTokenEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaTokenEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaTokenEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaTokenEqualsUniqueParam) tokenModel() {}
func (p tokenWithPrismaTokenEqualsUniqueParam) tokenField() {}

func (tokenWithPrismaTokenEqualsUniqueParam) unique() {}
func (tokenWithPrismaTokenEqualsUniqueParam) equals() {}

type TokenWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tokenModel()
	userIDField()
}

type TokenWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	tokenModel()
	userIDField()
}

type tokenWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaUserIDSetParam) tokenModel() {}

func (p tokenWithPrismaUserIDSetParam) userIDField() {}

type TokenWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tokenModel()
	userIDField()
}

type tokenWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaUserIDEqualsParam) tokenModel() {}

func (p tokenWithPrismaUserIDEqualsParam) userIDField() {}

func (tokenWithPrismaUserIDSetParam) settable()  {}
func (tokenWithPrismaUserIDEqualsParam) equals() {}

type tokenWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaUserIDEqualsUniqueParam) tokenModel()  {}
func (p tokenWithPrismaUserIDEqualsUniqueParam) userIDField() {}

func (tokenWithPrismaUserIDEqualsUniqueParam) unique() {}
func (tokenWithPrismaUserIDEqualsUniqueParam) equals() {}

type TokenWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tokenModel()
	userField()
}

type TokenWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	tokenModel()
	userField()
}

type tokenWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaUserSetParam) tokenModel() {}

func (p tokenWithPrismaUserSetParam) userField() {}

type TokenWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tokenModel()
	userField()
}

type tokenWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaUserEqualsParam) tokenModel() {}

func (p tokenWithPrismaUserEqualsParam) userField() {}

func (tokenWithPrismaUserSetParam) settable()  {}
func (tokenWithPrismaUserEqualsParam) equals() {}

type tokenWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaUserEqualsUniqueParam) tokenModel() {}
func (p tokenWithPrismaUserEqualsUniqueParam) userField()  {}

func (tokenWithPrismaUserEqualsUniqueParam) unique() {}
func (tokenWithPrismaUserEqualsUniqueParam) equals() {}

type TokenWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tokenModel()
	createdAtField()
}

type TokenWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	tokenModel()
	createdAtField()
}

type tokenWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaCreatedAtSetParam) tokenModel() {}

func (p tokenWithPrismaCreatedAtSetParam) createdAtField() {}

type TokenWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tokenModel()
	createdAtField()
}

type tokenWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaCreatedAtEqualsParam) tokenModel() {}

func (p tokenWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (tokenWithPrismaCreatedAtSetParam) settable()  {}
func (tokenWithPrismaCreatedAtEqualsParam) equals() {}

type tokenWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaCreatedAtEqualsUniqueParam) tokenModel()     {}
func (p tokenWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (tokenWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (tokenWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type TokenWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	tokenModel()
	updatedAtField()
}

type TokenWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	tokenModel()
	updatedAtField()
}

type tokenWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaUpdatedAtSetParam) tokenModel() {}

func (p tokenWithPrismaUpdatedAtSetParam) updatedAtField() {}

type TokenWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	tokenModel()
	updatedAtField()
}

type tokenWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaUpdatedAtEqualsParam) tokenModel() {}

func (p tokenWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (tokenWithPrismaUpdatedAtSetParam) settable()  {}
func (tokenWithPrismaUpdatedAtEqualsParam) equals() {}

type tokenWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p tokenWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p tokenWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p tokenWithPrismaUpdatedAtEqualsUniqueParam) tokenModel()     {}
func (p tokenWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (tokenWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (tokenWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type cohortActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var cohortOutput = []builder.Output{
	{Name: "id"},
	{Name: "name"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type CohortRelationWith interface {
	getQuery() builder.Query
	with()
	cohortRelation()
}

type CohortWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortModel()
}

type cohortDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortDefaultParam) field() builder.Field {
	return p.data
}

func (p cohortDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p cohortDefaultParam) cohortModel() {}

type CohortOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortModel()
}

type cohortOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortOrderByParam) field() builder.Field {
	return p.data
}

func (p cohortOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p cohortOrderByParam) cohortModel() {}

type CohortCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortModel()
	isCursor()
}

type cohortCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortCursorParam) field() builder.Field {
	return p.data
}

func (p cohortCursorParam) isCursor() {}

func (p cohortCursorParam) getQuery() builder.Query {
	return p.query
}

func (p cohortCursorParam) cohortModel() {}

type CohortParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	cohortModel()
}

type cohortParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p cohortParamUnique) cohortModel() {}

func (cohortParamUnique) unique() {}

func (p cohortParamUnique) field() builder.Field {
	return p.data
}

func (p cohortParamUnique) getQuery() builder.Query {
	return p.query
}

type CohortEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	cohortModel()
}

type cohortEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortEqualsParam) cohortModel() {}

func (cohortEqualsParam) equals() {}

func (p cohortEqualsParam) field() builder.Field {
	return p.data
}

func (p cohortEqualsParam) getQuery() builder.Query {
	return p.query
}

type CohortEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	cohortModel()
}

type cohortEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortEqualsUniqueParam) cohortModel() {}

func (cohortEqualsUniqueParam) unique() {}
func (cohortEqualsUniqueParam) equals() {}

func (p cohortEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p cohortEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type CohortSetParam interface {
	field() builder.Field
	settable()
	cohortModel()
}

type cohortSetParam struct {
	data builder.Field
}

func (cohortSetParam) settable() {}

func (p cohortSetParam) field() builder.Field {
	return p.data
}

func (p cohortSetParam) cohortModel() {}

type CohortWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	cohortModel()
	idField()
}

type CohortWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortModel()
	idField()
}

type cohortWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaIDSetParam) cohortModel() {}

func (p cohortWithPrismaIDSetParam) idField() {}

type CohortWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortModel()
	idField()
}

type cohortWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaIDEqualsParam) cohortModel() {}

func (p cohortWithPrismaIDEqualsParam) idField() {}

func (cohortWithPrismaIDSetParam) settable()  {}
func (cohortWithPrismaIDEqualsParam) equals() {}

type cohortWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaIDEqualsUniqueParam) cohortModel() {}
func (p cohortWithPrismaIDEqualsUniqueParam) idField()     {}

func (cohortWithPrismaIDEqualsUniqueParam) unique() {}
func (cohortWithPrismaIDEqualsUniqueParam) equals() {}

type CohortWithPrismaNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	cohortModel()
	nameField()
}

type CohortWithPrismaNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortModel()
	nameField()
}

type cohortWithPrismaNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaNameSetParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaNameSetParam) cohortModel() {}

func (p cohortWithPrismaNameSetParam) nameField() {}

type CohortWithPrismaNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortModel()
	nameField()
}

type cohortWithPrismaNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaNameEqualsParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaNameEqualsParam) cohortModel() {}

func (p cohortWithPrismaNameEqualsParam) nameField() {}

func (cohortWithPrismaNameSetParam) settable()  {}
func (cohortWithPrismaNameEqualsParam) equals() {}

type cohortWithPrismaNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaNameEqualsUniqueParam) cohortModel() {}
func (p cohortWithPrismaNameEqualsUniqueParam) nameField()   {}

func (cohortWithPrismaNameEqualsUniqueParam) unique() {}
func (cohortWithPrismaNameEqualsUniqueParam) equals() {}

type CohortWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	cohortModel()
	createdAtField()
}

type CohortWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortModel()
	createdAtField()
}

type cohortWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaCreatedAtSetParam) cohortModel() {}

func (p cohortWithPrismaCreatedAtSetParam) createdAtField() {}

type CohortWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortModel()
	createdAtField()
}

type cohortWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaCreatedAtEqualsParam) cohortModel() {}

func (p cohortWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (cohortWithPrismaCreatedAtSetParam) settable()  {}
func (cohortWithPrismaCreatedAtEqualsParam) equals() {}

type cohortWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaCreatedAtEqualsUniqueParam) cohortModel()    {}
func (p cohortWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (cohortWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (cohortWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type CohortWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	cohortModel()
	updatedAtField()
}

type CohortWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortModel()
	updatedAtField()
}

type cohortWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaUpdatedAtSetParam) cohortModel() {}

func (p cohortWithPrismaUpdatedAtSetParam) updatedAtField() {}

type CohortWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortModel()
	updatedAtField()
}

type cohortWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaUpdatedAtEqualsParam) cohortModel() {}

func (p cohortWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (cohortWithPrismaUpdatedAtSetParam) settable()  {}
func (cohortWithPrismaUpdatedAtEqualsParam) equals() {}

type cohortWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaUpdatedAtEqualsUniqueParam) cohortModel()    {}
func (p cohortWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (cohortWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (cohortWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type CohortWithPrismaUsersEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	cohortModel()
	usersField()
}

type CohortWithPrismaUsersSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortModel()
	usersField()
}

type cohortWithPrismaUsersSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaUsersSetParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaUsersSetParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaUsersSetParam) cohortModel() {}

func (p cohortWithPrismaUsersSetParam) usersField() {}

type CohortWithPrismaUsersWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortModel()
	usersField()
}

type cohortWithPrismaUsersEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaUsersEqualsParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaUsersEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaUsersEqualsParam) cohortModel() {}

func (p cohortWithPrismaUsersEqualsParam) usersField() {}

func (cohortWithPrismaUsersSetParam) settable()  {}
func (cohortWithPrismaUsersEqualsParam) equals() {}

type cohortWithPrismaUsersEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortWithPrismaUsersEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p cohortWithPrismaUsersEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p cohortWithPrismaUsersEqualsUniqueParam) cohortModel() {}
func (p cohortWithPrismaUsersEqualsUniqueParam) usersField()  {}

func (cohortWithPrismaUsersEqualsUniqueParam) unique() {}
func (cohortWithPrismaUsersEqualsUniqueParam) equals() {}

type cohortUserActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var cohortUserOutput = []builder.Output{
	{Name: "userID"},
	{Name: "cohortID"},
}

type CohortUserRelationWith interface {
	getQuery() builder.Query
	with()
	cohortUserRelation()
}

type CohortUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortUserModel()
}

type cohortUserDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserDefaultParam) field() builder.Field {
	return p.data
}

func (p cohortUserDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserDefaultParam) cohortUserModel() {}

type CohortUserOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortUserModel()
}

type cohortUserOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserOrderByParam) field() builder.Field {
	return p.data
}

func (p cohortUserOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserOrderByParam) cohortUserModel() {}

type CohortUserCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortUserModel()
	isCursor()
}

type cohortUserCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserCursorParam) field() builder.Field {
	return p.data
}

func (p cohortUserCursorParam) isCursor() {}

func (p cohortUserCursorParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserCursorParam) cohortUserModel() {}

type CohortUserParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	cohortUserModel()
}

type cohortUserParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserParamUnique) cohortUserModel() {}

func (cohortUserParamUnique) unique() {}

func (p cohortUserParamUnique) field() builder.Field {
	return p.data
}

func (p cohortUserParamUnique) getQuery() builder.Query {
	return p.query
}

type CohortUserEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	cohortUserModel()
}

type cohortUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserEqualsParam) cohortUserModel() {}

func (cohortUserEqualsParam) equals() {}

func (p cohortUserEqualsParam) field() builder.Field {
	return p.data
}

func (p cohortUserEqualsParam) getQuery() builder.Query {
	return p.query
}

type CohortUserEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	cohortUserModel()
}

type cohortUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserEqualsUniqueParam) cohortUserModel() {}

func (cohortUserEqualsUniqueParam) unique() {}
func (cohortUserEqualsUniqueParam) equals() {}

func (p cohortUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p cohortUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type CohortUserSetParam interface {
	field() builder.Field
	settable()
	cohortUserModel()
}

type cohortUserSetParam struct {
	data builder.Field
}

func (cohortUserSetParam) settable() {}

func (p cohortUserSetParam) field() builder.Field {
	return p.data
}

func (p cohortUserSetParam) cohortUserModel() {}

type CohortUserWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	cohortUserModel()
	userIDField()
}

type CohortUserWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortUserModel()
	userIDField()
}

type cohortUserWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p cohortUserWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserWithPrismaUserIDSetParam) cohortUserModel() {}

func (p cohortUserWithPrismaUserIDSetParam) userIDField() {}

type CohortUserWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortUserModel()
	userIDField()
}

type cohortUserWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p cohortUserWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserWithPrismaUserIDEqualsParam) cohortUserModel() {}

func (p cohortUserWithPrismaUserIDEqualsParam) userIDField() {}

func (cohortUserWithPrismaUserIDSetParam) settable()  {}
func (cohortUserWithPrismaUserIDEqualsParam) equals() {}

type cohortUserWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p cohortUserWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserWithPrismaUserIDEqualsUniqueParam) cohortUserModel() {}
func (p cohortUserWithPrismaUserIDEqualsUniqueParam) userIDField()     {}

func (cohortUserWithPrismaUserIDEqualsUniqueParam) unique() {}
func (cohortUserWithPrismaUserIDEqualsUniqueParam) equals() {}

type CohortUserWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	cohortUserModel()
	userField()
}

type CohortUserWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortUserModel()
	userField()
}

type cohortUserWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p cohortUserWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserWithPrismaUserSetParam) cohortUserModel() {}

func (p cohortUserWithPrismaUserSetParam) userField() {}

type CohortUserWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortUserModel()
	userField()
}

type cohortUserWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p cohortUserWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserWithPrismaUserEqualsParam) cohortUserModel() {}

func (p cohortUserWithPrismaUserEqualsParam) userField() {}

func (cohortUserWithPrismaUserSetParam) settable()  {}
func (cohortUserWithPrismaUserEqualsParam) equals() {}

type cohortUserWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p cohortUserWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserWithPrismaUserEqualsUniqueParam) cohortUserModel() {}
func (p cohortUserWithPrismaUserEqualsUniqueParam) userField()       {}

func (cohortUserWithPrismaUserEqualsUniqueParam) unique() {}
func (cohortUserWithPrismaUserEqualsUniqueParam) equals() {}

type CohortUserWithPrismaCohortIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	cohortUserModel()
	cohortIDField()
}

type CohortUserWithPrismaCohortIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortUserModel()
	cohortIDField()
}

type cohortUserWithPrismaCohortIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserWithPrismaCohortIDSetParam) field() builder.Field {
	return p.data
}

func (p cohortUserWithPrismaCohortIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserWithPrismaCohortIDSetParam) cohortUserModel() {}

func (p cohortUserWithPrismaCohortIDSetParam) cohortIDField() {}

type CohortUserWithPrismaCohortIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortUserModel()
	cohortIDField()
}

type cohortUserWithPrismaCohortIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserWithPrismaCohortIDEqualsParam) field() builder.Field {
	return p.data
}

func (p cohortUserWithPrismaCohortIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserWithPrismaCohortIDEqualsParam) cohortUserModel() {}

func (p cohortUserWithPrismaCohortIDEqualsParam) cohortIDField() {}

func (cohortUserWithPrismaCohortIDSetParam) settable()  {}
func (cohortUserWithPrismaCohortIDEqualsParam) equals() {}

type cohortUserWithPrismaCohortIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserWithPrismaCohortIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p cohortUserWithPrismaCohortIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserWithPrismaCohortIDEqualsUniqueParam) cohortUserModel() {}
func (p cohortUserWithPrismaCohortIDEqualsUniqueParam) cohortIDField()   {}

func (cohortUserWithPrismaCohortIDEqualsUniqueParam) unique() {}
func (cohortUserWithPrismaCohortIDEqualsUniqueParam) equals() {}

type CohortUserWithPrismaCohortEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	cohortUserModel()
	cohortField()
}

type CohortUserWithPrismaCohortSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortUserModel()
	cohortField()
}

type cohortUserWithPrismaCohortSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserWithPrismaCohortSetParam) field() builder.Field {
	return p.data
}

func (p cohortUserWithPrismaCohortSetParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserWithPrismaCohortSetParam) cohortUserModel() {}

func (p cohortUserWithPrismaCohortSetParam) cohortField() {}

type CohortUserWithPrismaCohortWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	cohortUserModel()
	cohortField()
}

type cohortUserWithPrismaCohortEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserWithPrismaCohortEqualsParam) field() builder.Field {
	return p.data
}

func (p cohortUserWithPrismaCohortEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserWithPrismaCohortEqualsParam) cohortUserModel() {}

func (p cohortUserWithPrismaCohortEqualsParam) cohortField() {}

func (cohortUserWithPrismaCohortSetParam) settable()  {}
func (cohortUserWithPrismaCohortEqualsParam) equals() {}

type cohortUserWithPrismaCohortEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p cohortUserWithPrismaCohortEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p cohortUserWithPrismaCohortEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p cohortUserWithPrismaCohortEqualsUniqueParam) cohortUserModel() {}
func (p cohortUserWithPrismaCohortEqualsUniqueParam) cohortField()     {}

func (cohortUserWithPrismaCohortEqualsUniqueParam) unique() {}
func (cohortUserWithPrismaCohortEqualsUniqueParam) equals() {}

type notificationMetaActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var notificationMetaOutput = []builder.Output{
	{Name: "id"},
	{Name: "data"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type NotificationMetaRelationWith interface {
	getQuery() builder.Query
	with()
	notificationMetaRelation()
}

type NotificationMetaWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
}

type notificationMetaDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaDefaultParam) field() builder.Field {
	return p.data
}

func (p notificationMetaDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaDefaultParam) notificationMetaModel() {}

type NotificationMetaOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
}

type notificationMetaOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaOrderByParam) field() builder.Field {
	return p.data
}

func (p notificationMetaOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaOrderByParam) notificationMetaModel() {}

type NotificationMetaCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
	isCursor()
}

type notificationMetaCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaCursorParam) field() builder.Field {
	return p.data
}

func (p notificationMetaCursorParam) isCursor() {}

func (p notificationMetaCursorParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaCursorParam) notificationMetaModel() {}

type NotificationMetaParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	notificationMetaModel()
}

type notificationMetaParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaParamUnique) notificationMetaModel() {}

func (notificationMetaParamUnique) unique() {}

func (p notificationMetaParamUnique) field() builder.Field {
	return p.data
}

func (p notificationMetaParamUnique) getQuery() builder.Query {
	return p.query
}

type NotificationMetaEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationMetaModel()
}

type notificationMetaEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaEqualsParam) notificationMetaModel() {}

func (notificationMetaEqualsParam) equals() {}

func (p notificationMetaEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationMetaEqualsParam) getQuery() builder.Query {
	return p.query
}

type NotificationMetaEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	notificationMetaModel()
}

type notificationMetaEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaEqualsUniqueParam) notificationMetaModel() {}

func (notificationMetaEqualsUniqueParam) unique() {}
func (notificationMetaEqualsUniqueParam) equals() {}

func (p notificationMetaEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationMetaEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type NotificationMetaSetParam interface {
	field() builder.Field
	settable()
	notificationMetaModel()
}

type notificationMetaSetParam struct {
	data builder.Field
}

func (notificationMetaSetParam) settable() {}

func (p notificationMetaSetParam) field() builder.Field {
	return p.data
}

func (p notificationMetaSetParam) notificationMetaModel() {}

type NotificationMetaWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationMetaModel()
	idField()
}

type NotificationMetaWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
	idField()
}

type notificationMetaWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaIDSetParam) notificationMetaModel() {}

func (p notificationMetaWithPrismaIDSetParam) idField() {}

type NotificationMetaWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
	idField()
}

type notificationMetaWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaIDEqualsParam) notificationMetaModel() {}

func (p notificationMetaWithPrismaIDEqualsParam) idField() {}

func (notificationMetaWithPrismaIDSetParam) settable()  {}
func (notificationMetaWithPrismaIDEqualsParam) equals() {}

type notificationMetaWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaIDEqualsUniqueParam) notificationMetaModel() {}
func (p notificationMetaWithPrismaIDEqualsUniqueParam) idField()               {}

func (notificationMetaWithPrismaIDEqualsUniqueParam) unique() {}
func (notificationMetaWithPrismaIDEqualsUniqueParam) equals() {}

type NotificationMetaWithPrismaDataEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationMetaModel()
	dataField()
}

type NotificationMetaWithPrismaDataSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
	dataField()
}

type notificationMetaWithPrismaDataSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaDataSetParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaDataSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaDataSetParam) notificationMetaModel() {}

func (p notificationMetaWithPrismaDataSetParam) dataField() {}

type NotificationMetaWithPrismaDataWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
	dataField()
}

type notificationMetaWithPrismaDataEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaDataEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaDataEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaDataEqualsParam) notificationMetaModel() {}

func (p notificationMetaWithPrismaDataEqualsParam) dataField() {}

func (notificationMetaWithPrismaDataSetParam) settable()  {}
func (notificationMetaWithPrismaDataEqualsParam) equals() {}

type notificationMetaWithPrismaDataEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaDataEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaDataEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaDataEqualsUniqueParam) notificationMetaModel() {}
func (p notificationMetaWithPrismaDataEqualsUniqueParam) dataField()             {}

func (notificationMetaWithPrismaDataEqualsUniqueParam) unique() {}
func (notificationMetaWithPrismaDataEqualsUniqueParam) equals() {}

type NotificationMetaWithPrismaNotificationsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationMetaModel()
	notificationsField()
}

type NotificationMetaWithPrismaNotificationsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
	notificationsField()
}

type notificationMetaWithPrismaNotificationsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaNotificationsSetParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaNotificationsSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaNotificationsSetParam) notificationMetaModel() {}

func (p notificationMetaWithPrismaNotificationsSetParam) notificationsField() {}

type NotificationMetaWithPrismaNotificationsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
	notificationsField()
}

type notificationMetaWithPrismaNotificationsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaNotificationsEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaNotificationsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaNotificationsEqualsParam) notificationMetaModel() {}

func (p notificationMetaWithPrismaNotificationsEqualsParam) notificationsField() {}

func (notificationMetaWithPrismaNotificationsSetParam) settable()  {}
func (notificationMetaWithPrismaNotificationsEqualsParam) equals() {}

type notificationMetaWithPrismaNotificationsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaNotificationsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaNotificationsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaNotificationsEqualsUniqueParam) notificationMetaModel() {}
func (p notificationMetaWithPrismaNotificationsEqualsUniqueParam) notificationsField()    {}

func (notificationMetaWithPrismaNotificationsEqualsUniqueParam) unique() {}
func (notificationMetaWithPrismaNotificationsEqualsUniqueParam) equals() {}

type NotificationMetaWithPrismaCampaignEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationMetaModel()
	campaignField()
}

type NotificationMetaWithPrismaCampaignSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
	campaignField()
}

type notificationMetaWithPrismaCampaignSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaCampaignSetParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaCampaignSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaCampaignSetParam) notificationMetaModel() {}

func (p notificationMetaWithPrismaCampaignSetParam) campaignField() {}

type NotificationMetaWithPrismaCampaignWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
	campaignField()
}

type notificationMetaWithPrismaCampaignEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaCampaignEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaCampaignEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaCampaignEqualsParam) notificationMetaModel() {}

func (p notificationMetaWithPrismaCampaignEqualsParam) campaignField() {}

func (notificationMetaWithPrismaCampaignSetParam) settable()  {}
func (notificationMetaWithPrismaCampaignEqualsParam) equals() {}

type notificationMetaWithPrismaCampaignEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaCampaignEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaCampaignEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaCampaignEqualsUniqueParam) notificationMetaModel() {}
func (p notificationMetaWithPrismaCampaignEqualsUniqueParam) campaignField()         {}

func (notificationMetaWithPrismaCampaignEqualsUniqueParam) unique() {}
func (notificationMetaWithPrismaCampaignEqualsUniqueParam) equals() {}

type NotificationMetaWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationMetaModel()
	createdAtField()
}

type NotificationMetaWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
	createdAtField()
}

type notificationMetaWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaCreatedAtSetParam) notificationMetaModel() {}

func (p notificationMetaWithPrismaCreatedAtSetParam) createdAtField() {}

type NotificationMetaWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
	createdAtField()
}

type notificationMetaWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaCreatedAtEqualsParam) notificationMetaModel() {}

func (p notificationMetaWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (notificationMetaWithPrismaCreatedAtSetParam) settable()  {}
func (notificationMetaWithPrismaCreatedAtEqualsParam) equals() {}

type notificationMetaWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaCreatedAtEqualsUniqueParam) notificationMetaModel() {}
func (p notificationMetaWithPrismaCreatedAtEqualsUniqueParam) createdAtField()        {}

func (notificationMetaWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (notificationMetaWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type NotificationMetaWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationMetaModel()
	updatedAtField()
}

type NotificationMetaWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
	updatedAtField()
}

type notificationMetaWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaUpdatedAtSetParam) notificationMetaModel() {}

func (p notificationMetaWithPrismaUpdatedAtSetParam) updatedAtField() {}

type NotificationMetaWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationMetaModel()
	updatedAtField()
}

type notificationMetaWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaUpdatedAtEqualsParam) notificationMetaModel() {}

func (p notificationMetaWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (notificationMetaWithPrismaUpdatedAtSetParam) settable()  {}
func (notificationMetaWithPrismaUpdatedAtEqualsParam) equals() {}

type notificationMetaWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationMetaWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationMetaWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationMetaWithPrismaUpdatedAtEqualsUniqueParam) notificationMetaModel() {}
func (p notificationMetaWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField()        {}

func (notificationMetaWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (notificationMetaWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type notificationActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var notificationOutput = []builder.Output{
	{Name: "id"},
	{Name: "token"},
	{Name: "userID"},
	{Name: "status"},
	{Name: "metaID"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type NotificationRelationWith interface {
	getQuery() builder.Query
	with()
	notificationRelation()
}

type NotificationWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
}

type notificationDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationDefaultParam) field() builder.Field {
	return p.data
}

func (p notificationDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p notificationDefaultParam) notificationModel() {}

type NotificationOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
}

type notificationOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationOrderByParam) field() builder.Field {
	return p.data
}

func (p notificationOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p notificationOrderByParam) notificationModel() {}

type NotificationCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	isCursor()
}

type notificationCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationCursorParam) field() builder.Field {
	return p.data
}

func (p notificationCursorParam) isCursor() {}

func (p notificationCursorParam) getQuery() builder.Query {
	return p.query
}

func (p notificationCursorParam) notificationModel() {}

type NotificationParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	notificationModel()
}

type notificationParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p notificationParamUnique) notificationModel() {}

func (notificationParamUnique) unique() {}

func (p notificationParamUnique) field() builder.Field {
	return p.data
}

func (p notificationParamUnique) getQuery() builder.Query {
	return p.query
}

type NotificationEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationModel()
}

type notificationEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationEqualsParam) notificationModel() {}

func (notificationEqualsParam) equals() {}

func (p notificationEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationEqualsParam) getQuery() builder.Query {
	return p.query
}

type NotificationEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	notificationModel()
}

type notificationEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationEqualsUniqueParam) notificationModel() {}

func (notificationEqualsUniqueParam) unique() {}
func (notificationEqualsUniqueParam) equals() {}

func (p notificationEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type NotificationSetParam interface {
	field() builder.Field
	settable()
	notificationModel()
}

type notificationSetParam struct {
	data builder.Field
}

func (notificationSetParam) settable() {}

func (p notificationSetParam) field() builder.Field {
	return p.data
}

func (p notificationSetParam) notificationModel() {}

type NotificationWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationModel()
	idField()
}

type NotificationWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	idField()
}

type notificationWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaIDSetParam) notificationModel() {}

func (p notificationWithPrismaIDSetParam) idField() {}

type NotificationWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	idField()
}

type notificationWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaIDEqualsParam) notificationModel() {}

func (p notificationWithPrismaIDEqualsParam) idField() {}

func (notificationWithPrismaIDSetParam) settable()  {}
func (notificationWithPrismaIDEqualsParam) equals() {}

type notificationWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaIDEqualsUniqueParam) notificationModel() {}
func (p notificationWithPrismaIDEqualsUniqueParam) idField()           {}

func (notificationWithPrismaIDEqualsUniqueParam) unique() {}
func (notificationWithPrismaIDEqualsUniqueParam) equals() {}

type NotificationWithPrismaTokenEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationModel()
	tokenField()
}

type NotificationWithPrismaTokenSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	tokenField()
}

type notificationWithPrismaTokenSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaTokenSetParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaTokenSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaTokenSetParam) notificationModel() {}

func (p notificationWithPrismaTokenSetParam) tokenField() {}

type NotificationWithPrismaTokenWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	tokenField()
}

type notificationWithPrismaTokenEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaTokenEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaTokenEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaTokenEqualsParam) notificationModel() {}

func (p notificationWithPrismaTokenEqualsParam) tokenField() {}

func (notificationWithPrismaTokenSetParam) settable()  {}
func (notificationWithPrismaTokenEqualsParam) equals() {}

type notificationWithPrismaTokenEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaTokenEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaTokenEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaTokenEqualsUniqueParam) notificationModel() {}
func (p notificationWithPrismaTokenEqualsUniqueParam) tokenField()        {}

func (notificationWithPrismaTokenEqualsUniqueParam) unique() {}
func (notificationWithPrismaTokenEqualsUniqueParam) equals() {}

type NotificationWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationModel()
	userIDField()
}

type NotificationWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	userIDField()
}

type notificationWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaUserIDSetParam) notificationModel() {}

func (p notificationWithPrismaUserIDSetParam) userIDField() {}

type NotificationWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	userIDField()
}

type notificationWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaUserIDEqualsParam) notificationModel() {}

func (p notificationWithPrismaUserIDEqualsParam) userIDField() {}

func (notificationWithPrismaUserIDSetParam) settable()  {}
func (notificationWithPrismaUserIDEqualsParam) equals() {}

type notificationWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaUserIDEqualsUniqueParam) notificationModel() {}
func (p notificationWithPrismaUserIDEqualsUniqueParam) userIDField()       {}

func (notificationWithPrismaUserIDEqualsUniqueParam) unique() {}
func (notificationWithPrismaUserIDEqualsUniqueParam) equals() {}

type NotificationWithPrismaStatusEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationModel()
	statusField()
}

type NotificationWithPrismaStatusSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	statusField()
}

type notificationWithPrismaStatusSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaStatusSetParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaStatusSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaStatusSetParam) notificationModel() {}

func (p notificationWithPrismaStatusSetParam) statusField() {}

type NotificationWithPrismaStatusWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	statusField()
}

type notificationWithPrismaStatusEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaStatusEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaStatusEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaStatusEqualsParam) notificationModel() {}

func (p notificationWithPrismaStatusEqualsParam) statusField() {}

func (notificationWithPrismaStatusSetParam) settable()  {}
func (notificationWithPrismaStatusEqualsParam) equals() {}

type notificationWithPrismaStatusEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaStatusEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaStatusEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaStatusEqualsUniqueParam) notificationModel() {}
func (p notificationWithPrismaStatusEqualsUniqueParam) statusField()       {}

func (notificationWithPrismaStatusEqualsUniqueParam) unique() {}
func (notificationWithPrismaStatusEqualsUniqueParam) equals() {}

type NotificationWithPrismaMetaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationModel()
	metaIDField()
}

type NotificationWithPrismaMetaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	metaIDField()
}

type notificationWithPrismaMetaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaMetaIDSetParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaMetaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaMetaIDSetParam) notificationModel() {}

func (p notificationWithPrismaMetaIDSetParam) metaIDField() {}

type NotificationWithPrismaMetaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	metaIDField()
}

type notificationWithPrismaMetaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaMetaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaMetaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaMetaIDEqualsParam) notificationModel() {}

func (p notificationWithPrismaMetaIDEqualsParam) metaIDField() {}

func (notificationWithPrismaMetaIDSetParam) settable()  {}
func (notificationWithPrismaMetaIDEqualsParam) equals() {}

type notificationWithPrismaMetaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaMetaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaMetaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaMetaIDEqualsUniqueParam) notificationModel() {}
func (p notificationWithPrismaMetaIDEqualsUniqueParam) metaIDField()       {}

func (notificationWithPrismaMetaIDEqualsUniqueParam) unique() {}
func (notificationWithPrismaMetaIDEqualsUniqueParam) equals() {}

type NotificationWithPrismaMetaEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationModel()
	metaField()
}

type NotificationWithPrismaMetaSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	metaField()
}

type notificationWithPrismaMetaSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaMetaSetParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaMetaSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaMetaSetParam) notificationModel() {}

func (p notificationWithPrismaMetaSetParam) metaField() {}

type NotificationWithPrismaMetaWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	metaField()
}

type notificationWithPrismaMetaEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaMetaEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaMetaEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaMetaEqualsParam) notificationModel() {}

func (p notificationWithPrismaMetaEqualsParam) metaField() {}

func (notificationWithPrismaMetaSetParam) settable()  {}
func (notificationWithPrismaMetaEqualsParam) equals() {}

type notificationWithPrismaMetaEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaMetaEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaMetaEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaMetaEqualsUniqueParam) notificationModel() {}
func (p notificationWithPrismaMetaEqualsUniqueParam) metaField()         {}

func (notificationWithPrismaMetaEqualsUniqueParam) unique() {}
func (notificationWithPrismaMetaEqualsUniqueParam) equals() {}

type NotificationWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationModel()
	createdAtField()
}

type NotificationWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	createdAtField()
}

type notificationWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaCreatedAtSetParam) notificationModel() {}

func (p notificationWithPrismaCreatedAtSetParam) createdAtField() {}

type NotificationWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	createdAtField()
}

type notificationWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaCreatedAtEqualsParam) notificationModel() {}

func (p notificationWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (notificationWithPrismaCreatedAtSetParam) settable()  {}
func (notificationWithPrismaCreatedAtEqualsParam) equals() {}

type notificationWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaCreatedAtEqualsUniqueParam) notificationModel() {}
func (p notificationWithPrismaCreatedAtEqualsUniqueParam) createdAtField()    {}

func (notificationWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (notificationWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type NotificationWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	notificationModel()
	updatedAtField()
}

type NotificationWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	updatedAtField()
}

type notificationWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaUpdatedAtSetParam) notificationModel() {}

func (p notificationWithPrismaUpdatedAtSetParam) updatedAtField() {}

type NotificationWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	notificationModel()
	updatedAtField()
}

type notificationWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaUpdatedAtEqualsParam) notificationModel() {}

func (p notificationWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (notificationWithPrismaUpdatedAtSetParam) settable()  {}
func (notificationWithPrismaUpdatedAtEqualsParam) equals() {}

type notificationWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p notificationWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p notificationWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p notificationWithPrismaUpdatedAtEqualsUniqueParam) notificationModel() {}
func (p notificationWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField()    {}

func (notificationWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (notificationWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

type campaignActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var campaignOutput = []builder.Output{
	{Name: "id"},
	{Name: "name"},
	{Name: "criteria"},
	{Name: "notificationMetaID"},
	{Name: "status"},
	{Name: "createdAt"},
	{Name: "updatedAt"},
}

type CampaignRelationWith interface {
	getQuery() builder.Query
	with()
	campaignRelation()
}

type CampaignWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
}

type campaignDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignDefaultParam) field() builder.Field {
	return p.data
}

func (p campaignDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p campaignDefaultParam) campaignModel() {}

type CampaignOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
}

type campaignOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignOrderByParam) field() builder.Field {
	return p.data
}

func (p campaignOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p campaignOrderByParam) campaignModel() {}

type CampaignCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	isCursor()
}

type campaignCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignCursorParam) field() builder.Field {
	return p.data
}

func (p campaignCursorParam) isCursor() {}

func (p campaignCursorParam) getQuery() builder.Query {
	return p.query
}

func (p campaignCursorParam) campaignModel() {}

type CampaignParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	campaignModel()
}

type campaignParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p campaignParamUnique) campaignModel() {}

func (campaignParamUnique) unique() {}

func (p campaignParamUnique) field() builder.Field {
	return p.data
}

func (p campaignParamUnique) getQuery() builder.Query {
	return p.query
}

type CampaignEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	campaignModel()
}

type campaignEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignEqualsParam) campaignModel() {}

func (campaignEqualsParam) equals() {}

func (p campaignEqualsParam) field() builder.Field {
	return p.data
}

func (p campaignEqualsParam) getQuery() builder.Query {
	return p.query
}

type CampaignEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	campaignModel()
}

type campaignEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignEqualsUniqueParam) campaignModel() {}

func (campaignEqualsUniqueParam) unique() {}
func (campaignEqualsUniqueParam) equals() {}

func (p campaignEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p campaignEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type CampaignSetParam interface {
	field() builder.Field
	settable()
	campaignModel()
}

type campaignSetParam struct {
	data builder.Field
}

func (campaignSetParam) settable() {}

func (p campaignSetParam) field() builder.Field {
	return p.data
}

func (p campaignSetParam) campaignModel() {}

type CampaignWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	campaignModel()
	idField()
}

type CampaignWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	idField()
}

type campaignWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaIDSetParam) campaignModel() {}

func (p campaignWithPrismaIDSetParam) idField() {}

type CampaignWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	idField()
}

type campaignWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaIDEqualsParam) campaignModel() {}

func (p campaignWithPrismaIDEqualsParam) idField() {}

func (campaignWithPrismaIDSetParam) settable()  {}
func (campaignWithPrismaIDEqualsParam) equals() {}

type campaignWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaIDEqualsUniqueParam) campaignModel() {}
func (p campaignWithPrismaIDEqualsUniqueParam) idField()       {}

func (campaignWithPrismaIDEqualsUniqueParam) unique() {}
func (campaignWithPrismaIDEqualsUniqueParam) equals() {}

type CampaignWithPrismaNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	campaignModel()
	nameField()
}

type CampaignWithPrismaNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	nameField()
}

type campaignWithPrismaNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaNameSetParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaNameSetParam) campaignModel() {}

func (p campaignWithPrismaNameSetParam) nameField() {}

type CampaignWithPrismaNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	nameField()
}

type campaignWithPrismaNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaNameEqualsParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaNameEqualsParam) campaignModel() {}

func (p campaignWithPrismaNameEqualsParam) nameField() {}

func (campaignWithPrismaNameSetParam) settable()  {}
func (campaignWithPrismaNameEqualsParam) equals() {}

type campaignWithPrismaNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaNameEqualsUniqueParam) campaignModel() {}
func (p campaignWithPrismaNameEqualsUniqueParam) nameField()     {}

func (campaignWithPrismaNameEqualsUniqueParam) unique() {}
func (campaignWithPrismaNameEqualsUniqueParam) equals() {}

type CampaignWithPrismaCriteriaEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	campaignModel()
	criteriaField()
}

type CampaignWithPrismaCriteriaSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	criteriaField()
}

type campaignWithPrismaCriteriaSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaCriteriaSetParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaCriteriaSetParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaCriteriaSetParam) campaignModel() {}

func (p campaignWithPrismaCriteriaSetParam) criteriaField() {}

type CampaignWithPrismaCriteriaWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	criteriaField()
}

type campaignWithPrismaCriteriaEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaCriteriaEqualsParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaCriteriaEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaCriteriaEqualsParam) campaignModel() {}

func (p campaignWithPrismaCriteriaEqualsParam) criteriaField() {}

func (campaignWithPrismaCriteriaSetParam) settable()  {}
func (campaignWithPrismaCriteriaEqualsParam) equals() {}

type campaignWithPrismaCriteriaEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaCriteriaEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaCriteriaEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaCriteriaEqualsUniqueParam) campaignModel() {}
func (p campaignWithPrismaCriteriaEqualsUniqueParam) criteriaField() {}

func (campaignWithPrismaCriteriaEqualsUniqueParam) unique() {}
func (campaignWithPrismaCriteriaEqualsUniqueParam) equals() {}

type CampaignWithPrismaNotificationMetaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	campaignModel()
	notificationMetaIDField()
}

type CampaignWithPrismaNotificationMetaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	notificationMetaIDField()
}

type campaignWithPrismaNotificationMetaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaNotificationMetaIDSetParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaNotificationMetaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaNotificationMetaIDSetParam) campaignModel() {}

func (p campaignWithPrismaNotificationMetaIDSetParam) notificationMetaIDField() {}

type CampaignWithPrismaNotificationMetaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	notificationMetaIDField()
}

type campaignWithPrismaNotificationMetaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaNotificationMetaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaNotificationMetaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaNotificationMetaIDEqualsParam) campaignModel() {}

func (p campaignWithPrismaNotificationMetaIDEqualsParam) notificationMetaIDField() {}

func (campaignWithPrismaNotificationMetaIDSetParam) settable()  {}
func (campaignWithPrismaNotificationMetaIDEqualsParam) equals() {}

type campaignWithPrismaNotificationMetaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaNotificationMetaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaNotificationMetaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaNotificationMetaIDEqualsUniqueParam) campaignModel()           {}
func (p campaignWithPrismaNotificationMetaIDEqualsUniqueParam) notificationMetaIDField() {}

func (campaignWithPrismaNotificationMetaIDEqualsUniqueParam) unique() {}
func (campaignWithPrismaNotificationMetaIDEqualsUniqueParam) equals() {}

type CampaignWithPrismaStatusEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	campaignModel()
	statusField()
}

type CampaignWithPrismaStatusSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	statusField()
}

type campaignWithPrismaStatusSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaStatusSetParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaStatusSetParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaStatusSetParam) campaignModel() {}

func (p campaignWithPrismaStatusSetParam) statusField() {}

type CampaignWithPrismaStatusWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	statusField()
}

type campaignWithPrismaStatusEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaStatusEqualsParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaStatusEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaStatusEqualsParam) campaignModel() {}

func (p campaignWithPrismaStatusEqualsParam) statusField() {}

func (campaignWithPrismaStatusSetParam) settable()  {}
func (campaignWithPrismaStatusEqualsParam) equals() {}

type campaignWithPrismaStatusEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaStatusEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaStatusEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaStatusEqualsUniqueParam) campaignModel() {}
func (p campaignWithPrismaStatusEqualsUniqueParam) statusField()   {}

func (campaignWithPrismaStatusEqualsUniqueParam) unique() {}
func (campaignWithPrismaStatusEqualsUniqueParam) equals() {}

type CampaignWithPrismaNotificationMetaEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	campaignModel()
	notificationMetaField()
}

type CampaignWithPrismaNotificationMetaSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	notificationMetaField()
}

type campaignWithPrismaNotificationMetaSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaNotificationMetaSetParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaNotificationMetaSetParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaNotificationMetaSetParam) campaignModel() {}

func (p campaignWithPrismaNotificationMetaSetParam) notificationMetaField() {}

type CampaignWithPrismaNotificationMetaWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	notificationMetaField()
}

type campaignWithPrismaNotificationMetaEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaNotificationMetaEqualsParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaNotificationMetaEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaNotificationMetaEqualsParam) campaignModel() {}

func (p campaignWithPrismaNotificationMetaEqualsParam) notificationMetaField() {}

func (campaignWithPrismaNotificationMetaSetParam) settable()  {}
func (campaignWithPrismaNotificationMetaEqualsParam) equals() {}

type campaignWithPrismaNotificationMetaEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaNotificationMetaEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaNotificationMetaEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaNotificationMetaEqualsUniqueParam) campaignModel()         {}
func (p campaignWithPrismaNotificationMetaEqualsUniqueParam) notificationMetaField() {}

func (campaignWithPrismaNotificationMetaEqualsUniqueParam) unique() {}
func (campaignWithPrismaNotificationMetaEqualsUniqueParam) equals() {}

type CampaignWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	campaignModel()
	createdAtField()
}

type CampaignWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	createdAtField()
}

type campaignWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaCreatedAtSetParam) campaignModel() {}

func (p campaignWithPrismaCreatedAtSetParam) createdAtField() {}

type CampaignWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	createdAtField()
}

type campaignWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaCreatedAtEqualsParam) campaignModel() {}

func (p campaignWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (campaignWithPrismaCreatedAtSetParam) settable()  {}
func (campaignWithPrismaCreatedAtEqualsParam) equals() {}

type campaignWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaCreatedAtEqualsUniqueParam) campaignModel()  {}
func (p campaignWithPrismaCreatedAtEqualsUniqueParam) createdAtField() {}

func (campaignWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (campaignWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type CampaignWithPrismaUpdatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	campaignModel()
	updatedAtField()
}

type CampaignWithPrismaUpdatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	updatedAtField()
}

type campaignWithPrismaUpdatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaUpdatedAtSetParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaUpdatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaUpdatedAtSetParam) campaignModel() {}

func (p campaignWithPrismaUpdatedAtSetParam) updatedAtField() {}

type CampaignWithPrismaUpdatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	campaignModel()
	updatedAtField()
}

type campaignWithPrismaUpdatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaUpdatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaUpdatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaUpdatedAtEqualsParam) campaignModel() {}

func (p campaignWithPrismaUpdatedAtEqualsParam) updatedAtField() {}

func (campaignWithPrismaUpdatedAtSetParam) settable()  {}
func (campaignWithPrismaUpdatedAtEqualsParam) equals() {}

type campaignWithPrismaUpdatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p campaignWithPrismaUpdatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p campaignWithPrismaUpdatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p campaignWithPrismaUpdatedAtEqualsUniqueParam) campaignModel()  {}
func (p campaignWithPrismaUpdatedAtEqualsUniqueParam) updatedAtField() {}

func (campaignWithPrismaUpdatedAtEqualsUniqueParam) unique() {}
func (campaignWithPrismaUpdatedAtEqualsUniqueParam) equals() {}

// --- template create.gotpl ---

// Creates a single user.
func (r userActions) CreateOne(
	_id UserWithPrismaIDSetParam,

	optional ...UserSetParam,
) userCreateOne {
	var v userCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "CampaignUsers"
	v.query.Outputs = userOutput

	var fields []builder.Field

	fields = append(fields, _id.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r userCreateOne) With(params ...UserRelationWith) userCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type userCreateOne struct {
	query builder.Query
}

func (p userCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p userCreateOne) userModel() {}

func (r userCreateOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userCreateOne) Tx() userUniqueTxResult {
	v := NewuserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single token.
func (r tokenActions) CreateOne(
	_token TokenWithPrismaTokenSetParam,

	optional ...TokenSetParam,
) tokenCreateOne {
	var v tokenCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Token"
	v.query.Outputs = tokenOutput

	var fields []builder.Field

	fields = append(fields, _token.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r tokenCreateOne) With(params ...TokenRelationWith) tokenCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type tokenCreateOne struct {
	query builder.Query
}

func (p tokenCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p tokenCreateOne) tokenModel() {}

func (r tokenCreateOne) Exec(ctx context.Context) (*TokenModel, error) {
	var v TokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tokenCreateOne) Tx() tokenUniqueTxResult {
	v := NewtokenUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single cohort.
func (r cohortActions) CreateOne(
	_name CohortWithPrismaNameSetParam,

	optional ...CohortSetParam,
) cohortCreateOne {
	var v cohortCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Cohort"
	v.query.Outputs = cohortOutput

	var fields []builder.Field

	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r cohortCreateOne) With(params ...CohortRelationWith) cohortCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type cohortCreateOne struct {
	query builder.Query
}

func (p cohortCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p cohortCreateOne) cohortModel() {}

func (r cohortCreateOne) Exec(ctx context.Context) (*CohortModel, error) {
	var v CohortModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortCreateOne) Tx() cohortUniqueTxResult {
	v := NewcohortUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single cohortUser.
func (r cohortUserActions) CreateOne(
	_user CohortUserWithPrismaUserSetParam,
	_cohort CohortUserWithPrismaCohortSetParam,

	optional ...CohortUserSetParam,
) cohortUserCreateOne {
	var v cohortUserCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "CohortUser"
	v.query.Outputs = cohortUserOutput

	var fields []builder.Field

	fields = append(fields, _user.field())
	fields = append(fields, _cohort.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r cohortUserCreateOne) With(params ...CohortUserRelationWith) cohortUserCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type cohortUserCreateOne struct {
	query builder.Query
}

func (p cohortUserCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p cohortUserCreateOne) cohortUserModel() {}

func (r cohortUserCreateOne) Exec(ctx context.Context) (*CohortUserModel, error) {
	var v CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserCreateOne) Tx() cohortUserUniqueTxResult {
	v := NewcohortUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single notificationMeta.
func (r notificationMetaActions) CreateOne(
	_data NotificationMetaWithPrismaDataSetParam,

	optional ...NotificationMetaSetParam,
) notificationMetaCreateOne {
	var v notificationMetaCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "NotificationMeta"
	v.query.Outputs = notificationMetaOutput

	var fields []builder.Field

	fields = append(fields, _data.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r notificationMetaCreateOne) With(params ...NotificationMetaRelationWith) notificationMetaCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type notificationMetaCreateOne struct {
	query builder.Query
}

func (p notificationMetaCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p notificationMetaCreateOne) notificationMetaModel() {}

func (r notificationMetaCreateOne) Exec(ctx context.Context) (*NotificationMetaModel, error) {
	var v NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaCreateOne) Tx() notificationMetaUniqueTxResult {
	v := NewnotificationMetaUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single notification.
func (r notificationActions) CreateOne(
	_token NotificationWithPrismaTokenSetParam,
	_userID NotificationWithPrismaUserIDSetParam,
	_meta NotificationWithPrismaMetaSetParam,

	optional ...NotificationSetParam,
) notificationCreateOne {
	var v notificationCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Notification"
	v.query.Outputs = notificationOutput

	var fields []builder.Field

	fields = append(fields, _token.field())
	fields = append(fields, _userID.field())
	fields = append(fields, _meta.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r notificationCreateOne) With(params ...NotificationRelationWith) notificationCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type notificationCreateOne struct {
	query builder.Query
}

func (p notificationCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p notificationCreateOne) notificationModel() {}

func (r notificationCreateOne) Exec(ctx context.Context) (*NotificationModel, error) {
	var v NotificationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationCreateOne) Tx() notificationUniqueTxResult {
	v := NewnotificationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single campaign.
func (r campaignActions) CreateOne(
	_name CampaignWithPrismaNameSetParam,
	_criteria CampaignWithPrismaCriteriaSetParam,
	_notificationMeta CampaignWithPrismaNotificationMetaSetParam,

	optional ...CampaignSetParam,
) campaignCreateOne {
	var v campaignCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Campaign"
	v.query.Outputs = campaignOutput

	var fields []builder.Field

	fields = append(fields, _name.field())
	fields = append(fields, _criteria.field())
	fields = append(fields, _notificationMeta.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r campaignCreateOne) With(params ...CampaignRelationWith) campaignCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type campaignCreateOne struct {
	query builder.Query
}

func (p campaignCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p campaignCreateOne) campaignModel() {}

func (r campaignCreateOne) Exec(ctx context.Context) (*CampaignModel, error) {
	var v CampaignModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r campaignCreateOne) Tx() campaignUniqueTxResult {
	v := NewcampaignUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template find.gotpl ---

type userToTokensFindUnique struct {
	query builder.Query
}

func (r userToTokensFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToTokensFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToTokensFindUnique) with()         {}
func (r userToTokensFindUnique) userModel()    {}
func (r userToTokensFindUnique) userRelation() {}

func (r userToTokensFindUnique) With(params ...TokenRelationWith) userToTokensFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToTokensFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToTokensFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToTokensFindUnique) Update(params ...UserSetParam) userToTokensUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "CampaignUsers"

	var v userToTokensUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToTokensUpdateUnique struct {
	query builder.Query
}

func (r userToTokensUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToTokensUpdateUnique) userModel() {}

func (r userToTokensUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToTokensUpdateUnique) Tx() userUniqueTxResult {
	v := NewuserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToTokensFindUnique) Delete() userToTokensDeleteUnique {
	var v userToTokensDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "CampaignUsers"

	return v
}

type userToTokensDeleteUnique struct {
	query builder.Query
}

func (r userToTokensDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToTokensDeleteUnique) userModel() {}

func (r userToTokensDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToTokensDeleteUnique) Tx() userUniqueTxResult {
	v := NewuserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToTokensFindFirst struct {
	query builder.Query
}

func (r userToTokensFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToTokensFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToTokensFindFirst) with()         {}
func (r userToTokensFindFirst) userModel()    {}
func (r userToTokensFindFirst) userRelation() {}

func (r userToTokensFindFirst) With(params ...TokenRelationWith) userToTokensFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToTokensFindFirst) OrderBy(params ...TokenOrderByParam) userToTokensFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToTokensFindFirst) Skip(count int) userToTokensFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToTokensFindFirst) Take(count int) userToTokensFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToTokensFindFirst) Cursor(cursor UserCursorParam) userToTokensFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToTokensFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToTokensFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToTokensFindMany struct {
	query builder.Query
}

func (r userToTokensFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToTokensFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToTokensFindMany) with()         {}
func (r userToTokensFindMany) userModel()    {}
func (r userToTokensFindMany) userRelation() {}

func (r userToTokensFindMany) With(params ...TokenRelationWith) userToTokensFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToTokensFindMany) OrderBy(params ...TokenOrderByParam) userToTokensFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToTokensFindMany) Skip(count int) userToTokensFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToTokensFindMany) Take(count int) userToTokensFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToTokensFindMany) Cursor(cursor UserCursorParam) userToTokensFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToTokensFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToTokensFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToTokensFindMany) Update(params ...UserSetParam) userToTokensUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "CampaignUsers"

	r.query.Outputs = countOutput

	var v userToTokensUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToTokensUpdateMany struct {
	query builder.Query
}

func (r userToTokensUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToTokensUpdateMany) userModel() {}

func (r userToTokensUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToTokensUpdateMany) Tx() userManyTxResult {
	v := NewuserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToTokensFindMany) Delete() userToTokensDeleteMany {
	var v userToTokensDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "CampaignUsers"

	v.query.Outputs = countOutput

	return v
}

type userToTokensDeleteMany struct {
	query builder.Query
}

func (r userToTokensDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToTokensDeleteMany) userModel() {}

func (r userToTokensDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToTokensDeleteMany) Tx() userManyTxResult {
	v := NewuserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToCohortsFindUnique struct {
	query builder.Query
}

func (r userToCohortsFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToCohortsFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToCohortsFindUnique) with()         {}
func (r userToCohortsFindUnique) userModel()    {}
func (r userToCohortsFindUnique) userRelation() {}

func (r userToCohortsFindUnique) With(params ...CohortUserRelationWith) userToCohortsFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToCohortsFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToCohortsFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToCohortsFindUnique) Update(params ...UserSetParam) userToCohortsUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "CampaignUsers"

	var v userToCohortsUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToCohortsUpdateUnique struct {
	query builder.Query
}

func (r userToCohortsUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToCohortsUpdateUnique) userModel() {}

func (r userToCohortsUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToCohortsUpdateUnique) Tx() userUniqueTxResult {
	v := NewuserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToCohortsFindUnique) Delete() userToCohortsDeleteUnique {
	var v userToCohortsDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "CampaignUsers"

	return v
}

type userToCohortsDeleteUnique struct {
	query builder.Query
}

func (r userToCohortsDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToCohortsDeleteUnique) userModel() {}

func (r userToCohortsDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToCohortsDeleteUnique) Tx() userUniqueTxResult {
	v := NewuserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToCohortsFindFirst struct {
	query builder.Query
}

func (r userToCohortsFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToCohortsFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToCohortsFindFirst) with()         {}
func (r userToCohortsFindFirst) userModel()    {}
func (r userToCohortsFindFirst) userRelation() {}

func (r userToCohortsFindFirst) With(params ...CohortUserRelationWith) userToCohortsFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToCohortsFindFirst) OrderBy(params ...CohortUserOrderByParam) userToCohortsFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToCohortsFindFirst) Skip(count int) userToCohortsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToCohortsFindFirst) Take(count int) userToCohortsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToCohortsFindFirst) Cursor(cursor UserCursorParam) userToCohortsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToCohortsFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToCohortsFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToCohortsFindMany struct {
	query builder.Query
}

func (r userToCohortsFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToCohortsFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToCohortsFindMany) with()         {}
func (r userToCohortsFindMany) userModel()    {}
func (r userToCohortsFindMany) userRelation() {}

func (r userToCohortsFindMany) With(params ...CohortUserRelationWith) userToCohortsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToCohortsFindMany) OrderBy(params ...CohortUserOrderByParam) userToCohortsFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToCohortsFindMany) Skip(count int) userToCohortsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToCohortsFindMany) Take(count int) userToCohortsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToCohortsFindMany) Cursor(cursor UserCursorParam) userToCohortsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToCohortsFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToCohortsFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToCohortsFindMany) Update(params ...UserSetParam) userToCohortsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "CampaignUsers"

	r.query.Outputs = countOutput

	var v userToCohortsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToCohortsUpdateMany struct {
	query builder.Query
}

func (r userToCohortsUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToCohortsUpdateMany) userModel() {}

func (r userToCohortsUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToCohortsUpdateMany) Tx() userManyTxResult {
	v := NewuserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToCohortsFindMany) Delete() userToCohortsDeleteMany {
	var v userToCohortsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "CampaignUsers"

	v.query.Outputs = countOutput

	return v
}

type userToCohortsDeleteMany struct {
	query builder.Query
}

func (r userToCohortsDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToCohortsDeleteMany) userModel() {}

func (r userToCohortsDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToCohortsDeleteMany) Tx() userManyTxResult {
	v := NewuserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindUnique struct {
	query builder.Query
}

func (r userFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindUnique) with()         {}
func (r userFindUnique) userModel()    {}
func (r userFindUnique) userRelation() {}

func (r userActions) FindUnique(
	params UserEqualsUniqueWhereParam,
) userFindUnique {
	var v userFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "CampaignUsers"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userFindUnique) With(params ...UserRelationWith) userFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) Update(params ...UserSetParam) userUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "CampaignUsers"

	var v userUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateUnique struct {
	query builder.Query
}

func (r userUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateUnique) userModel() {}

func (r userUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateUnique) Tx() userUniqueTxResult {
	v := NewuserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindUnique) Delete() userDeleteUnique {
	var v userDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "CampaignUsers"

	return v
}

type userDeleteUnique struct {
	query builder.Query
}

func (r userDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteUnique) userModel() {}

func (r userDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteUnique) Tx() userUniqueTxResult {
	v := NewuserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindFirst struct {
	query builder.Query
}

func (r userFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindFirst) with()         {}
func (r userFindFirst) userModel()    {}
func (r userFindFirst) userRelation() {}

func (r userActions) FindFirst(
	params ...UserWhereParam,
) userFindFirst {
	var v userFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "CampaignUsers"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindFirst) With(params ...UserRelationWith) userFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindFirst) OrderBy(params ...UserOrderByParam) userFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindFirst) Skip(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindFirst) Take(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindFirst) Cursor(cursor UserCursorParam) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userFindMany struct {
	query builder.Query
}

func (r userFindMany) getQuery() builder.Query {
	return r.query
}

func (r userFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindMany) with()         {}
func (r userFindMany) userModel()    {}
func (r userFindMany) userRelation() {}

func (r userActions) FindMany(
	params ...UserWhereParam,
) userFindMany {
	var v userFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "CampaignUsers"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindMany) With(params ...UserRelationWith) userFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindMany) OrderBy(params ...UserOrderByParam) userFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindMany) Skip(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindMany) Take(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindMany) Cursor(cursor UserCursorParam) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) Update(params ...UserSetParam) userUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "CampaignUsers"

	r.query.Outputs = countOutput

	var v userUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateMany struct {
	query builder.Query
}

func (r userUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateMany) userModel() {}

func (r userUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateMany) Tx() userManyTxResult {
	v := NewuserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindMany) Delete() userDeleteMany {
	var v userDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "CampaignUsers"

	v.query.Outputs = countOutput

	return v
}

type userDeleteMany struct {
	query builder.Query
}

func (r userDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteMany) userModel() {}

func (r userDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteMany) Tx() userManyTxResult {
	v := NewuserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type tokenToUserFindUnique struct {
	query builder.Query
}

func (r tokenToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r tokenToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r tokenToUserFindUnique) with()          {}
func (r tokenToUserFindUnique) tokenModel()    {}
func (r tokenToUserFindUnique) tokenRelation() {}

func (r tokenToUserFindUnique) With(params ...UserRelationWith) tokenToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r tokenToUserFindUnique) Exec(ctx context.Context) (
	*TokenModel,
	error,
) {
	var v *TokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r tokenToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerToken,
	error,
) {
	var v *InnerToken
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r tokenToUserFindUnique) Update(params ...TokenSetParam) tokenToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Token"

	var v tokenToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type tokenToUserUpdateUnique struct {
	query builder.Query
}

func (r tokenToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r tokenToUserUpdateUnique) tokenModel() {}

func (r tokenToUserUpdateUnique) Exec(ctx context.Context) (*TokenModel, error) {
	var v TokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tokenToUserUpdateUnique) Tx() tokenUniqueTxResult {
	v := NewtokenUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r tokenToUserFindUnique) Delete() tokenToUserDeleteUnique {
	var v tokenToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Token"

	return v
}

type tokenToUserDeleteUnique struct {
	query builder.Query
}

func (r tokenToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p tokenToUserDeleteUnique) tokenModel() {}

func (r tokenToUserDeleteUnique) Exec(ctx context.Context) (*TokenModel, error) {
	var v TokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tokenToUserDeleteUnique) Tx() tokenUniqueTxResult {
	v := NewtokenUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type tokenToUserFindFirst struct {
	query builder.Query
}

func (r tokenToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r tokenToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r tokenToUserFindFirst) with()          {}
func (r tokenToUserFindFirst) tokenModel()    {}
func (r tokenToUserFindFirst) tokenRelation() {}

func (r tokenToUserFindFirst) With(params ...UserRelationWith) tokenToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r tokenToUserFindFirst) OrderBy(params ...UserOrderByParam) tokenToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r tokenToUserFindFirst) Skip(count int) tokenToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r tokenToUserFindFirst) Take(count int) tokenToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r tokenToUserFindFirst) Cursor(cursor TokenCursorParam) tokenToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r tokenToUserFindFirst) Exec(ctx context.Context) (
	*TokenModel,
	error,
) {
	var v *TokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r tokenToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerToken,
	error,
) {
	var v *InnerToken
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type tokenToUserFindMany struct {
	query builder.Query
}

func (r tokenToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r tokenToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r tokenToUserFindMany) with()          {}
func (r tokenToUserFindMany) tokenModel()    {}
func (r tokenToUserFindMany) tokenRelation() {}

func (r tokenToUserFindMany) With(params ...UserRelationWith) tokenToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r tokenToUserFindMany) OrderBy(params ...UserOrderByParam) tokenToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r tokenToUserFindMany) Skip(count int) tokenToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r tokenToUserFindMany) Take(count int) tokenToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r tokenToUserFindMany) Cursor(cursor TokenCursorParam) tokenToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r tokenToUserFindMany) Exec(ctx context.Context) (
	[]TokenModel,
	error,
) {
	var v []TokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r tokenToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerToken,
	error,
) {
	var v []InnerToken
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r tokenToUserFindMany) Update(params ...TokenSetParam) tokenToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Token"

	r.query.Outputs = countOutput

	var v tokenToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type tokenToUserUpdateMany struct {
	query builder.Query
}

func (r tokenToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r tokenToUserUpdateMany) tokenModel() {}

func (r tokenToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tokenToUserUpdateMany) Tx() tokenManyTxResult {
	v := NewtokenManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r tokenToUserFindMany) Delete() tokenToUserDeleteMany {
	var v tokenToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Token"

	v.query.Outputs = countOutput

	return v
}

type tokenToUserDeleteMany struct {
	query builder.Query
}

func (r tokenToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p tokenToUserDeleteMany) tokenModel() {}

func (r tokenToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tokenToUserDeleteMany) Tx() tokenManyTxResult {
	v := NewtokenManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type tokenFindUnique struct {
	query builder.Query
}

func (r tokenFindUnique) getQuery() builder.Query {
	return r.query
}

func (r tokenFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r tokenFindUnique) with()          {}
func (r tokenFindUnique) tokenModel()    {}
func (r tokenFindUnique) tokenRelation() {}

func (r tokenActions) FindUnique(
	params TokenEqualsUniqueWhereParam,
) tokenFindUnique {
	var v tokenFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Token"
	v.query.Outputs = tokenOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r tokenFindUnique) With(params ...TokenRelationWith) tokenFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r tokenFindUnique) Exec(ctx context.Context) (
	*TokenModel,
	error,
) {
	var v *TokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r tokenFindUnique) ExecInner(ctx context.Context) (
	*InnerToken,
	error,
) {
	var v *InnerToken
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r tokenFindUnique) Update(params ...TokenSetParam) tokenUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Token"

	var v tokenUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type tokenUpdateUnique struct {
	query builder.Query
}

func (r tokenUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r tokenUpdateUnique) tokenModel() {}

func (r tokenUpdateUnique) Exec(ctx context.Context) (*TokenModel, error) {
	var v TokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tokenUpdateUnique) Tx() tokenUniqueTxResult {
	v := NewtokenUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r tokenFindUnique) Delete() tokenDeleteUnique {
	var v tokenDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Token"

	return v
}

type tokenDeleteUnique struct {
	query builder.Query
}

func (r tokenDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p tokenDeleteUnique) tokenModel() {}

func (r tokenDeleteUnique) Exec(ctx context.Context) (*TokenModel, error) {
	var v TokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tokenDeleteUnique) Tx() tokenUniqueTxResult {
	v := NewtokenUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type tokenFindFirst struct {
	query builder.Query
}

func (r tokenFindFirst) getQuery() builder.Query {
	return r.query
}

func (r tokenFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r tokenFindFirst) with()          {}
func (r tokenFindFirst) tokenModel()    {}
func (r tokenFindFirst) tokenRelation() {}

func (r tokenActions) FindFirst(
	params ...TokenWhereParam,
) tokenFindFirst {
	var v tokenFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Token"
	v.query.Outputs = tokenOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r tokenFindFirst) With(params ...TokenRelationWith) tokenFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r tokenFindFirst) OrderBy(params ...TokenOrderByParam) tokenFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r tokenFindFirst) Skip(count int) tokenFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r tokenFindFirst) Take(count int) tokenFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r tokenFindFirst) Cursor(cursor TokenCursorParam) tokenFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r tokenFindFirst) Exec(ctx context.Context) (
	*TokenModel,
	error,
) {
	var v *TokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r tokenFindFirst) ExecInner(ctx context.Context) (
	*InnerToken,
	error,
) {
	var v *InnerToken
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type tokenFindMany struct {
	query builder.Query
}

func (r tokenFindMany) getQuery() builder.Query {
	return r.query
}

func (r tokenFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r tokenFindMany) with()          {}
func (r tokenFindMany) tokenModel()    {}
func (r tokenFindMany) tokenRelation() {}

func (r tokenActions) FindMany(
	params ...TokenWhereParam,
) tokenFindMany {
	var v tokenFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Token"
	v.query.Outputs = tokenOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r tokenFindMany) With(params ...TokenRelationWith) tokenFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r tokenFindMany) OrderBy(params ...TokenOrderByParam) tokenFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r tokenFindMany) Skip(count int) tokenFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r tokenFindMany) Take(count int) tokenFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r tokenFindMany) Cursor(cursor TokenCursorParam) tokenFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r tokenFindMany) Exec(ctx context.Context) (
	[]TokenModel,
	error,
) {
	var v []TokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r tokenFindMany) ExecInner(ctx context.Context) (
	[]InnerToken,
	error,
) {
	var v []InnerToken
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r tokenFindMany) Update(params ...TokenSetParam) tokenUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Token"

	r.query.Outputs = countOutput

	var v tokenUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type tokenUpdateMany struct {
	query builder.Query
}

func (r tokenUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r tokenUpdateMany) tokenModel() {}

func (r tokenUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tokenUpdateMany) Tx() tokenManyTxResult {
	v := NewtokenManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r tokenFindMany) Delete() tokenDeleteMany {
	var v tokenDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Token"

	v.query.Outputs = countOutput

	return v
}

type tokenDeleteMany struct {
	query builder.Query
}

func (r tokenDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p tokenDeleteMany) tokenModel() {}

func (r tokenDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tokenDeleteMany) Tx() tokenManyTxResult {
	v := NewtokenManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type cohortToUsersFindUnique struct {
	query builder.Query
}

func (r cohortToUsersFindUnique) getQuery() builder.Query {
	return r.query
}

func (r cohortToUsersFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortToUsersFindUnique) with()           {}
func (r cohortToUsersFindUnique) cohortModel()    {}
func (r cohortToUsersFindUnique) cohortRelation() {}

func (r cohortToUsersFindUnique) With(params ...CohortUserRelationWith) cohortToUsersFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortToUsersFindUnique) Exec(ctx context.Context) (
	*CohortModel,
	error,
) {
	var v *CohortModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortToUsersFindUnique) ExecInner(ctx context.Context) (
	*InnerCohort,
	error,
) {
	var v *InnerCohort
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortToUsersFindUnique) Update(params ...CohortSetParam) cohortToUsersUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Cohort"

	var v cohortToUsersUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type cohortToUsersUpdateUnique struct {
	query builder.Query
}

func (r cohortToUsersUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortToUsersUpdateUnique) cohortModel() {}

func (r cohortToUsersUpdateUnique) Exec(ctx context.Context) (*CohortModel, error) {
	var v CohortModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortToUsersUpdateUnique) Tx() cohortUniqueTxResult {
	v := NewcohortUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r cohortToUsersFindUnique) Delete() cohortToUsersDeleteUnique {
	var v cohortToUsersDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Cohort"

	return v
}

type cohortToUsersDeleteUnique struct {
	query builder.Query
}

func (r cohortToUsersDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p cohortToUsersDeleteUnique) cohortModel() {}

func (r cohortToUsersDeleteUnique) Exec(ctx context.Context) (*CohortModel, error) {
	var v CohortModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortToUsersDeleteUnique) Tx() cohortUniqueTxResult {
	v := NewcohortUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type cohortToUsersFindFirst struct {
	query builder.Query
}

func (r cohortToUsersFindFirst) getQuery() builder.Query {
	return r.query
}

func (r cohortToUsersFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortToUsersFindFirst) with()           {}
func (r cohortToUsersFindFirst) cohortModel()    {}
func (r cohortToUsersFindFirst) cohortRelation() {}

func (r cohortToUsersFindFirst) With(params ...CohortUserRelationWith) cohortToUsersFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortToUsersFindFirst) OrderBy(params ...CohortUserOrderByParam) cohortToUsersFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r cohortToUsersFindFirst) Skip(count int) cohortToUsersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r cohortToUsersFindFirst) Take(count int) cohortToUsersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r cohortToUsersFindFirst) Cursor(cursor CohortCursorParam) cohortToUsersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r cohortToUsersFindFirst) Exec(ctx context.Context) (
	*CohortModel,
	error,
) {
	var v *CohortModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortToUsersFindFirst) ExecInner(ctx context.Context) (
	*InnerCohort,
	error,
) {
	var v *InnerCohort
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type cohortToUsersFindMany struct {
	query builder.Query
}

func (r cohortToUsersFindMany) getQuery() builder.Query {
	return r.query
}

func (r cohortToUsersFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortToUsersFindMany) with()           {}
func (r cohortToUsersFindMany) cohortModel()    {}
func (r cohortToUsersFindMany) cohortRelation() {}

func (r cohortToUsersFindMany) With(params ...CohortUserRelationWith) cohortToUsersFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortToUsersFindMany) OrderBy(params ...CohortUserOrderByParam) cohortToUsersFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r cohortToUsersFindMany) Skip(count int) cohortToUsersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r cohortToUsersFindMany) Take(count int) cohortToUsersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r cohortToUsersFindMany) Cursor(cursor CohortCursorParam) cohortToUsersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r cohortToUsersFindMany) Exec(ctx context.Context) (
	[]CohortModel,
	error,
) {
	var v []CohortModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r cohortToUsersFindMany) ExecInner(ctx context.Context) (
	[]InnerCohort,
	error,
) {
	var v []InnerCohort
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r cohortToUsersFindMany) Update(params ...CohortSetParam) cohortToUsersUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Cohort"

	r.query.Outputs = countOutput

	var v cohortToUsersUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type cohortToUsersUpdateMany struct {
	query builder.Query
}

func (r cohortToUsersUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortToUsersUpdateMany) cohortModel() {}

func (r cohortToUsersUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortToUsersUpdateMany) Tx() cohortManyTxResult {
	v := NewcohortManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r cohortToUsersFindMany) Delete() cohortToUsersDeleteMany {
	var v cohortToUsersDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Cohort"

	v.query.Outputs = countOutput

	return v
}

type cohortToUsersDeleteMany struct {
	query builder.Query
}

func (r cohortToUsersDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p cohortToUsersDeleteMany) cohortModel() {}

func (r cohortToUsersDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortToUsersDeleteMany) Tx() cohortManyTxResult {
	v := NewcohortManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type cohortFindUnique struct {
	query builder.Query
}

func (r cohortFindUnique) getQuery() builder.Query {
	return r.query
}

func (r cohortFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortFindUnique) with()           {}
func (r cohortFindUnique) cohortModel()    {}
func (r cohortFindUnique) cohortRelation() {}

func (r cohortActions) FindUnique(
	params CohortEqualsUniqueWhereParam,
) cohortFindUnique {
	var v cohortFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Cohort"
	v.query.Outputs = cohortOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r cohortFindUnique) With(params ...CohortRelationWith) cohortFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortFindUnique) Exec(ctx context.Context) (
	*CohortModel,
	error,
) {
	var v *CohortModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortFindUnique) ExecInner(ctx context.Context) (
	*InnerCohort,
	error,
) {
	var v *InnerCohort
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortFindUnique) Update(params ...CohortSetParam) cohortUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Cohort"

	var v cohortUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type cohortUpdateUnique struct {
	query builder.Query
}

func (r cohortUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUpdateUnique) cohortModel() {}

func (r cohortUpdateUnique) Exec(ctx context.Context) (*CohortModel, error) {
	var v CohortModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUpdateUnique) Tx() cohortUniqueTxResult {
	v := NewcohortUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r cohortFindUnique) Delete() cohortDeleteUnique {
	var v cohortDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Cohort"

	return v
}

type cohortDeleteUnique struct {
	query builder.Query
}

func (r cohortDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p cohortDeleteUnique) cohortModel() {}

func (r cohortDeleteUnique) Exec(ctx context.Context) (*CohortModel, error) {
	var v CohortModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortDeleteUnique) Tx() cohortUniqueTxResult {
	v := NewcohortUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type cohortFindFirst struct {
	query builder.Query
}

func (r cohortFindFirst) getQuery() builder.Query {
	return r.query
}

func (r cohortFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortFindFirst) with()           {}
func (r cohortFindFirst) cohortModel()    {}
func (r cohortFindFirst) cohortRelation() {}

func (r cohortActions) FindFirst(
	params ...CohortWhereParam,
) cohortFindFirst {
	var v cohortFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Cohort"
	v.query.Outputs = cohortOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r cohortFindFirst) With(params ...CohortRelationWith) cohortFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortFindFirst) OrderBy(params ...CohortOrderByParam) cohortFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r cohortFindFirst) Skip(count int) cohortFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r cohortFindFirst) Take(count int) cohortFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r cohortFindFirst) Cursor(cursor CohortCursorParam) cohortFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r cohortFindFirst) Exec(ctx context.Context) (
	*CohortModel,
	error,
) {
	var v *CohortModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortFindFirst) ExecInner(ctx context.Context) (
	*InnerCohort,
	error,
) {
	var v *InnerCohort
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type cohortFindMany struct {
	query builder.Query
}

func (r cohortFindMany) getQuery() builder.Query {
	return r.query
}

func (r cohortFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortFindMany) with()           {}
func (r cohortFindMany) cohortModel()    {}
func (r cohortFindMany) cohortRelation() {}

func (r cohortActions) FindMany(
	params ...CohortWhereParam,
) cohortFindMany {
	var v cohortFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Cohort"
	v.query.Outputs = cohortOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r cohortFindMany) With(params ...CohortRelationWith) cohortFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortFindMany) OrderBy(params ...CohortOrderByParam) cohortFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r cohortFindMany) Skip(count int) cohortFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r cohortFindMany) Take(count int) cohortFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r cohortFindMany) Cursor(cursor CohortCursorParam) cohortFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r cohortFindMany) Exec(ctx context.Context) (
	[]CohortModel,
	error,
) {
	var v []CohortModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r cohortFindMany) ExecInner(ctx context.Context) (
	[]InnerCohort,
	error,
) {
	var v []InnerCohort
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r cohortFindMany) Update(params ...CohortSetParam) cohortUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Cohort"

	r.query.Outputs = countOutput

	var v cohortUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type cohortUpdateMany struct {
	query builder.Query
}

func (r cohortUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUpdateMany) cohortModel() {}

func (r cohortUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUpdateMany) Tx() cohortManyTxResult {
	v := NewcohortManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r cohortFindMany) Delete() cohortDeleteMany {
	var v cohortDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Cohort"

	v.query.Outputs = countOutput

	return v
}

type cohortDeleteMany struct {
	query builder.Query
}

func (r cohortDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p cohortDeleteMany) cohortModel() {}

func (r cohortDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortDeleteMany) Tx() cohortManyTxResult {
	v := NewcohortManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type cohortUserToUserFindUnique struct {
	query builder.Query
}

func (r cohortUserToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r cohortUserToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserToUserFindUnique) with()               {}
func (r cohortUserToUserFindUnique) cohortUserModel()    {}
func (r cohortUserToUserFindUnique) cohortUserRelation() {}

func (r cohortUserToUserFindUnique) With(params ...UserRelationWith) cohortUserToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortUserToUserFindUnique) Exec(ctx context.Context) (
	*CohortUserModel,
	error,
) {
	var v *CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortUserToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerCohortUser,
	error,
) {
	var v *InnerCohortUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortUserToUserFindUnique) Update(params ...CohortUserSetParam) cohortUserToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "CohortUser"

	var v cohortUserToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type cohortUserToUserUpdateUnique struct {
	query builder.Query
}

func (r cohortUserToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserToUserUpdateUnique) cohortUserModel() {}

func (r cohortUserToUserUpdateUnique) Exec(ctx context.Context) (*CohortUserModel, error) {
	var v CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserToUserUpdateUnique) Tx() cohortUserUniqueTxResult {
	v := NewcohortUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r cohortUserToUserFindUnique) Delete() cohortUserToUserDeleteUnique {
	var v cohortUserToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "CohortUser"

	return v
}

type cohortUserToUserDeleteUnique struct {
	query builder.Query
}

func (r cohortUserToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p cohortUserToUserDeleteUnique) cohortUserModel() {}

func (r cohortUserToUserDeleteUnique) Exec(ctx context.Context) (*CohortUserModel, error) {
	var v CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserToUserDeleteUnique) Tx() cohortUserUniqueTxResult {
	v := NewcohortUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type cohortUserToUserFindFirst struct {
	query builder.Query
}

func (r cohortUserToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r cohortUserToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserToUserFindFirst) with()               {}
func (r cohortUserToUserFindFirst) cohortUserModel()    {}
func (r cohortUserToUserFindFirst) cohortUserRelation() {}

func (r cohortUserToUserFindFirst) With(params ...UserRelationWith) cohortUserToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortUserToUserFindFirst) OrderBy(params ...UserOrderByParam) cohortUserToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r cohortUserToUserFindFirst) Skip(count int) cohortUserToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r cohortUserToUserFindFirst) Take(count int) cohortUserToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r cohortUserToUserFindFirst) Cursor(cursor CohortUserCursorParam) cohortUserToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r cohortUserToUserFindFirst) Exec(ctx context.Context) (
	*CohortUserModel,
	error,
) {
	var v *CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortUserToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerCohortUser,
	error,
) {
	var v *InnerCohortUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type cohortUserToUserFindMany struct {
	query builder.Query
}

func (r cohortUserToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r cohortUserToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserToUserFindMany) with()               {}
func (r cohortUserToUserFindMany) cohortUserModel()    {}
func (r cohortUserToUserFindMany) cohortUserRelation() {}

func (r cohortUserToUserFindMany) With(params ...UserRelationWith) cohortUserToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortUserToUserFindMany) OrderBy(params ...UserOrderByParam) cohortUserToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r cohortUserToUserFindMany) Skip(count int) cohortUserToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r cohortUserToUserFindMany) Take(count int) cohortUserToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r cohortUserToUserFindMany) Cursor(cursor CohortUserCursorParam) cohortUserToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r cohortUserToUserFindMany) Exec(ctx context.Context) (
	[]CohortUserModel,
	error,
) {
	var v []CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r cohortUserToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerCohortUser,
	error,
) {
	var v []InnerCohortUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r cohortUserToUserFindMany) Update(params ...CohortUserSetParam) cohortUserToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "CohortUser"

	r.query.Outputs = countOutput

	var v cohortUserToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type cohortUserToUserUpdateMany struct {
	query builder.Query
}

func (r cohortUserToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserToUserUpdateMany) cohortUserModel() {}

func (r cohortUserToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserToUserUpdateMany) Tx() cohortUserManyTxResult {
	v := NewcohortUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r cohortUserToUserFindMany) Delete() cohortUserToUserDeleteMany {
	var v cohortUserToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "CohortUser"

	v.query.Outputs = countOutput

	return v
}

type cohortUserToUserDeleteMany struct {
	query builder.Query
}

func (r cohortUserToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p cohortUserToUserDeleteMany) cohortUserModel() {}

func (r cohortUserToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserToUserDeleteMany) Tx() cohortUserManyTxResult {
	v := NewcohortUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type cohortUserToCohortFindUnique struct {
	query builder.Query
}

func (r cohortUserToCohortFindUnique) getQuery() builder.Query {
	return r.query
}

func (r cohortUserToCohortFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserToCohortFindUnique) with()               {}
func (r cohortUserToCohortFindUnique) cohortUserModel()    {}
func (r cohortUserToCohortFindUnique) cohortUserRelation() {}

func (r cohortUserToCohortFindUnique) With(params ...CohortRelationWith) cohortUserToCohortFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortUserToCohortFindUnique) Exec(ctx context.Context) (
	*CohortUserModel,
	error,
) {
	var v *CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortUserToCohortFindUnique) ExecInner(ctx context.Context) (
	*InnerCohortUser,
	error,
) {
	var v *InnerCohortUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortUserToCohortFindUnique) Update(params ...CohortUserSetParam) cohortUserToCohortUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "CohortUser"

	var v cohortUserToCohortUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type cohortUserToCohortUpdateUnique struct {
	query builder.Query
}

func (r cohortUserToCohortUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserToCohortUpdateUnique) cohortUserModel() {}

func (r cohortUserToCohortUpdateUnique) Exec(ctx context.Context) (*CohortUserModel, error) {
	var v CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserToCohortUpdateUnique) Tx() cohortUserUniqueTxResult {
	v := NewcohortUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r cohortUserToCohortFindUnique) Delete() cohortUserToCohortDeleteUnique {
	var v cohortUserToCohortDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "CohortUser"

	return v
}

type cohortUserToCohortDeleteUnique struct {
	query builder.Query
}

func (r cohortUserToCohortDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p cohortUserToCohortDeleteUnique) cohortUserModel() {}

func (r cohortUserToCohortDeleteUnique) Exec(ctx context.Context) (*CohortUserModel, error) {
	var v CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserToCohortDeleteUnique) Tx() cohortUserUniqueTxResult {
	v := NewcohortUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type cohortUserToCohortFindFirst struct {
	query builder.Query
}

func (r cohortUserToCohortFindFirst) getQuery() builder.Query {
	return r.query
}

func (r cohortUserToCohortFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserToCohortFindFirst) with()               {}
func (r cohortUserToCohortFindFirst) cohortUserModel()    {}
func (r cohortUserToCohortFindFirst) cohortUserRelation() {}

func (r cohortUserToCohortFindFirst) With(params ...CohortRelationWith) cohortUserToCohortFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortUserToCohortFindFirst) OrderBy(params ...CohortOrderByParam) cohortUserToCohortFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r cohortUserToCohortFindFirst) Skip(count int) cohortUserToCohortFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r cohortUserToCohortFindFirst) Take(count int) cohortUserToCohortFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r cohortUserToCohortFindFirst) Cursor(cursor CohortUserCursorParam) cohortUserToCohortFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r cohortUserToCohortFindFirst) Exec(ctx context.Context) (
	*CohortUserModel,
	error,
) {
	var v *CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortUserToCohortFindFirst) ExecInner(ctx context.Context) (
	*InnerCohortUser,
	error,
) {
	var v *InnerCohortUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type cohortUserToCohortFindMany struct {
	query builder.Query
}

func (r cohortUserToCohortFindMany) getQuery() builder.Query {
	return r.query
}

func (r cohortUserToCohortFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserToCohortFindMany) with()               {}
func (r cohortUserToCohortFindMany) cohortUserModel()    {}
func (r cohortUserToCohortFindMany) cohortUserRelation() {}

func (r cohortUserToCohortFindMany) With(params ...CohortRelationWith) cohortUserToCohortFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortUserToCohortFindMany) OrderBy(params ...CohortOrderByParam) cohortUserToCohortFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r cohortUserToCohortFindMany) Skip(count int) cohortUserToCohortFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r cohortUserToCohortFindMany) Take(count int) cohortUserToCohortFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r cohortUserToCohortFindMany) Cursor(cursor CohortUserCursorParam) cohortUserToCohortFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r cohortUserToCohortFindMany) Exec(ctx context.Context) (
	[]CohortUserModel,
	error,
) {
	var v []CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r cohortUserToCohortFindMany) ExecInner(ctx context.Context) (
	[]InnerCohortUser,
	error,
) {
	var v []InnerCohortUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r cohortUserToCohortFindMany) Update(params ...CohortUserSetParam) cohortUserToCohortUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "CohortUser"

	r.query.Outputs = countOutput

	var v cohortUserToCohortUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type cohortUserToCohortUpdateMany struct {
	query builder.Query
}

func (r cohortUserToCohortUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserToCohortUpdateMany) cohortUserModel() {}

func (r cohortUserToCohortUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserToCohortUpdateMany) Tx() cohortUserManyTxResult {
	v := NewcohortUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r cohortUserToCohortFindMany) Delete() cohortUserToCohortDeleteMany {
	var v cohortUserToCohortDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "CohortUser"

	v.query.Outputs = countOutput

	return v
}

type cohortUserToCohortDeleteMany struct {
	query builder.Query
}

func (r cohortUserToCohortDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p cohortUserToCohortDeleteMany) cohortUserModel() {}

func (r cohortUserToCohortDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserToCohortDeleteMany) Tx() cohortUserManyTxResult {
	v := NewcohortUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type cohortUserFindUnique struct {
	query builder.Query
}

func (r cohortUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r cohortUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserFindUnique) with()               {}
func (r cohortUserFindUnique) cohortUserModel()    {}
func (r cohortUserFindUnique) cohortUserRelation() {}

func (r cohortUserActions) FindUnique(
	params CohortUserEqualsUniqueWhereParam,
) cohortUserFindUnique {
	var v cohortUserFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "CohortUser"
	v.query.Outputs = cohortUserOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r cohortUserFindUnique) With(params ...CohortUserRelationWith) cohortUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortUserFindUnique) Exec(ctx context.Context) (
	*CohortUserModel,
	error,
) {
	var v *CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortUserFindUnique) ExecInner(ctx context.Context) (
	*InnerCohortUser,
	error,
) {
	var v *InnerCohortUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortUserFindUnique) Update(params ...CohortUserSetParam) cohortUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "CohortUser"

	var v cohortUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type cohortUserUpdateUnique struct {
	query builder.Query
}

func (r cohortUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserUpdateUnique) cohortUserModel() {}

func (r cohortUserUpdateUnique) Exec(ctx context.Context) (*CohortUserModel, error) {
	var v CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserUpdateUnique) Tx() cohortUserUniqueTxResult {
	v := NewcohortUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r cohortUserFindUnique) Delete() cohortUserDeleteUnique {
	var v cohortUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "CohortUser"

	return v
}

type cohortUserDeleteUnique struct {
	query builder.Query
}

func (r cohortUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p cohortUserDeleteUnique) cohortUserModel() {}

func (r cohortUserDeleteUnique) Exec(ctx context.Context) (*CohortUserModel, error) {
	var v CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserDeleteUnique) Tx() cohortUserUniqueTxResult {
	v := NewcohortUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type cohortUserFindFirst struct {
	query builder.Query
}

func (r cohortUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r cohortUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserFindFirst) with()               {}
func (r cohortUserFindFirst) cohortUserModel()    {}
func (r cohortUserFindFirst) cohortUserRelation() {}

func (r cohortUserActions) FindFirst(
	params ...CohortUserWhereParam,
) cohortUserFindFirst {
	var v cohortUserFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "CohortUser"
	v.query.Outputs = cohortUserOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r cohortUserFindFirst) With(params ...CohortUserRelationWith) cohortUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortUserFindFirst) OrderBy(params ...CohortUserOrderByParam) cohortUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r cohortUserFindFirst) Skip(count int) cohortUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r cohortUserFindFirst) Take(count int) cohortUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r cohortUserFindFirst) Cursor(cursor CohortUserCursorParam) cohortUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r cohortUserFindFirst) Exec(ctx context.Context) (
	*CohortUserModel,
	error,
) {
	var v *CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r cohortUserFindFirst) ExecInner(ctx context.Context) (
	*InnerCohortUser,
	error,
) {
	var v *InnerCohortUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type cohortUserFindMany struct {
	query builder.Query
}

func (r cohortUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r cohortUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserFindMany) with()               {}
func (r cohortUserFindMany) cohortUserModel()    {}
func (r cohortUserFindMany) cohortUserRelation() {}

func (r cohortUserActions) FindMany(
	params ...CohortUserWhereParam,
) cohortUserFindMany {
	var v cohortUserFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "CohortUser"
	v.query.Outputs = cohortUserOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r cohortUserFindMany) With(params ...CohortUserRelationWith) cohortUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r cohortUserFindMany) OrderBy(params ...CohortUserOrderByParam) cohortUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r cohortUserFindMany) Skip(count int) cohortUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r cohortUserFindMany) Take(count int) cohortUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r cohortUserFindMany) Cursor(cursor CohortUserCursorParam) cohortUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r cohortUserFindMany) Exec(ctx context.Context) (
	[]CohortUserModel,
	error,
) {
	var v []CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r cohortUserFindMany) ExecInner(ctx context.Context) (
	[]InnerCohortUser,
	error,
) {
	var v []InnerCohortUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r cohortUserFindMany) Update(params ...CohortUserSetParam) cohortUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "CohortUser"

	r.query.Outputs = countOutput

	var v cohortUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type cohortUserUpdateMany struct {
	query builder.Query
}

func (r cohortUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserUpdateMany) cohortUserModel() {}

func (r cohortUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserUpdateMany) Tx() cohortUserManyTxResult {
	v := NewcohortUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r cohortUserFindMany) Delete() cohortUserDeleteMany {
	var v cohortUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "CohortUser"

	v.query.Outputs = countOutput

	return v
}

type cohortUserDeleteMany struct {
	query builder.Query
}

func (r cohortUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p cohortUserDeleteMany) cohortUserModel() {}

func (r cohortUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserDeleteMany) Tx() cohortUserManyTxResult {
	v := NewcohortUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type notificationMetaToNotificationsFindUnique struct {
	query builder.Query
}

func (r notificationMetaToNotificationsFindUnique) getQuery() builder.Query {
	return r.query
}

func (r notificationMetaToNotificationsFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaToNotificationsFindUnique) with()                     {}
func (r notificationMetaToNotificationsFindUnique) notificationMetaModel()    {}
func (r notificationMetaToNotificationsFindUnique) notificationMetaRelation() {}

func (r notificationMetaToNotificationsFindUnique) With(params ...NotificationRelationWith) notificationMetaToNotificationsFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationMetaToNotificationsFindUnique) Exec(ctx context.Context) (
	*NotificationMetaModel,
	error,
) {
	var v *NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationMetaToNotificationsFindUnique) ExecInner(ctx context.Context) (
	*InnerNotificationMeta,
	error,
) {
	var v *InnerNotificationMeta
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationMetaToNotificationsFindUnique) Update(params ...NotificationMetaSetParam) notificationMetaToNotificationsUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "NotificationMeta"

	var v notificationMetaToNotificationsUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type notificationMetaToNotificationsUpdateUnique struct {
	query builder.Query
}

func (r notificationMetaToNotificationsUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaToNotificationsUpdateUnique) notificationMetaModel() {}

func (r notificationMetaToNotificationsUpdateUnique) Exec(ctx context.Context) (*NotificationMetaModel, error) {
	var v NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaToNotificationsUpdateUnique) Tx() notificationMetaUniqueTxResult {
	v := NewnotificationMetaUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r notificationMetaToNotificationsFindUnique) Delete() notificationMetaToNotificationsDeleteUnique {
	var v notificationMetaToNotificationsDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "NotificationMeta"

	return v
}

type notificationMetaToNotificationsDeleteUnique struct {
	query builder.Query
}

func (r notificationMetaToNotificationsDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p notificationMetaToNotificationsDeleteUnique) notificationMetaModel() {}

func (r notificationMetaToNotificationsDeleteUnique) Exec(ctx context.Context) (*NotificationMetaModel, error) {
	var v NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaToNotificationsDeleteUnique) Tx() notificationMetaUniqueTxResult {
	v := NewnotificationMetaUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type notificationMetaToNotificationsFindFirst struct {
	query builder.Query
}

func (r notificationMetaToNotificationsFindFirst) getQuery() builder.Query {
	return r.query
}

func (r notificationMetaToNotificationsFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaToNotificationsFindFirst) with()                     {}
func (r notificationMetaToNotificationsFindFirst) notificationMetaModel()    {}
func (r notificationMetaToNotificationsFindFirst) notificationMetaRelation() {}

func (r notificationMetaToNotificationsFindFirst) With(params ...NotificationRelationWith) notificationMetaToNotificationsFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationMetaToNotificationsFindFirst) OrderBy(params ...NotificationOrderByParam) notificationMetaToNotificationsFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r notificationMetaToNotificationsFindFirst) Skip(count int) notificationMetaToNotificationsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r notificationMetaToNotificationsFindFirst) Take(count int) notificationMetaToNotificationsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r notificationMetaToNotificationsFindFirst) Cursor(cursor NotificationMetaCursorParam) notificationMetaToNotificationsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r notificationMetaToNotificationsFindFirst) Exec(ctx context.Context) (
	*NotificationMetaModel,
	error,
) {
	var v *NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationMetaToNotificationsFindFirst) ExecInner(ctx context.Context) (
	*InnerNotificationMeta,
	error,
) {
	var v *InnerNotificationMeta
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type notificationMetaToNotificationsFindMany struct {
	query builder.Query
}

func (r notificationMetaToNotificationsFindMany) getQuery() builder.Query {
	return r.query
}

func (r notificationMetaToNotificationsFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaToNotificationsFindMany) with()                     {}
func (r notificationMetaToNotificationsFindMany) notificationMetaModel()    {}
func (r notificationMetaToNotificationsFindMany) notificationMetaRelation() {}

func (r notificationMetaToNotificationsFindMany) With(params ...NotificationRelationWith) notificationMetaToNotificationsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationMetaToNotificationsFindMany) OrderBy(params ...NotificationOrderByParam) notificationMetaToNotificationsFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r notificationMetaToNotificationsFindMany) Skip(count int) notificationMetaToNotificationsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r notificationMetaToNotificationsFindMany) Take(count int) notificationMetaToNotificationsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r notificationMetaToNotificationsFindMany) Cursor(cursor NotificationMetaCursorParam) notificationMetaToNotificationsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r notificationMetaToNotificationsFindMany) Exec(ctx context.Context) (
	[]NotificationMetaModel,
	error,
) {
	var v []NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r notificationMetaToNotificationsFindMany) ExecInner(ctx context.Context) (
	[]InnerNotificationMeta,
	error,
) {
	var v []InnerNotificationMeta
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r notificationMetaToNotificationsFindMany) Update(params ...NotificationMetaSetParam) notificationMetaToNotificationsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "NotificationMeta"

	r.query.Outputs = countOutput

	var v notificationMetaToNotificationsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type notificationMetaToNotificationsUpdateMany struct {
	query builder.Query
}

func (r notificationMetaToNotificationsUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaToNotificationsUpdateMany) notificationMetaModel() {}

func (r notificationMetaToNotificationsUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaToNotificationsUpdateMany) Tx() notificationMetaManyTxResult {
	v := NewnotificationMetaManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r notificationMetaToNotificationsFindMany) Delete() notificationMetaToNotificationsDeleteMany {
	var v notificationMetaToNotificationsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "NotificationMeta"

	v.query.Outputs = countOutput

	return v
}

type notificationMetaToNotificationsDeleteMany struct {
	query builder.Query
}

func (r notificationMetaToNotificationsDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p notificationMetaToNotificationsDeleteMany) notificationMetaModel() {}

func (r notificationMetaToNotificationsDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaToNotificationsDeleteMany) Tx() notificationMetaManyTxResult {
	v := NewnotificationMetaManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type notificationMetaToCampaignFindUnique struct {
	query builder.Query
}

func (r notificationMetaToCampaignFindUnique) getQuery() builder.Query {
	return r.query
}

func (r notificationMetaToCampaignFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaToCampaignFindUnique) with()                     {}
func (r notificationMetaToCampaignFindUnique) notificationMetaModel()    {}
func (r notificationMetaToCampaignFindUnique) notificationMetaRelation() {}

func (r notificationMetaToCampaignFindUnique) With(params ...CampaignRelationWith) notificationMetaToCampaignFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationMetaToCampaignFindUnique) Exec(ctx context.Context) (
	*NotificationMetaModel,
	error,
) {
	var v *NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationMetaToCampaignFindUnique) ExecInner(ctx context.Context) (
	*InnerNotificationMeta,
	error,
) {
	var v *InnerNotificationMeta
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationMetaToCampaignFindUnique) Update(params ...NotificationMetaSetParam) notificationMetaToCampaignUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "NotificationMeta"

	var v notificationMetaToCampaignUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type notificationMetaToCampaignUpdateUnique struct {
	query builder.Query
}

func (r notificationMetaToCampaignUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaToCampaignUpdateUnique) notificationMetaModel() {}

func (r notificationMetaToCampaignUpdateUnique) Exec(ctx context.Context) (*NotificationMetaModel, error) {
	var v NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaToCampaignUpdateUnique) Tx() notificationMetaUniqueTxResult {
	v := NewnotificationMetaUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r notificationMetaToCampaignFindUnique) Delete() notificationMetaToCampaignDeleteUnique {
	var v notificationMetaToCampaignDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "NotificationMeta"

	return v
}

type notificationMetaToCampaignDeleteUnique struct {
	query builder.Query
}

func (r notificationMetaToCampaignDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p notificationMetaToCampaignDeleteUnique) notificationMetaModel() {}

func (r notificationMetaToCampaignDeleteUnique) Exec(ctx context.Context) (*NotificationMetaModel, error) {
	var v NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaToCampaignDeleteUnique) Tx() notificationMetaUniqueTxResult {
	v := NewnotificationMetaUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type notificationMetaToCampaignFindFirst struct {
	query builder.Query
}

func (r notificationMetaToCampaignFindFirst) getQuery() builder.Query {
	return r.query
}

func (r notificationMetaToCampaignFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaToCampaignFindFirst) with()                     {}
func (r notificationMetaToCampaignFindFirst) notificationMetaModel()    {}
func (r notificationMetaToCampaignFindFirst) notificationMetaRelation() {}

func (r notificationMetaToCampaignFindFirst) With(params ...CampaignRelationWith) notificationMetaToCampaignFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationMetaToCampaignFindFirst) OrderBy(params ...CampaignOrderByParam) notificationMetaToCampaignFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r notificationMetaToCampaignFindFirst) Skip(count int) notificationMetaToCampaignFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r notificationMetaToCampaignFindFirst) Take(count int) notificationMetaToCampaignFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r notificationMetaToCampaignFindFirst) Cursor(cursor NotificationMetaCursorParam) notificationMetaToCampaignFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r notificationMetaToCampaignFindFirst) Exec(ctx context.Context) (
	*NotificationMetaModel,
	error,
) {
	var v *NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationMetaToCampaignFindFirst) ExecInner(ctx context.Context) (
	*InnerNotificationMeta,
	error,
) {
	var v *InnerNotificationMeta
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type notificationMetaToCampaignFindMany struct {
	query builder.Query
}

func (r notificationMetaToCampaignFindMany) getQuery() builder.Query {
	return r.query
}

func (r notificationMetaToCampaignFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaToCampaignFindMany) with()                     {}
func (r notificationMetaToCampaignFindMany) notificationMetaModel()    {}
func (r notificationMetaToCampaignFindMany) notificationMetaRelation() {}

func (r notificationMetaToCampaignFindMany) With(params ...CampaignRelationWith) notificationMetaToCampaignFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationMetaToCampaignFindMany) OrderBy(params ...CampaignOrderByParam) notificationMetaToCampaignFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r notificationMetaToCampaignFindMany) Skip(count int) notificationMetaToCampaignFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r notificationMetaToCampaignFindMany) Take(count int) notificationMetaToCampaignFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r notificationMetaToCampaignFindMany) Cursor(cursor NotificationMetaCursorParam) notificationMetaToCampaignFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r notificationMetaToCampaignFindMany) Exec(ctx context.Context) (
	[]NotificationMetaModel,
	error,
) {
	var v []NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r notificationMetaToCampaignFindMany) ExecInner(ctx context.Context) (
	[]InnerNotificationMeta,
	error,
) {
	var v []InnerNotificationMeta
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r notificationMetaToCampaignFindMany) Update(params ...NotificationMetaSetParam) notificationMetaToCampaignUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "NotificationMeta"

	r.query.Outputs = countOutput

	var v notificationMetaToCampaignUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type notificationMetaToCampaignUpdateMany struct {
	query builder.Query
}

func (r notificationMetaToCampaignUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaToCampaignUpdateMany) notificationMetaModel() {}

func (r notificationMetaToCampaignUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaToCampaignUpdateMany) Tx() notificationMetaManyTxResult {
	v := NewnotificationMetaManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r notificationMetaToCampaignFindMany) Delete() notificationMetaToCampaignDeleteMany {
	var v notificationMetaToCampaignDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "NotificationMeta"

	v.query.Outputs = countOutput

	return v
}

type notificationMetaToCampaignDeleteMany struct {
	query builder.Query
}

func (r notificationMetaToCampaignDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p notificationMetaToCampaignDeleteMany) notificationMetaModel() {}

func (r notificationMetaToCampaignDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaToCampaignDeleteMany) Tx() notificationMetaManyTxResult {
	v := NewnotificationMetaManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type notificationMetaFindUnique struct {
	query builder.Query
}

func (r notificationMetaFindUnique) getQuery() builder.Query {
	return r.query
}

func (r notificationMetaFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaFindUnique) with()                     {}
func (r notificationMetaFindUnique) notificationMetaModel()    {}
func (r notificationMetaFindUnique) notificationMetaRelation() {}

func (r notificationMetaActions) FindUnique(
	params NotificationMetaEqualsUniqueWhereParam,
) notificationMetaFindUnique {
	var v notificationMetaFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "NotificationMeta"
	v.query.Outputs = notificationMetaOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r notificationMetaFindUnique) With(params ...NotificationMetaRelationWith) notificationMetaFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationMetaFindUnique) Exec(ctx context.Context) (
	*NotificationMetaModel,
	error,
) {
	var v *NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationMetaFindUnique) ExecInner(ctx context.Context) (
	*InnerNotificationMeta,
	error,
) {
	var v *InnerNotificationMeta
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationMetaFindUnique) Update(params ...NotificationMetaSetParam) notificationMetaUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "NotificationMeta"

	var v notificationMetaUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type notificationMetaUpdateUnique struct {
	query builder.Query
}

func (r notificationMetaUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaUpdateUnique) notificationMetaModel() {}

func (r notificationMetaUpdateUnique) Exec(ctx context.Context) (*NotificationMetaModel, error) {
	var v NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaUpdateUnique) Tx() notificationMetaUniqueTxResult {
	v := NewnotificationMetaUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r notificationMetaFindUnique) Delete() notificationMetaDeleteUnique {
	var v notificationMetaDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "NotificationMeta"

	return v
}

type notificationMetaDeleteUnique struct {
	query builder.Query
}

func (r notificationMetaDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p notificationMetaDeleteUnique) notificationMetaModel() {}

func (r notificationMetaDeleteUnique) Exec(ctx context.Context) (*NotificationMetaModel, error) {
	var v NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaDeleteUnique) Tx() notificationMetaUniqueTxResult {
	v := NewnotificationMetaUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type notificationMetaFindFirst struct {
	query builder.Query
}

func (r notificationMetaFindFirst) getQuery() builder.Query {
	return r.query
}

func (r notificationMetaFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaFindFirst) with()                     {}
func (r notificationMetaFindFirst) notificationMetaModel()    {}
func (r notificationMetaFindFirst) notificationMetaRelation() {}

func (r notificationMetaActions) FindFirst(
	params ...NotificationMetaWhereParam,
) notificationMetaFindFirst {
	var v notificationMetaFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "NotificationMeta"
	v.query.Outputs = notificationMetaOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r notificationMetaFindFirst) With(params ...NotificationMetaRelationWith) notificationMetaFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationMetaFindFirst) OrderBy(params ...NotificationMetaOrderByParam) notificationMetaFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r notificationMetaFindFirst) Skip(count int) notificationMetaFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r notificationMetaFindFirst) Take(count int) notificationMetaFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r notificationMetaFindFirst) Cursor(cursor NotificationMetaCursorParam) notificationMetaFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r notificationMetaFindFirst) Exec(ctx context.Context) (
	*NotificationMetaModel,
	error,
) {
	var v *NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationMetaFindFirst) ExecInner(ctx context.Context) (
	*InnerNotificationMeta,
	error,
) {
	var v *InnerNotificationMeta
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type notificationMetaFindMany struct {
	query builder.Query
}

func (r notificationMetaFindMany) getQuery() builder.Query {
	return r.query
}

func (r notificationMetaFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaFindMany) with()                     {}
func (r notificationMetaFindMany) notificationMetaModel()    {}
func (r notificationMetaFindMany) notificationMetaRelation() {}

func (r notificationMetaActions) FindMany(
	params ...NotificationMetaWhereParam,
) notificationMetaFindMany {
	var v notificationMetaFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "NotificationMeta"
	v.query.Outputs = notificationMetaOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r notificationMetaFindMany) With(params ...NotificationMetaRelationWith) notificationMetaFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationMetaFindMany) OrderBy(params ...NotificationMetaOrderByParam) notificationMetaFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r notificationMetaFindMany) Skip(count int) notificationMetaFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r notificationMetaFindMany) Take(count int) notificationMetaFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r notificationMetaFindMany) Cursor(cursor NotificationMetaCursorParam) notificationMetaFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r notificationMetaFindMany) Exec(ctx context.Context) (
	[]NotificationMetaModel,
	error,
) {
	var v []NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r notificationMetaFindMany) ExecInner(ctx context.Context) (
	[]InnerNotificationMeta,
	error,
) {
	var v []InnerNotificationMeta
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r notificationMetaFindMany) Update(params ...NotificationMetaSetParam) notificationMetaUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "NotificationMeta"

	r.query.Outputs = countOutput

	var v notificationMetaUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type notificationMetaUpdateMany struct {
	query builder.Query
}

func (r notificationMetaUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaUpdateMany) notificationMetaModel() {}

func (r notificationMetaUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaUpdateMany) Tx() notificationMetaManyTxResult {
	v := NewnotificationMetaManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r notificationMetaFindMany) Delete() notificationMetaDeleteMany {
	var v notificationMetaDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "NotificationMeta"

	v.query.Outputs = countOutput

	return v
}

type notificationMetaDeleteMany struct {
	query builder.Query
}

func (r notificationMetaDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p notificationMetaDeleteMany) notificationMetaModel() {}

func (r notificationMetaDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaDeleteMany) Tx() notificationMetaManyTxResult {
	v := NewnotificationMetaManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type notificationToMetaFindUnique struct {
	query builder.Query
}

func (r notificationToMetaFindUnique) getQuery() builder.Query {
	return r.query
}

func (r notificationToMetaFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationToMetaFindUnique) with()                 {}
func (r notificationToMetaFindUnique) notificationModel()    {}
func (r notificationToMetaFindUnique) notificationRelation() {}

func (r notificationToMetaFindUnique) With(params ...NotificationMetaRelationWith) notificationToMetaFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationToMetaFindUnique) Exec(ctx context.Context) (
	*NotificationModel,
	error,
) {
	var v *NotificationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationToMetaFindUnique) ExecInner(ctx context.Context) (
	*InnerNotification,
	error,
) {
	var v *InnerNotification
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationToMetaFindUnique) Update(params ...NotificationSetParam) notificationToMetaUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Notification"

	var v notificationToMetaUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type notificationToMetaUpdateUnique struct {
	query builder.Query
}

func (r notificationToMetaUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationToMetaUpdateUnique) notificationModel() {}

func (r notificationToMetaUpdateUnique) Exec(ctx context.Context) (*NotificationModel, error) {
	var v NotificationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationToMetaUpdateUnique) Tx() notificationUniqueTxResult {
	v := NewnotificationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r notificationToMetaFindUnique) Delete() notificationToMetaDeleteUnique {
	var v notificationToMetaDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Notification"

	return v
}

type notificationToMetaDeleteUnique struct {
	query builder.Query
}

func (r notificationToMetaDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p notificationToMetaDeleteUnique) notificationModel() {}

func (r notificationToMetaDeleteUnique) Exec(ctx context.Context) (*NotificationModel, error) {
	var v NotificationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationToMetaDeleteUnique) Tx() notificationUniqueTxResult {
	v := NewnotificationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type notificationToMetaFindFirst struct {
	query builder.Query
}

func (r notificationToMetaFindFirst) getQuery() builder.Query {
	return r.query
}

func (r notificationToMetaFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationToMetaFindFirst) with()                 {}
func (r notificationToMetaFindFirst) notificationModel()    {}
func (r notificationToMetaFindFirst) notificationRelation() {}

func (r notificationToMetaFindFirst) With(params ...NotificationMetaRelationWith) notificationToMetaFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationToMetaFindFirst) OrderBy(params ...NotificationMetaOrderByParam) notificationToMetaFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r notificationToMetaFindFirst) Skip(count int) notificationToMetaFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r notificationToMetaFindFirst) Take(count int) notificationToMetaFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r notificationToMetaFindFirst) Cursor(cursor NotificationCursorParam) notificationToMetaFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r notificationToMetaFindFirst) Exec(ctx context.Context) (
	*NotificationModel,
	error,
) {
	var v *NotificationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationToMetaFindFirst) ExecInner(ctx context.Context) (
	*InnerNotification,
	error,
) {
	var v *InnerNotification
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type notificationToMetaFindMany struct {
	query builder.Query
}

func (r notificationToMetaFindMany) getQuery() builder.Query {
	return r.query
}

func (r notificationToMetaFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationToMetaFindMany) with()                 {}
func (r notificationToMetaFindMany) notificationModel()    {}
func (r notificationToMetaFindMany) notificationRelation() {}

func (r notificationToMetaFindMany) With(params ...NotificationMetaRelationWith) notificationToMetaFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationToMetaFindMany) OrderBy(params ...NotificationMetaOrderByParam) notificationToMetaFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r notificationToMetaFindMany) Skip(count int) notificationToMetaFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r notificationToMetaFindMany) Take(count int) notificationToMetaFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r notificationToMetaFindMany) Cursor(cursor NotificationCursorParam) notificationToMetaFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r notificationToMetaFindMany) Exec(ctx context.Context) (
	[]NotificationModel,
	error,
) {
	var v []NotificationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r notificationToMetaFindMany) ExecInner(ctx context.Context) (
	[]InnerNotification,
	error,
) {
	var v []InnerNotification
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r notificationToMetaFindMany) Update(params ...NotificationSetParam) notificationToMetaUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Notification"

	r.query.Outputs = countOutput

	var v notificationToMetaUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type notificationToMetaUpdateMany struct {
	query builder.Query
}

func (r notificationToMetaUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationToMetaUpdateMany) notificationModel() {}

func (r notificationToMetaUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationToMetaUpdateMany) Tx() notificationManyTxResult {
	v := NewnotificationManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r notificationToMetaFindMany) Delete() notificationToMetaDeleteMany {
	var v notificationToMetaDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Notification"

	v.query.Outputs = countOutput

	return v
}

type notificationToMetaDeleteMany struct {
	query builder.Query
}

func (r notificationToMetaDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p notificationToMetaDeleteMany) notificationModel() {}

func (r notificationToMetaDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationToMetaDeleteMany) Tx() notificationManyTxResult {
	v := NewnotificationManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type notificationFindUnique struct {
	query builder.Query
}

func (r notificationFindUnique) getQuery() builder.Query {
	return r.query
}

func (r notificationFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationFindUnique) with()                 {}
func (r notificationFindUnique) notificationModel()    {}
func (r notificationFindUnique) notificationRelation() {}

func (r notificationActions) FindUnique(
	params NotificationEqualsUniqueWhereParam,
) notificationFindUnique {
	var v notificationFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Notification"
	v.query.Outputs = notificationOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r notificationFindUnique) With(params ...NotificationRelationWith) notificationFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationFindUnique) Exec(ctx context.Context) (
	*NotificationModel,
	error,
) {
	var v *NotificationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationFindUnique) ExecInner(ctx context.Context) (
	*InnerNotification,
	error,
) {
	var v *InnerNotification
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationFindUnique) Update(params ...NotificationSetParam) notificationUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Notification"

	var v notificationUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type notificationUpdateUnique struct {
	query builder.Query
}

func (r notificationUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationUpdateUnique) notificationModel() {}

func (r notificationUpdateUnique) Exec(ctx context.Context) (*NotificationModel, error) {
	var v NotificationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationUpdateUnique) Tx() notificationUniqueTxResult {
	v := NewnotificationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r notificationFindUnique) Delete() notificationDeleteUnique {
	var v notificationDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Notification"

	return v
}

type notificationDeleteUnique struct {
	query builder.Query
}

func (r notificationDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p notificationDeleteUnique) notificationModel() {}

func (r notificationDeleteUnique) Exec(ctx context.Context) (*NotificationModel, error) {
	var v NotificationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationDeleteUnique) Tx() notificationUniqueTxResult {
	v := NewnotificationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type notificationFindFirst struct {
	query builder.Query
}

func (r notificationFindFirst) getQuery() builder.Query {
	return r.query
}

func (r notificationFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationFindFirst) with()                 {}
func (r notificationFindFirst) notificationModel()    {}
func (r notificationFindFirst) notificationRelation() {}

func (r notificationActions) FindFirst(
	params ...NotificationWhereParam,
) notificationFindFirst {
	var v notificationFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Notification"
	v.query.Outputs = notificationOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r notificationFindFirst) With(params ...NotificationRelationWith) notificationFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationFindFirst) OrderBy(params ...NotificationOrderByParam) notificationFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r notificationFindFirst) Skip(count int) notificationFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r notificationFindFirst) Take(count int) notificationFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r notificationFindFirst) Cursor(cursor NotificationCursorParam) notificationFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r notificationFindFirst) Exec(ctx context.Context) (
	*NotificationModel,
	error,
) {
	var v *NotificationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r notificationFindFirst) ExecInner(ctx context.Context) (
	*InnerNotification,
	error,
) {
	var v *InnerNotification
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type notificationFindMany struct {
	query builder.Query
}

func (r notificationFindMany) getQuery() builder.Query {
	return r.query
}

func (r notificationFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationFindMany) with()                 {}
func (r notificationFindMany) notificationModel()    {}
func (r notificationFindMany) notificationRelation() {}

func (r notificationActions) FindMany(
	params ...NotificationWhereParam,
) notificationFindMany {
	var v notificationFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Notification"
	v.query.Outputs = notificationOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r notificationFindMany) With(params ...NotificationRelationWith) notificationFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r notificationFindMany) OrderBy(params ...NotificationOrderByParam) notificationFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r notificationFindMany) Skip(count int) notificationFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r notificationFindMany) Take(count int) notificationFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r notificationFindMany) Cursor(cursor NotificationCursorParam) notificationFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r notificationFindMany) Exec(ctx context.Context) (
	[]NotificationModel,
	error,
) {
	var v []NotificationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r notificationFindMany) ExecInner(ctx context.Context) (
	[]InnerNotification,
	error,
) {
	var v []InnerNotification
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r notificationFindMany) Update(params ...NotificationSetParam) notificationUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Notification"

	r.query.Outputs = countOutput

	var v notificationUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type notificationUpdateMany struct {
	query builder.Query
}

func (r notificationUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationUpdateMany) notificationModel() {}

func (r notificationUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationUpdateMany) Tx() notificationManyTxResult {
	v := NewnotificationManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r notificationFindMany) Delete() notificationDeleteMany {
	var v notificationDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Notification"

	v.query.Outputs = countOutput

	return v
}

type notificationDeleteMany struct {
	query builder.Query
}

func (r notificationDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p notificationDeleteMany) notificationModel() {}

func (r notificationDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationDeleteMany) Tx() notificationManyTxResult {
	v := NewnotificationManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type campaignToNotificationMetaFindUnique struct {
	query builder.Query
}

func (r campaignToNotificationMetaFindUnique) getQuery() builder.Query {
	return r.query
}

func (r campaignToNotificationMetaFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r campaignToNotificationMetaFindUnique) with()             {}
func (r campaignToNotificationMetaFindUnique) campaignModel()    {}
func (r campaignToNotificationMetaFindUnique) campaignRelation() {}

func (r campaignToNotificationMetaFindUnique) With(params ...NotificationMetaRelationWith) campaignToNotificationMetaFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r campaignToNotificationMetaFindUnique) Exec(ctx context.Context) (
	*CampaignModel,
	error,
) {
	var v *CampaignModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r campaignToNotificationMetaFindUnique) ExecInner(ctx context.Context) (
	*InnerCampaign,
	error,
) {
	var v *InnerCampaign
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r campaignToNotificationMetaFindUnique) Update(params ...CampaignSetParam) campaignToNotificationMetaUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Campaign"

	var v campaignToNotificationMetaUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type campaignToNotificationMetaUpdateUnique struct {
	query builder.Query
}

func (r campaignToNotificationMetaUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r campaignToNotificationMetaUpdateUnique) campaignModel() {}

func (r campaignToNotificationMetaUpdateUnique) Exec(ctx context.Context) (*CampaignModel, error) {
	var v CampaignModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r campaignToNotificationMetaUpdateUnique) Tx() campaignUniqueTxResult {
	v := NewcampaignUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r campaignToNotificationMetaFindUnique) Delete() campaignToNotificationMetaDeleteUnique {
	var v campaignToNotificationMetaDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Campaign"

	return v
}

type campaignToNotificationMetaDeleteUnique struct {
	query builder.Query
}

func (r campaignToNotificationMetaDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p campaignToNotificationMetaDeleteUnique) campaignModel() {}

func (r campaignToNotificationMetaDeleteUnique) Exec(ctx context.Context) (*CampaignModel, error) {
	var v CampaignModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r campaignToNotificationMetaDeleteUnique) Tx() campaignUniqueTxResult {
	v := NewcampaignUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type campaignToNotificationMetaFindFirst struct {
	query builder.Query
}

func (r campaignToNotificationMetaFindFirst) getQuery() builder.Query {
	return r.query
}

func (r campaignToNotificationMetaFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r campaignToNotificationMetaFindFirst) with()             {}
func (r campaignToNotificationMetaFindFirst) campaignModel()    {}
func (r campaignToNotificationMetaFindFirst) campaignRelation() {}

func (r campaignToNotificationMetaFindFirst) With(params ...NotificationMetaRelationWith) campaignToNotificationMetaFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r campaignToNotificationMetaFindFirst) OrderBy(params ...NotificationMetaOrderByParam) campaignToNotificationMetaFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r campaignToNotificationMetaFindFirst) Skip(count int) campaignToNotificationMetaFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r campaignToNotificationMetaFindFirst) Take(count int) campaignToNotificationMetaFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r campaignToNotificationMetaFindFirst) Cursor(cursor CampaignCursorParam) campaignToNotificationMetaFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r campaignToNotificationMetaFindFirst) Exec(ctx context.Context) (
	*CampaignModel,
	error,
) {
	var v *CampaignModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r campaignToNotificationMetaFindFirst) ExecInner(ctx context.Context) (
	*InnerCampaign,
	error,
) {
	var v *InnerCampaign
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type campaignToNotificationMetaFindMany struct {
	query builder.Query
}

func (r campaignToNotificationMetaFindMany) getQuery() builder.Query {
	return r.query
}

func (r campaignToNotificationMetaFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r campaignToNotificationMetaFindMany) with()             {}
func (r campaignToNotificationMetaFindMany) campaignModel()    {}
func (r campaignToNotificationMetaFindMany) campaignRelation() {}

func (r campaignToNotificationMetaFindMany) With(params ...NotificationMetaRelationWith) campaignToNotificationMetaFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r campaignToNotificationMetaFindMany) OrderBy(params ...NotificationMetaOrderByParam) campaignToNotificationMetaFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r campaignToNotificationMetaFindMany) Skip(count int) campaignToNotificationMetaFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r campaignToNotificationMetaFindMany) Take(count int) campaignToNotificationMetaFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r campaignToNotificationMetaFindMany) Cursor(cursor CampaignCursorParam) campaignToNotificationMetaFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r campaignToNotificationMetaFindMany) Exec(ctx context.Context) (
	[]CampaignModel,
	error,
) {
	var v []CampaignModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r campaignToNotificationMetaFindMany) ExecInner(ctx context.Context) (
	[]InnerCampaign,
	error,
) {
	var v []InnerCampaign
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r campaignToNotificationMetaFindMany) Update(params ...CampaignSetParam) campaignToNotificationMetaUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Campaign"

	r.query.Outputs = countOutput

	var v campaignToNotificationMetaUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type campaignToNotificationMetaUpdateMany struct {
	query builder.Query
}

func (r campaignToNotificationMetaUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r campaignToNotificationMetaUpdateMany) campaignModel() {}

func (r campaignToNotificationMetaUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r campaignToNotificationMetaUpdateMany) Tx() campaignManyTxResult {
	v := NewcampaignManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r campaignToNotificationMetaFindMany) Delete() campaignToNotificationMetaDeleteMany {
	var v campaignToNotificationMetaDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Campaign"

	v.query.Outputs = countOutput

	return v
}

type campaignToNotificationMetaDeleteMany struct {
	query builder.Query
}

func (r campaignToNotificationMetaDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p campaignToNotificationMetaDeleteMany) campaignModel() {}

func (r campaignToNotificationMetaDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r campaignToNotificationMetaDeleteMany) Tx() campaignManyTxResult {
	v := NewcampaignManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type campaignFindUnique struct {
	query builder.Query
}

func (r campaignFindUnique) getQuery() builder.Query {
	return r.query
}

func (r campaignFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r campaignFindUnique) with()             {}
func (r campaignFindUnique) campaignModel()    {}
func (r campaignFindUnique) campaignRelation() {}

func (r campaignActions) FindUnique(
	params CampaignEqualsUniqueWhereParam,
) campaignFindUnique {
	var v campaignFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Campaign"
	v.query.Outputs = campaignOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r campaignFindUnique) With(params ...CampaignRelationWith) campaignFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r campaignFindUnique) Exec(ctx context.Context) (
	*CampaignModel,
	error,
) {
	var v *CampaignModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r campaignFindUnique) ExecInner(ctx context.Context) (
	*InnerCampaign,
	error,
) {
	var v *InnerCampaign
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r campaignFindUnique) Update(params ...CampaignSetParam) campaignUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Campaign"

	var v campaignUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type campaignUpdateUnique struct {
	query builder.Query
}

func (r campaignUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r campaignUpdateUnique) campaignModel() {}

func (r campaignUpdateUnique) Exec(ctx context.Context) (*CampaignModel, error) {
	var v CampaignModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r campaignUpdateUnique) Tx() campaignUniqueTxResult {
	v := NewcampaignUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r campaignFindUnique) Delete() campaignDeleteUnique {
	var v campaignDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Campaign"

	return v
}

type campaignDeleteUnique struct {
	query builder.Query
}

func (r campaignDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p campaignDeleteUnique) campaignModel() {}

func (r campaignDeleteUnique) Exec(ctx context.Context) (*CampaignModel, error) {
	var v CampaignModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r campaignDeleteUnique) Tx() campaignUniqueTxResult {
	v := NewcampaignUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type campaignFindFirst struct {
	query builder.Query
}

func (r campaignFindFirst) getQuery() builder.Query {
	return r.query
}

func (r campaignFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r campaignFindFirst) with()             {}
func (r campaignFindFirst) campaignModel()    {}
func (r campaignFindFirst) campaignRelation() {}

func (r campaignActions) FindFirst(
	params ...CampaignWhereParam,
) campaignFindFirst {
	var v campaignFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Campaign"
	v.query.Outputs = campaignOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r campaignFindFirst) With(params ...CampaignRelationWith) campaignFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r campaignFindFirst) OrderBy(params ...CampaignOrderByParam) campaignFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r campaignFindFirst) Skip(count int) campaignFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r campaignFindFirst) Take(count int) campaignFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r campaignFindFirst) Cursor(cursor CampaignCursorParam) campaignFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r campaignFindFirst) Exec(ctx context.Context) (
	*CampaignModel,
	error,
) {
	var v *CampaignModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r campaignFindFirst) ExecInner(ctx context.Context) (
	*InnerCampaign,
	error,
) {
	var v *InnerCampaign
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type campaignFindMany struct {
	query builder.Query
}

func (r campaignFindMany) getQuery() builder.Query {
	return r.query
}

func (r campaignFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r campaignFindMany) with()             {}
func (r campaignFindMany) campaignModel()    {}
func (r campaignFindMany) campaignRelation() {}

func (r campaignActions) FindMany(
	params ...CampaignWhereParam,
) campaignFindMany {
	var v campaignFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Campaign"
	v.query.Outputs = campaignOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r campaignFindMany) With(params ...CampaignRelationWith) campaignFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r campaignFindMany) OrderBy(params ...CampaignOrderByParam) campaignFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r campaignFindMany) Skip(count int) campaignFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r campaignFindMany) Take(count int) campaignFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r campaignFindMany) Cursor(cursor CampaignCursorParam) campaignFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r campaignFindMany) Exec(ctx context.Context) (
	[]CampaignModel,
	error,
) {
	var v []CampaignModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r campaignFindMany) ExecInner(ctx context.Context) (
	[]InnerCampaign,
	error,
) {
	var v []InnerCampaign
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r campaignFindMany) Update(params ...CampaignSetParam) campaignUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Campaign"

	r.query.Outputs = countOutput

	var v campaignUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type campaignUpdateMany struct {
	query builder.Query
}

func (r campaignUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r campaignUpdateMany) campaignModel() {}

func (r campaignUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r campaignUpdateMany) Tx() campaignManyTxResult {
	v := NewcampaignManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r campaignFindMany) Delete() campaignDeleteMany {
	var v campaignDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Campaign"

	v.query.Outputs = countOutput

	return v
}

type campaignDeleteMany struct {
	query builder.Query
}

func (r campaignDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p campaignDeleteMany) campaignModel() {}

func (r campaignDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r campaignDeleteMany) Tx() campaignManyTxResult {
	v := NewcampaignManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template client.gotpl ---
const schema = `// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
 
generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

db_model CampaignUsers {
  id     String  @id @unique
  tokens Token[]

  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  cohorts   CohortUser[]

  @@map("user")
}

db_model Token {
  token  String  @id @unique
  userID String? @map("user_id")
  user   CampaignUsers?   @relation(fields: [userID], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("token")
}

db_model Cohort {
  id   String @id @default(uuid())
  name String

  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  users     CohortUser[]

  @@map("cohort")
}

db_model CohortUser {
  userID String @map("user_id")
  user   CampaignUsers   @relation(fields: [userID], references: [id])

  cohortID String @map("cohort_id")
  cohort   Cohort @relation(fields: [cohortID], references: [id])

  @@id([userID, cohortID])
  @@map("cohort_user")
}

db_model NotificationMeta {
  id       String                @id @default(uuid())
  data     Json 
  notifications  Notification[]
  campaign Campaign?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

	@@map("notification_meta")
}

db_model Notification {
  id     String             @id @default(uuid())
  token  String             
  userID String             @map("user_id")
  status NotificationStatus @default(PENDING)

  metaID String       @map("meta_id")
  meta   NotificationMeta @relation(fields: [metaID], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

	@@map("notification")
}

db_model Campaign {
  id             String @id @default(uuid())
  name           String
  criteria       Json   @map("criteria")
  notificationMetaID String @unique @map("notification_meta_id")
  status         CampaignStatus @default(INITIATED)

  notificationMeta NotificationMeta @relation(fields: [notificationMetaID], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("campaign")
}

enum NotificationStatus {
  PENDING
  SENT
  RECIEVED
  OPEN
  FAILED
}

enum CampaignStatus {
  INITIATED
  CREATION_IN_PROGRESS

}
`
const schemaConnectionURL = ""
const schemaEnvVarName = "DATABASE_URL"

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = true

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//	client := db.NewClient()
//	if err := client.Prisma.Connect(); err != nil {
//	  handle(err)
//	}
//
//	defer func() {
//	  if err := client.Prisma.Disconnect(); err != nil {
//	    panic(fmt.Errorf("could not disconnect: %w", err))
//	  }
//	}()
func NewClient() *PrismaClient {
	c := newClient()

	c.Engine = engine.NewQueryEngine(schema, hasBinaryTargets)

	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newMockClient(expectations *[]mock.Expectation) *PrismaClient {
	c := newClient()
	c.Engine = mock.New(expectations)
	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newClient() *PrismaClient {
	c := &PrismaClient{}
	c.User = userActions{client: c}
	c.Token = tokenActions{client: c}
	c.Cohort = cohortActions{client: c}
	c.CohortUser = cohortUserActions{client: c}
	c.NotificationMeta = notificationMetaActions{client: c}
	c.Notification = notificationActions{client: c}
	c.Campaign = campaignActions{client: c}

	c.Prisma = &PrismaActions{
		Raw: &raw.Raw{Engine: c},
		TX:  &transaction.TX{Engine: c},
	}
	return c
}

type PrismaActions struct {
	*lifecycle.Lifecycle
	*raw.Raw
	*transaction.TX
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine is an abstractions of what happens under the hood
	// the query engine can spawn and manage the binary and send requests to it,
	// while a mock engine would collect mocks to verify them later
	engine.Engine

	// prisma provides prisma-related methods as opposed to db_model methods, such as Connect, Disconnect or raw queries
	Prisma *PrismaActions

	// User provides access to CRUD methods.
	User userActions
	// Token provides access to CRUD methods.
	Token tokenActions
	// Cohort provides access to CRUD methods.
	Cohort cohortActions
	// CohortUser provides access to CRUD methods.
	CohortUser cohortUserActions
	// NotificationMeta provides access to CRUD methods.
	NotificationMeta notificationMetaActions
	// Notification provides access to CRUD methods.
	Notification notificationActions
	// Campaign provides access to CRUD methods.
	Campaign campaignActions
}

// --- template enums.gotpl ---

type NotificationStatus string

const (
	NotificationStatusPENDING  NotificationStatus = "PENDING"
	NotificationStatusSENT     NotificationStatus = "SENT"
	NotificationStatusRECIEVED NotificationStatus = "RECIEVED"
	NotificationStatusOPEN     NotificationStatus = "OPEN"
	NotificationStatusFAILED   NotificationStatus = "FAILED"
)

type RawNotificationStatus NotificationStatus
type CampaignStatus string

const (
	CampaignStatusINITIATED          CampaignStatus = "INITIATED"
	CampaignStatusCREATIONINPROGRESS CampaignStatus = "CREATION_IN_PROGRESS"
)

type RawCampaignStatus CampaignStatus

type TransactionIsolationLevel string

const (
	TransactionIsolationLevelReadUncommitted TransactionIsolationLevel = "ReadUncommitted"
	TransactionIsolationLevelReadCommitted   TransactionIsolationLevel = "ReadCommitted"
	TransactionIsolationLevelRepeatableRead  TransactionIsolationLevel = "RepeatableRead"
	TransactionIsolationLevelSerializable    TransactionIsolationLevel = "Serializable"
)

type UserScalarFieldEnum string

const (
	UserScalarFieldEnumID        UserScalarFieldEnum = "id"
	UserScalarFieldEnumCreatedAt UserScalarFieldEnum = "createdAt"
	UserScalarFieldEnumUpdatedAt UserScalarFieldEnum = "updatedAt"
)

type TokenScalarFieldEnum string

const (
	TokenScalarFieldEnumToken     TokenScalarFieldEnum = "token"
	TokenScalarFieldEnumUserID    TokenScalarFieldEnum = "userID"
	TokenScalarFieldEnumCreatedAt TokenScalarFieldEnum = "createdAt"
	TokenScalarFieldEnumUpdatedAt TokenScalarFieldEnum = "updatedAt"
)

type CohortScalarFieldEnum string

const (
	CohortScalarFieldEnumID        CohortScalarFieldEnum = "id"
	CohortScalarFieldEnumName      CohortScalarFieldEnum = "name"
	CohortScalarFieldEnumCreatedAt CohortScalarFieldEnum = "createdAt"
	CohortScalarFieldEnumUpdatedAt CohortScalarFieldEnum = "updatedAt"
)

type CohortUserScalarFieldEnum string

const (
	CohortUserScalarFieldEnumUserID   CohortUserScalarFieldEnum = "userID"
	CohortUserScalarFieldEnumCohortID CohortUserScalarFieldEnum = "cohortID"
)

type NotificationMetaScalarFieldEnum string

const (
	NotificationMetaScalarFieldEnumID        NotificationMetaScalarFieldEnum = "id"
	NotificationMetaScalarFieldEnumData      NotificationMetaScalarFieldEnum = "data"
	NotificationMetaScalarFieldEnumCreatedAt NotificationMetaScalarFieldEnum = "createdAt"
	NotificationMetaScalarFieldEnumUpdatedAt NotificationMetaScalarFieldEnum = "updatedAt"
)

type NotificationScalarFieldEnum string

const (
	NotificationScalarFieldEnumID        NotificationScalarFieldEnum = "id"
	NotificationScalarFieldEnumToken     NotificationScalarFieldEnum = "token"
	NotificationScalarFieldEnumUserID    NotificationScalarFieldEnum = "userID"
	NotificationScalarFieldEnumStatus    NotificationScalarFieldEnum = "status"
	NotificationScalarFieldEnumMetaID    NotificationScalarFieldEnum = "metaID"
	NotificationScalarFieldEnumCreatedAt NotificationScalarFieldEnum = "createdAt"
	NotificationScalarFieldEnumUpdatedAt NotificationScalarFieldEnum = "updatedAt"
)

type CampaignScalarFieldEnum string

const (
	CampaignScalarFieldEnumID                 CampaignScalarFieldEnum = "id"
	CampaignScalarFieldEnumName               CampaignScalarFieldEnum = "name"
	CampaignScalarFieldEnumCriteria           CampaignScalarFieldEnum = "criteria"
	CampaignScalarFieldEnumNotificationMetaID CampaignScalarFieldEnum = "notificationMetaID"
	CampaignScalarFieldEnumStatus             CampaignScalarFieldEnum = "status"
	CampaignScalarFieldEnumCreatedAt          CampaignScalarFieldEnum = "createdAt"
	CampaignScalarFieldEnumUpdatedAt          CampaignScalarFieldEnum = "updatedAt"
)

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

type JSONNullValueInput string

const (
	JSONNullValueInputJSONNull JSONNullValueInput = "JsonNull"
)

type QueryMode string

const (
	QueryModeDefault     QueryMode = "default"
	QueryModeInsensitive QueryMode = "insensitive"
)

type NullsOrder string

const (
	NullsOrderFirst NullsOrder = "first"
	NullsOrderLast  NullsOrder = "last"
)

type JSONNullValueFilter string

const (
	JSONNullValueFilterDbNull   JSONNullValueFilter = "DbNull"
	JSONNullValueFilterJSONNull JSONNullValueFilter = "JsonNull"
	JSONNullValueFilterAnyNull  JSONNullValueFilter = "AnyNull"
)

// --- template errors.gotpl ---
var ErrNotFound = types.ErrNotFound

// --- template db_model.gotpl ---

// UserModel represents the User db_model and is a wrapper for accessing fields and methods
type UserModel struct {
	InnerUser
	RelationsUser
}

// InnerUser holds the actual data
type InnerUser struct {
	ID        string   `json:"id"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
}

// RawUserModel is a struct for User when used in raw queries
type RawUserModel struct {
	ID        RawString   `json:"id"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
}

// RelationsUser holds the relation data separately
type RelationsUser struct {
	Tokens  []TokenModel      `json:"tokens,omitempty"`
	Cohorts []CohortUserModel `json:"cohorts,omitempty"`
}

func (r UserModel) Tokens() (value []TokenModel) {
	if r.RelationsUser.Tokens == nil {
		panic("attempted to access tokens but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.Tokens
}

func (r UserModel) Cohorts() (value []CohortUserModel) {
	if r.RelationsUser.Cohorts == nil {
		panic("attempted to access cohorts but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.Cohorts
}

// TokenModel represents the Token db_model and is a wrapper for accessing fields and methods
type TokenModel struct {
	InnerToken
	RelationsToken
}

// InnerToken holds the actual data
type InnerToken struct {
	Token     string   `json:"token"`
	UserID    *string  `json:"userID,omitempty"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
}

// RawTokenModel is a struct for Token when used in raw queries
type RawTokenModel struct {
	Token     RawString   `json:"token"`
	UserID    *RawString  `json:"userID,omitempty"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
}

// RelationsToken holds the relation data separately
type RelationsToken struct {
	User *UserModel `json:"user,omitempty"`
}

func (r TokenModel) UserID() (value string, ok bool) {
	if r.InnerToken.UserID == nil {
		return value, false
	}
	return *r.InnerToken.UserID, true
}

func (r TokenModel) User() (value *UserModel, ok bool) {
	if r.RelationsToken.User == nil {
		return value, false
	}
	return r.RelationsToken.User, true
}

// CohortModel represents the Cohort db_model and is a wrapper for accessing fields and methods
type CohortModel struct {
	InnerCohort
	RelationsCohort
}

// InnerCohort holds the actual data
type InnerCohort struct {
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
}

// RawCohortModel is a struct for Cohort when used in raw queries
type RawCohortModel struct {
	ID        RawString   `json:"id"`
	Name      RawString   `json:"name"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
}

// RelationsCohort holds the relation data separately
type RelationsCohort struct {
	Users []CohortUserModel `json:"users,omitempty"`
}

func (r CohortModel) Users() (value []CohortUserModel) {
	if r.RelationsCohort.Users == nil {
		panic("attempted to access users but did not fetch it using the .With() syntax")
	}
	return r.RelationsCohort.Users
}

// CohortUserModel represents the CohortUser db_model and is a wrapper for accessing fields and methods
type CohortUserModel struct {
	InnerCohortUser
	RelationsCohortUser
}

// InnerCohortUser holds the actual data
type InnerCohortUser struct {
	UserID   string `json:"userID"`
	CohortID string `json:"cohortID"`
}

// RawCohortUserModel is a struct for CohortUser when used in raw queries
type RawCohortUserModel struct {
	UserID   RawString `json:"userID"`
	CohortID RawString `json:"cohortID"`
}

// RelationsCohortUser holds the relation data separately
type RelationsCohortUser struct {
	User   *UserModel   `json:"user,omitempty"`
	Cohort *CohortModel `json:"cohort,omitempty"`
}

func (r CohortUserModel) User() (value *UserModel) {
	if r.RelationsCohortUser.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return r.RelationsCohortUser.User
}

func (r CohortUserModel) Cohort() (value *CohortModel) {
	if r.RelationsCohortUser.Cohort == nil {
		panic("attempted to access cohort but did not fetch it using the .With() syntax")
	}
	return r.RelationsCohortUser.Cohort
}

// NotificationMetaModel represents the NotificationMeta db_model and is a wrapper for accessing fields and methods
type NotificationMetaModel struct {
	InnerNotificationMeta
	RelationsNotificationMeta
}

// InnerNotificationMeta holds the actual data
type InnerNotificationMeta struct {
	ID        string   `json:"id"`
	Data      JSON     `json:"data"`
	CreatedAt DateTime `json:"createdAt"`
	UpdatedAt DateTime `json:"updatedAt"`
}

// RawNotificationMetaModel is a struct for NotificationMeta when used in raw queries
type RawNotificationMetaModel struct {
	ID        RawString   `json:"id"`
	Data      RawJSON     `json:"data"`
	CreatedAt RawDateTime `json:"createdAt"`
	UpdatedAt RawDateTime `json:"updatedAt"`
}

// RelationsNotificationMeta holds the relation data separately
type RelationsNotificationMeta struct {
	Notifications []NotificationModel `json:"notifications,omitempty"`
	Campaign      *CampaignModel      `json:"campaign,omitempty"`
}

func (r NotificationMetaModel) Notifications() (value []NotificationModel) {
	if r.RelationsNotificationMeta.Notifications == nil {
		panic("attempted to access notifications but did not fetch it using the .With() syntax")
	}
	return r.RelationsNotificationMeta.Notifications
}

func (r NotificationMetaModel) Campaign() (value *CampaignModel, ok bool) {
	if r.RelationsNotificationMeta.Campaign == nil {
		return value, false
	}
	return r.RelationsNotificationMeta.Campaign, true
}

// NotificationModel represents the Notification db_model and is a wrapper for accessing fields and methods
type NotificationModel struct {
	InnerNotification
	RelationsNotification
}

// InnerNotification holds the actual data
type InnerNotification struct {
	ID        string             `json:"id"`
	Token     string             `json:"token"`
	UserID    string             `json:"userID"`
	Status    NotificationStatus `json:"status"`
	MetaID    string             `json:"metaID"`
	CreatedAt DateTime           `json:"createdAt"`
	UpdatedAt DateTime           `json:"updatedAt"`
}

// RawNotificationModel is a struct for Notification when used in raw queries
type RawNotificationModel struct {
	ID        RawString             `json:"id"`
	Token     RawString             `json:"token"`
	UserID    RawString             `json:"userID"`
	Status    RawNotificationStatus `json:"status"`
	MetaID    RawString             `json:"metaID"`
	CreatedAt RawDateTime           `json:"createdAt"`
	UpdatedAt RawDateTime           `json:"updatedAt"`
}

// RelationsNotification holds the relation data separately
type RelationsNotification struct {
	Meta *NotificationMetaModel `json:"meta,omitempty"`
}

func (r NotificationModel) Meta() (value *NotificationMetaModel) {
	if r.RelationsNotification.Meta == nil {
		panic("attempted to access meta but did not fetch it using the .With() syntax")
	}
	return r.RelationsNotification.Meta
}

// CampaignModel represents the Campaign db_model and is a wrapper for accessing fields and methods
type CampaignModel struct {
	InnerCampaign
	RelationsCampaign
}

// InnerCampaign holds the actual data
type InnerCampaign struct {
	ID                 string         `json:"id"`
	Name               string         `json:"name"`
	Criteria           JSON           `json:"criteria"`
	NotificationMetaID string         `json:"notificationMetaID"`
	Status             CampaignStatus `json:"status"`
	CreatedAt          DateTime       `json:"createdAt"`
	UpdatedAt          DateTime       `json:"updatedAt"`
}

// RawCampaignModel is a struct for Campaign when used in raw queries
type RawCampaignModel struct {
	ID                 RawString         `json:"id"`
	Name               RawString         `json:"name"`
	Criteria           RawJSON           `json:"criteria"`
	NotificationMetaID RawString         `json:"notificationMetaID"`
	Status             RawCampaignStatus `json:"status"`
	CreatedAt          RawDateTime       `json:"createdAt"`
	UpdatedAt          RawDateTime       `json:"updatedAt"`
}

// RelationsCampaign holds the relation data separately
type RelationsCampaign struct {
	NotificationMeta *NotificationMetaModel `json:"notificationMeta,omitempty"`
}

func (r CampaignModel) NotificationMeta() (value *NotificationMetaModel) {
	if r.RelationsCampaign.NotificationMeta == nil {
		panic("attempted to access notificationMeta but did not fetch it using the .With() syntax")
	}
	return r.RelationsCampaign.NotificationMeta
}

// --- template upsert.gotpl ---

type userUpsertOne struct {
	query builder.Query
}

func (r userUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) with()         {}
func (r userUpsertOne) userModel()    {}
func (r userUpsertOne) userRelation() {}

func (r userActions) UpsertOne(
	params UserEqualsUniqueWhereParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "CampaignUsers"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userUpsertOne) Create(

	_id UserWithPrismaIDSetParam,

	optional ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _id.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Update(
	params ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpsertOne) Tx() userUniqueTxResult {
	v := NewuserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type tokenUpsertOne struct {
	query builder.Query
}

func (r tokenUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r tokenUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r tokenUpsertOne) with()          {}
func (r tokenUpsertOne) tokenModel()    {}
func (r tokenUpsertOne) tokenRelation() {}

func (r tokenActions) UpsertOne(
	params TokenEqualsUniqueWhereParam,
) tokenUpsertOne {
	var v tokenUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Token"
	v.query.Outputs = tokenOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r tokenUpsertOne) Create(

	_token TokenWithPrismaTokenSetParam,

	optional ...TokenSetParam,
) tokenUpsertOne {
	var v tokenUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _token.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r tokenUpsertOne) Update(
	params ...TokenSetParam,
) tokenUpsertOne {
	var v tokenUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r tokenUpsertOne) Exec(ctx context.Context) (*TokenModel, error) {
	var v TokenModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r tokenUpsertOne) Tx() tokenUniqueTxResult {
	v := NewtokenUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type cohortUpsertOne struct {
	query builder.Query
}

func (r cohortUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r cohortUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUpsertOne) with()           {}
func (r cohortUpsertOne) cohortModel()    {}
func (r cohortUpsertOne) cohortRelation() {}

func (r cohortActions) UpsertOne(
	params CohortEqualsUniqueWhereParam,
) cohortUpsertOne {
	var v cohortUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Cohort"
	v.query.Outputs = cohortOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r cohortUpsertOne) Create(

	_name CohortWithPrismaNameSetParam,

	optional ...CohortSetParam,
) cohortUpsertOne {
	var v cohortUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r cohortUpsertOne) Update(
	params ...CohortSetParam,
) cohortUpsertOne {
	var v cohortUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r cohortUpsertOne) Exec(ctx context.Context) (*CohortModel, error) {
	var v CohortModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUpsertOne) Tx() cohortUniqueTxResult {
	v := NewcohortUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type cohortUserUpsertOne struct {
	query builder.Query
}

func (r cohortUserUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r cohortUserUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r cohortUserUpsertOne) with()               {}
func (r cohortUserUpsertOne) cohortUserModel()    {}
func (r cohortUserUpsertOne) cohortUserRelation() {}

func (r cohortUserActions) UpsertOne(
	params CohortUserEqualsUniqueWhereParam,
) cohortUserUpsertOne {
	var v cohortUserUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "CohortUser"
	v.query.Outputs = cohortUserOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r cohortUserUpsertOne) Create(

	_user CohortUserWithPrismaUserSetParam,
	_cohort CohortUserWithPrismaCohortSetParam,

	optional ...CohortUserSetParam,
) cohortUserUpsertOne {
	var v cohortUserUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _user.field())
	fields = append(fields, _cohort.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r cohortUserUpsertOne) Update(
	params ...CohortUserSetParam,
) cohortUserUpsertOne {
	var v cohortUserUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r cohortUserUpsertOne) Exec(ctx context.Context) (*CohortUserModel, error) {
	var v CohortUserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r cohortUserUpsertOne) Tx() cohortUserUniqueTxResult {
	v := NewcohortUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type notificationMetaUpsertOne struct {
	query builder.Query
}

func (r notificationMetaUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r notificationMetaUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationMetaUpsertOne) with()                     {}
func (r notificationMetaUpsertOne) notificationMetaModel()    {}
func (r notificationMetaUpsertOne) notificationMetaRelation() {}

func (r notificationMetaActions) UpsertOne(
	params NotificationMetaEqualsUniqueWhereParam,
) notificationMetaUpsertOne {
	var v notificationMetaUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "NotificationMeta"
	v.query.Outputs = notificationMetaOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r notificationMetaUpsertOne) Create(

	_data NotificationMetaWithPrismaDataSetParam,

	optional ...NotificationMetaSetParam,
) notificationMetaUpsertOne {
	var v notificationMetaUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _data.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r notificationMetaUpsertOne) Update(
	params ...NotificationMetaSetParam,
) notificationMetaUpsertOne {
	var v notificationMetaUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r notificationMetaUpsertOne) Exec(ctx context.Context) (*NotificationMetaModel, error) {
	var v NotificationMetaModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationMetaUpsertOne) Tx() notificationMetaUniqueTxResult {
	v := NewnotificationMetaUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type notificationUpsertOne struct {
	query builder.Query
}

func (r notificationUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r notificationUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r notificationUpsertOne) with()                 {}
func (r notificationUpsertOne) notificationModel()    {}
func (r notificationUpsertOne) notificationRelation() {}

func (r notificationActions) UpsertOne(
	params NotificationEqualsUniqueWhereParam,
) notificationUpsertOne {
	var v notificationUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Notification"
	v.query.Outputs = notificationOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r notificationUpsertOne) Create(

	_token NotificationWithPrismaTokenSetParam,
	_userID NotificationWithPrismaUserIDSetParam,
	_meta NotificationWithPrismaMetaSetParam,

	optional ...NotificationSetParam,
) notificationUpsertOne {
	var v notificationUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _token.field())
	fields = append(fields, _userID.field())
	fields = append(fields, _meta.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r notificationUpsertOne) Update(
	params ...NotificationSetParam,
) notificationUpsertOne {
	var v notificationUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r notificationUpsertOne) Exec(ctx context.Context) (*NotificationModel, error) {
	var v NotificationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r notificationUpsertOne) Tx() notificationUniqueTxResult {
	v := NewnotificationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type campaignUpsertOne struct {
	query builder.Query
}

func (r campaignUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r campaignUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r campaignUpsertOne) with()             {}
func (r campaignUpsertOne) campaignModel()    {}
func (r campaignUpsertOne) campaignRelation() {}

func (r campaignActions) UpsertOne(
	params CampaignEqualsUniqueWhereParam,
) campaignUpsertOne {
	var v campaignUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Campaign"
	v.query.Outputs = campaignOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r campaignUpsertOne) Create(

	_name CampaignWithPrismaNameSetParam,
	_criteria CampaignWithPrismaCriteriaSetParam,
	_notificationMeta CampaignWithPrismaNotificationMetaSetParam,

	optional ...CampaignSetParam,
) campaignUpsertOne {
	var v campaignUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _name.field())
	fields = append(fields, _criteria.field())
	fields = append(fields, _notificationMeta.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r campaignUpsertOne) Update(
	params ...CampaignSetParam,
) campaignUpsertOne {
	var v campaignUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r campaignUpsertOne) Exec(ctx context.Context) (*CampaignModel, error) {
	var v CampaignModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r campaignUpsertOne) Tx() campaignUniqueTxResult {
	v := NewcampaignUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template mock.gotpl ---
func NewMock() (*PrismaClient, *Mock, func(t *testing.T)) {
	expectations := new([]mock.Expectation)
	pc := newMockClient(expectations)
	m := &Mock{
		Mock: &mock.Mock{
			Expectations: expectations,
		},
	}

	m.User = userMock{
		mock: m,
	}

	m.Token = tokenMock{
		mock: m,
	}

	m.Cohort = cohortMock{
		mock: m,
	}

	m.CohortUser = cohortUserMock{
		mock: m,
	}

	m.NotificationMeta = notificationMetaMock{
		mock: m,
	}

	m.Notification = notificationMock{
		mock: m,
	}

	m.Campaign = campaignMock{
		mock: m,
	}

	return pc, m, m.Ensure
}

type Mock struct {
	*mock.Mock

	User userMock

	Token tokenMock

	Cohort cohortMock

	CohortUser cohortUserMock

	NotificationMeta notificationMetaMock

	Notification notificationMock

	Campaign campaignMock
}

type userMock struct {
	mock *Mock
}

type UserMockExpectParam interface {
	ExtractQuery() builder.Query
	userModel()
}

func (m *userMock) Expect(query UserMockExpectParam) *userMockExec {
	return &userMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type userMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *userMockExec) Returns(v UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) ReturnsMany(v []UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type tokenMock struct {
	mock *Mock
}

type TokenMockExpectParam interface {
	ExtractQuery() builder.Query
	tokenModel()
}

func (m *tokenMock) Expect(query TokenMockExpectParam) *tokenMockExec {
	return &tokenMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type tokenMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *tokenMockExec) Returns(v TokenModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *tokenMockExec) ReturnsMany(v []TokenModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *tokenMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type cohortMock struct {
	mock *Mock
}

type CohortMockExpectParam interface {
	ExtractQuery() builder.Query
	cohortModel()
}

func (m *cohortMock) Expect(query CohortMockExpectParam) *cohortMockExec {
	return &cohortMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type cohortMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *cohortMockExec) Returns(v CohortModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *cohortMockExec) ReturnsMany(v []CohortModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *cohortMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type cohortUserMock struct {
	mock *Mock
}

type CohortUserMockExpectParam interface {
	ExtractQuery() builder.Query
	cohortUserModel()
}

func (m *cohortUserMock) Expect(query CohortUserMockExpectParam) *cohortUserMockExec {
	return &cohortUserMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type cohortUserMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *cohortUserMockExec) Returns(v CohortUserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *cohortUserMockExec) ReturnsMany(v []CohortUserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *cohortUserMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type notificationMetaMock struct {
	mock *Mock
}

type NotificationMetaMockExpectParam interface {
	ExtractQuery() builder.Query
	notificationMetaModel()
}

func (m *notificationMetaMock) Expect(query NotificationMetaMockExpectParam) *notificationMetaMockExec {
	return &notificationMetaMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type notificationMetaMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *notificationMetaMockExec) Returns(v NotificationMetaModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *notificationMetaMockExec) ReturnsMany(v []NotificationMetaModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *notificationMetaMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type notificationMock struct {
	mock *Mock
}

type NotificationMockExpectParam interface {
	ExtractQuery() builder.Query
	notificationModel()
}

func (m *notificationMock) Expect(query NotificationMockExpectParam) *notificationMockExec {
	return &notificationMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type notificationMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *notificationMockExec) Returns(v NotificationModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *notificationMockExec) ReturnsMany(v []NotificationModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *notificationMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type campaignMock struct {
	mock *Mock
}

type CampaignMockExpectParam interface {
	ExtractQuery() builder.Query
	campaignModel()
}

func (m *campaignMock) Expect(query CampaignMockExpectParam) *campaignMockExec {
	return &campaignMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type campaignMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *campaignMockExec) Returns(v CampaignModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *campaignMockExec) ReturnsMany(v []CampaignModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *campaignMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

// --- template query.gotpl ---

// User acts as a namespaces to access query methods for the User db_model
var User = userQuery{}

// userQuery exposes query functions for the user db_model
type userQuery struct {

	// ID
	//
	// @required
	ID userQueryIDString

	Tokens userQueryTokensRelations

	// CreatedAt
	//
	// @required
	CreatedAt userQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt userQueryUpdatedAtDateTime

	Cohorts userQueryCohortsRelations
}

func (userQuery) Not(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) Or(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) And(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type userQueryIDString struct{}

// Set the required value of UserID
func (r userQueryIDString) Set(value string) userWithPrismaIDSetParam {

	return userWithPrismaIDSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r userQueryIDString) SetIfPresent(value *string) userWithPrismaIDSetParam {
	if value == nil {
		return userWithPrismaIDSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryIDString) Equals(value string) userWithPrismaIDEqualsUniqueParam {

	return userWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) EqualsIfPresent(value *string) userWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return userWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userQueryIDString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r userQueryIDString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r userQueryIDString) In(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) InIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.In(value)
}

func (r userQueryIDString) NotIn(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) NotInIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.NotIn(value)
}

func (r userQueryIDString) Lt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) LtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lt(*value)
}

func (r userQueryIDString) Lte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) LteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lte(*value)
}

func (r userQueryIDString) Gt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) GtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gt(*value)
}

func (r userQueryIDString) Gte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) GteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gte(*value)
}

func (r userQueryIDString) Contains(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) ContainsIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Contains(*value)
}

func (r userQueryIDString) StartsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) StartsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userQueryIDString) EndsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) EndsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userQueryIDString) Mode(value QueryMode) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) ModeIfPresent(value *QueryMode) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Mode(*value)
}

func (r userQueryIDString) Not(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) NotIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryIDString) HasPrefix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryIDString) HasPrefixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryIDString) HasSuffix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryIDString) HasSuffixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasSuffix(*value)
}

// base struct
type userQueryTokensToken struct{}

type userQueryTokensRelations struct{}

// User -> Tokens
//
// @relation
// @required
func (userQueryTokensRelations) Some(
	params ...TokenWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "tokens",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Tokens
//
// @relation
// @required
func (userQueryTokensRelations) Every(
	params ...TokenWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "tokens",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryTokensRelations) Fetch(

	params ...TokenWhereParam,

) userToTokensFindMany {
	var v userToTokensFindMany

	v.query.Operation = "query"
	v.query.Method = "tokens"
	v.query.Outputs = tokenOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryTokensRelations) Link(
	params ...TokenWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "tokens",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryTokensRelations) Unlink(
	params ...TokenWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "tokens",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

// base struct
type userQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r userQueryCreatedAtDateTime) Set(value DateTime) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r userQueryCreatedAtDateTime) SetIfPresent(value *DateTime) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryCreatedAtDateTime) Equals(value DateTime) userWithPrismaCreatedAtEqualsParam {

	return userWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) userWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return userWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryCreatedAtDateTime) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r userQueryCreatedAtDateTime) Cursor(cursor DateTime) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r userQueryCreatedAtDateTime) In(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) InIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryCreatedAtDateTime) NotIn(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryCreatedAtDateTime) Lt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) LtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryCreatedAtDateTime) Lte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) LteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryCreatedAtDateTime) Gt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) GtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryCreatedAtDateTime) Gte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) GteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryCreatedAtDateTime) Not(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedAtDateTime) NotIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryCreatedAtDateTime) Before(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userQueryCreatedAtDateTime) After(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userQueryCreatedAtDateTime) BeforeEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userQueryCreatedAtDateTime) AfterEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// base struct
type userQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r userQueryUpdatedAtDateTime) Set(value DateTime) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r userQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryUpdatedAtDateTime) Equals(value DateTime) userWithPrismaUpdatedAtEqualsParam {

	return userWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) userWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return userWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryUpdatedAtDateTime) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r userQueryUpdatedAtDateTime) Cursor(cursor DateTime) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r userQueryUpdatedAtDateTime) In(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) InIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryUpdatedAtDateTime) NotIn(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryUpdatedAtDateTime) Lt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryUpdatedAtDateTime) Lte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryUpdatedAtDateTime) Gt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryUpdatedAtDateTime) Gte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryUpdatedAtDateTime) Not(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryUpdatedAtDateTime) Before(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userQueryUpdatedAtDateTime) After(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userQueryUpdatedAtDateTime) BeforeEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userQueryUpdatedAtDateTime) AfterEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// base struct
type userQueryCohortsCohortUser struct{}

type userQueryCohortsRelations struct{}

// User -> Cohorts
//
// @relation
// @required
func (userQueryCohortsRelations) Some(
	params ...CohortUserWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "cohorts",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Cohorts
//
// @relation
// @required
func (userQueryCohortsRelations) Every(
	params ...CohortUserWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "cohorts",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryCohortsRelations) Fetch(

	params ...CohortUserWhereParam,

) userToCohortsFindMany {
	var v userToCohortsFindMany

	v.query.Operation = "query"
	v.query.Method = "cohorts"
	v.query.Outputs = cohortUserOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryCohortsRelations) Link(
	params ...CohortUserWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "cohorts",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryCohortsRelations) Unlink(
	params ...CohortUserWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "cohorts",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

// Token acts as a namespaces to access query methods for the Token db_model
var Token = tokenQuery{}

// tokenQuery exposes query functions for the token db_model
type tokenQuery struct {

	// Token
	//
	// @required
	Token tokenQueryTokenString

	// UserID
	//
	// @optional
	UserID tokenQueryUserIDString

	User tokenQueryUserRelations

	// CreatedAt
	//
	// @required
	CreatedAt tokenQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt tokenQueryUpdatedAtDateTime
}

func (tokenQuery) Not(params ...TokenWhereParam) tokenDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return tokenDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (tokenQuery) Or(params ...TokenWhereParam) tokenDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return tokenDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (tokenQuery) And(params ...TokenWhereParam) tokenDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return tokenDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type tokenQueryTokenString struct{}

// Set the required value of Token
func (r tokenQueryTokenString) Set(value string) tokenWithPrismaTokenSetParam {

	return tokenWithPrismaTokenSetParam{
		data: builder.Field{
			Name:  "token",
			Value: value,
		},
	}

}

// Set the optional value of Token dynamically
func (r tokenQueryTokenString) SetIfPresent(value *string) tokenWithPrismaTokenSetParam {
	if value == nil {
		return tokenWithPrismaTokenSetParam{}
	}

	return r.Set(*value)
}

func (r tokenQueryTokenString) Equals(value string) tokenWithPrismaTokenEqualsUniqueParam {

	return tokenWithPrismaTokenEqualsUniqueParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryTokenString) EqualsIfPresent(value *string) tokenWithPrismaTokenEqualsUniqueParam {
	if value == nil {
		return tokenWithPrismaTokenEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r tokenQueryTokenString) Order(direction SortOrder) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name:  "token",
			Value: direction,
		},
	}
}

func (r tokenQueryTokenString) Cursor(cursor string) tokenCursorParam {
	return tokenCursorParam{
		data: builder.Field{
			Name:  "token",
			Value: cursor,
		},
	}
}

func (r tokenQueryTokenString) In(value []string) tokenParamUnique {
	return tokenParamUnique{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryTokenString) InIfPresent(value []string) tokenParamUnique {
	if value == nil {
		return tokenParamUnique{}
	}
	return r.In(value)
}

func (r tokenQueryTokenString) NotIn(value []string) tokenParamUnique {
	return tokenParamUnique{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryTokenString) NotInIfPresent(value []string) tokenParamUnique {
	if value == nil {
		return tokenParamUnique{}
	}
	return r.NotIn(value)
}

func (r tokenQueryTokenString) Lt(value string) tokenParamUnique {
	return tokenParamUnique{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryTokenString) LtIfPresent(value *string) tokenParamUnique {
	if value == nil {
		return tokenParamUnique{}
	}
	return r.Lt(*value)
}

func (r tokenQueryTokenString) Lte(value string) tokenParamUnique {
	return tokenParamUnique{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryTokenString) LteIfPresent(value *string) tokenParamUnique {
	if value == nil {
		return tokenParamUnique{}
	}
	return r.Lte(*value)
}

func (r tokenQueryTokenString) Gt(value string) tokenParamUnique {
	return tokenParamUnique{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryTokenString) GtIfPresent(value *string) tokenParamUnique {
	if value == nil {
		return tokenParamUnique{}
	}
	return r.Gt(*value)
}

func (r tokenQueryTokenString) Gte(value string) tokenParamUnique {
	return tokenParamUnique{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryTokenString) GteIfPresent(value *string) tokenParamUnique {
	if value == nil {
		return tokenParamUnique{}
	}
	return r.Gte(*value)
}

func (r tokenQueryTokenString) Contains(value string) tokenParamUnique {
	return tokenParamUnique{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryTokenString) ContainsIfPresent(value *string) tokenParamUnique {
	if value == nil {
		return tokenParamUnique{}
	}
	return r.Contains(*value)
}

func (r tokenQueryTokenString) StartsWith(value string) tokenParamUnique {
	return tokenParamUnique{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryTokenString) StartsWithIfPresent(value *string) tokenParamUnique {
	if value == nil {
		return tokenParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r tokenQueryTokenString) EndsWith(value string) tokenParamUnique {
	return tokenParamUnique{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryTokenString) EndsWithIfPresent(value *string) tokenParamUnique {
	if value == nil {
		return tokenParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r tokenQueryTokenString) Mode(value QueryMode) tokenParamUnique {
	return tokenParamUnique{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryTokenString) ModeIfPresent(value *QueryMode) tokenParamUnique {
	if value == nil {
		return tokenParamUnique{}
	}
	return r.Mode(*value)
}

func (r tokenQueryTokenString) Not(value string) tokenParamUnique {
	return tokenParamUnique{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryTokenString) NotIfPresent(value *string) tokenParamUnique {
	if value == nil {
		return tokenParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r tokenQueryTokenString) HasPrefix(value string) tokenParamUnique {
	return tokenParamUnique{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r tokenQueryTokenString) HasPrefixIfPresent(value *string) tokenParamUnique {
	if value == nil {
		return tokenParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r tokenQueryTokenString) HasSuffix(value string) tokenParamUnique {
	return tokenParamUnique{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r tokenQueryTokenString) HasSuffixIfPresent(value *string) tokenParamUnique {
	if value == nil {
		return tokenParamUnique{}
	}
	return r.HasSuffix(*value)
}

// base struct
type tokenQueryUserIDString struct{}

// Set the optional value of UserID
func (r tokenQueryUserIDString) Set(value string) tokenSetParam {

	return tokenSetParam{
		data: builder.Field{
			Name:  "userID",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r tokenQueryUserIDString) SetIfPresent(value *string) tokenSetParam {
	if value == nil {
		return tokenSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of UserID dynamically
func (r tokenQueryUserIDString) SetOptional(value *string) tokenSetParam {
	if value == nil {

		var v *string
		return tokenSetParam{
			data: builder.Field{
				Name:  "userID",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r tokenQueryUserIDString) Equals(value string) tokenWithPrismaUserIDEqualsParam {

	return tokenWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) EqualsIfPresent(value *string) tokenWithPrismaUserIDEqualsParam {
	if value == nil {
		return tokenWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r tokenQueryUserIDString) EqualsOptional(value *string) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) IsNull() tokenDefaultParam {
	var str *string = nil
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) Order(direction SortOrder) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name:  "userID",
			Value: direction,
		},
	}
}

func (r tokenQueryUserIDString) Cursor(cursor string) tokenCursorParam {
	return tokenCursorParam{
		data: builder.Field{
			Name:  "userID",
			Value: cursor,
		},
	}
}

func (r tokenQueryUserIDString) In(value []string) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) InIfPresent(value []string) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.In(value)
}

func (r tokenQueryUserIDString) NotIn(value []string) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) NotInIfPresent(value []string) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.NotIn(value)
}

func (r tokenQueryUserIDString) Lt(value string) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) LtIfPresent(value *string) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Lt(*value)
}

func (r tokenQueryUserIDString) Lte(value string) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) LteIfPresent(value *string) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Lte(*value)
}

func (r tokenQueryUserIDString) Gt(value string) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) GtIfPresent(value *string) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Gt(*value)
}

func (r tokenQueryUserIDString) Gte(value string) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) GteIfPresent(value *string) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Gte(*value)
}

func (r tokenQueryUserIDString) Contains(value string) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) ContainsIfPresent(value *string) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Contains(*value)
}

func (r tokenQueryUserIDString) StartsWith(value string) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) StartsWithIfPresent(value *string) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r tokenQueryUserIDString) EndsWith(value string) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) EndsWithIfPresent(value *string) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r tokenQueryUserIDString) Mode(value QueryMode) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) ModeIfPresent(value *QueryMode) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Mode(*value)
}

func (r tokenQueryUserIDString) Not(value string) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUserIDString) NotIfPresent(value *string) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r tokenQueryUserIDString) HasPrefix(value string) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r tokenQueryUserIDString) HasPrefixIfPresent(value *string) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r tokenQueryUserIDString) HasSuffix(value string) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r tokenQueryUserIDString) HasSuffixIfPresent(value *string) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.HasSuffix(*value)
}

// base struct
type tokenQueryUserUser struct{}

type tokenQueryUserRelations struct{}

// Token -> User
//
// @relation
// @optional
func (tokenQueryUserRelations) Where(
	params ...UserWhereParam,
) tokenDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return tokenDefaultParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (tokenQueryUserRelations) Fetch() tokenToUserFindUnique {
	var v tokenToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "user"
	v.query.Outputs = userOutput

	return v
}

func (r tokenQueryUserRelations) Link(
	params UserWhereParam,
) tokenSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return tokenSetParam{}
	}

	fields = append(fields, f)

	return tokenSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r tokenQueryUserRelations) Unlink() tokenSetParam {
	var v tokenSetParam

	v = tokenSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

// base struct
type tokenQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r tokenQueryCreatedAtDateTime) Set(value DateTime) tokenSetParam {

	return tokenSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r tokenQueryCreatedAtDateTime) SetIfPresent(value *DateTime) tokenSetParam {
	if value == nil {
		return tokenSetParam{}
	}

	return r.Set(*value)
}

func (r tokenQueryCreatedAtDateTime) Equals(value DateTime) tokenWithPrismaCreatedAtEqualsParam {

	return tokenWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) tokenWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return tokenWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r tokenQueryCreatedAtDateTime) Order(direction SortOrder) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r tokenQueryCreatedAtDateTime) Cursor(cursor DateTime) tokenCursorParam {
	return tokenCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r tokenQueryCreatedAtDateTime) In(value []DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryCreatedAtDateTime) InIfPresent(value []DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.In(value)
}

func (r tokenQueryCreatedAtDateTime) NotIn(value []DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.NotIn(value)
}

func (r tokenQueryCreatedAtDateTime) Lt(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryCreatedAtDateTime) LtIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Lt(*value)
}

func (r tokenQueryCreatedAtDateTime) Lte(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryCreatedAtDateTime) LteIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Lte(*value)
}

func (r tokenQueryCreatedAtDateTime) Gt(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryCreatedAtDateTime) GtIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Gt(*value)
}

func (r tokenQueryCreatedAtDateTime) Gte(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryCreatedAtDateTime) GteIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Gte(*value)
}

func (r tokenQueryCreatedAtDateTime) Not(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryCreatedAtDateTime) NotIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r tokenQueryCreatedAtDateTime) Before(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r tokenQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r tokenQueryCreatedAtDateTime) After(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r tokenQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r tokenQueryCreatedAtDateTime) BeforeEquals(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r tokenQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r tokenQueryCreatedAtDateTime) AfterEquals(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r tokenQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// base struct
type tokenQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r tokenQueryUpdatedAtDateTime) Set(value DateTime) tokenSetParam {

	return tokenSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r tokenQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) tokenSetParam {
	if value == nil {
		return tokenSetParam{}
	}

	return r.Set(*value)
}

func (r tokenQueryUpdatedAtDateTime) Equals(value DateTime) tokenWithPrismaUpdatedAtEqualsParam {

	return tokenWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) tokenWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return tokenWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r tokenQueryUpdatedAtDateTime) Order(direction SortOrder) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r tokenQueryUpdatedAtDateTime) Cursor(cursor DateTime) tokenCursorParam {
	return tokenCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r tokenQueryUpdatedAtDateTime) In(value []DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUpdatedAtDateTime) InIfPresent(value []DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.In(value)
}

func (r tokenQueryUpdatedAtDateTime) NotIn(value []DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.NotIn(value)
}

func (r tokenQueryUpdatedAtDateTime) Lt(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Lt(*value)
}

func (r tokenQueryUpdatedAtDateTime) Lte(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Lte(*value)
}

func (r tokenQueryUpdatedAtDateTime) Gt(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Gt(*value)
}

func (r tokenQueryUpdatedAtDateTime) Gte(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Gte(*value)
}

func (r tokenQueryUpdatedAtDateTime) Not(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r tokenQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r tokenQueryUpdatedAtDateTime) Before(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r tokenQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r tokenQueryUpdatedAtDateTime) After(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r tokenQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r tokenQueryUpdatedAtDateTime) BeforeEquals(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r tokenQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r tokenQueryUpdatedAtDateTime) AfterEquals(value DateTime) tokenDefaultParam {
	return tokenDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r tokenQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) tokenDefaultParam {
	if value == nil {
		return tokenDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// Cohort acts as a namespaces to access query methods for the Cohort db_model
var Cohort = cohortQuery{}

// cohortQuery exposes query functions for the cohort db_model
type cohortQuery struct {

	// ID
	//
	// @required
	ID cohortQueryIDString

	// Name
	//
	// @required
	Name cohortQueryNameString

	// CreatedAt
	//
	// @required
	CreatedAt cohortQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt cohortQueryUpdatedAtDateTime

	Users cohortQueryUsersRelations
}

func (cohortQuery) Not(params ...CohortWhereParam) cohortDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return cohortDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (cohortQuery) Or(params ...CohortWhereParam) cohortDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return cohortDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (cohortQuery) And(params ...CohortWhereParam) cohortDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return cohortDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type cohortQueryIDString struct{}

// Set the required value of UserID
func (r cohortQueryIDString) Set(value string) cohortSetParam {

	return cohortSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r cohortQueryIDString) SetIfPresent(value *string) cohortSetParam {
	if value == nil {
		return cohortSetParam{}
	}

	return r.Set(*value)
}

func (r cohortQueryIDString) Equals(value string) cohortWithPrismaIDEqualsUniqueParam {

	return cohortWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryIDString) EqualsIfPresent(value *string) cohortWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return cohortWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r cohortQueryIDString) Order(direction SortOrder) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r cohortQueryIDString) Cursor(cursor string) cohortCursorParam {
	return cohortCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r cohortQueryIDString) In(value []string) cohortParamUnique {
	return cohortParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryIDString) InIfPresent(value []string) cohortParamUnique {
	if value == nil {
		return cohortParamUnique{}
	}
	return r.In(value)
}

func (r cohortQueryIDString) NotIn(value []string) cohortParamUnique {
	return cohortParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryIDString) NotInIfPresent(value []string) cohortParamUnique {
	if value == nil {
		return cohortParamUnique{}
	}
	return r.NotIn(value)
}

func (r cohortQueryIDString) Lt(value string) cohortParamUnique {
	return cohortParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryIDString) LtIfPresent(value *string) cohortParamUnique {
	if value == nil {
		return cohortParamUnique{}
	}
	return r.Lt(*value)
}

func (r cohortQueryIDString) Lte(value string) cohortParamUnique {
	return cohortParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryIDString) LteIfPresent(value *string) cohortParamUnique {
	if value == nil {
		return cohortParamUnique{}
	}
	return r.Lte(*value)
}

func (r cohortQueryIDString) Gt(value string) cohortParamUnique {
	return cohortParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryIDString) GtIfPresent(value *string) cohortParamUnique {
	if value == nil {
		return cohortParamUnique{}
	}
	return r.Gt(*value)
}

func (r cohortQueryIDString) Gte(value string) cohortParamUnique {
	return cohortParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryIDString) GteIfPresent(value *string) cohortParamUnique {
	if value == nil {
		return cohortParamUnique{}
	}
	return r.Gte(*value)
}

func (r cohortQueryIDString) Contains(value string) cohortParamUnique {
	return cohortParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryIDString) ContainsIfPresent(value *string) cohortParamUnique {
	if value == nil {
		return cohortParamUnique{}
	}
	return r.Contains(*value)
}

func (r cohortQueryIDString) StartsWith(value string) cohortParamUnique {
	return cohortParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryIDString) StartsWithIfPresent(value *string) cohortParamUnique {
	if value == nil {
		return cohortParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r cohortQueryIDString) EndsWith(value string) cohortParamUnique {
	return cohortParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryIDString) EndsWithIfPresent(value *string) cohortParamUnique {
	if value == nil {
		return cohortParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r cohortQueryIDString) Mode(value QueryMode) cohortParamUnique {
	return cohortParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryIDString) ModeIfPresent(value *QueryMode) cohortParamUnique {
	if value == nil {
		return cohortParamUnique{}
	}
	return r.Mode(*value)
}

func (r cohortQueryIDString) Not(value string) cohortParamUnique {
	return cohortParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryIDString) NotIfPresent(value *string) cohortParamUnique {
	if value == nil {
		return cohortParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r cohortQueryIDString) HasPrefix(value string) cohortParamUnique {
	return cohortParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r cohortQueryIDString) HasPrefixIfPresent(value *string) cohortParamUnique {
	if value == nil {
		return cohortParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r cohortQueryIDString) HasSuffix(value string) cohortParamUnique {
	return cohortParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r cohortQueryIDString) HasSuffixIfPresent(value *string) cohortParamUnique {
	if value == nil {
		return cohortParamUnique{}
	}
	return r.HasSuffix(*value)
}

// base struct
type cohortQueryNameString struct{}

// Set the required value of Name
func (r cohortQueryNameString) Set(value string) cohortWithPrismaNameSetParam {

	return cohortWithPrismaNameSetParam{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

// Set the optional value of Name dynamically
func (r cohortQueryNameString) SetIfPresent(value *string) cohortWithPrismaNameSetParam {
	if value == nil {
		return cohortWithPrismaNameSetParam{}
	}

	return r.Set(*value)
}

func (r cohortQueryNameString) Equals(value string) cohortWithPrismaNameEqualsParam {

	return cohortWithPrismaNameEqualsParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryNameString) EqualsIfPresent(value *string) cohortWithPrismaNameEqualsParam {
	if value == nil {
		return cohortWithPrismaNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r cohortQueryNameString) Order(direction SortOrder) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r cohortQueryNameString) Cursor(cursor string) cohortCursorParam {
	return cohortCursorParam{
		data: builder.Field{
			Name:  "name",
			Value: cursor,
		},
	}
}

func (r cohortQueryNameString) In(value []string) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryNameString) InIfPresent(value []string) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.In(value)
}

func (r cohortQueryNameString) NotIn(value []string) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryNameString) NotInIfPresent(value []string) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.NotIn(value)
}

func (r cohortQueryNameString) Lt(value string) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryNameString) LtIfPresent(value *string) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Lt(*value)
}

func (r cohortQueryNameString) Lte(value string) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryNameString) LteIfPresent(value *string) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Lte(*value)
}

func (r cohortQueryNameString) Gt(value string) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryNameString) GtIfPresent(value *string) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Gt(*value)
}

func (r cohortQueryNameString) Gte(value string) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryNameString) GteIfPresent(value *string) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Gte(*value)
}

func (r cohortQueryNameString) Contains(value string) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryNameString) ContainsIfPresent(value *string) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Contains(*value)
}

func (r cohortQueryNameString) StartsWith(value string) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryNameString) StartsWithIfPresent(value *string) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r cohortQueryNameString) EndsWith(value string) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryNameString) EndsWithIfPresent(value *string) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r cohortQueryNameString) Mode(value QueryMode) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryNameString) ModeIfPresent(value *QueryMode) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Mode(*value)
}

func (r cohortQueryNameString) Not(value string) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryNameString) NotIfPresent(value *string) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r cohortQueryNameString) HasPrefix(value string) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r cohortQueryNameString) HasPrefixIfPresent(value *string) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r cohortQueryNameString) HasSuffix(value string) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r cohortQueryNameString) HasSuffixIfPresent(value *string) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.HasSuffix(*value)
}

// base struct
type cohortQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r cohortQueryCreatedAtDateTime) Set(value DateTime) cohortSetParam {

	return cohortSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r cohortQueryCreatedAtDateTime) SetIfPresent(value *DateTime) cohortSetParam {
	if value == nil {
		return cohortSetParam{}
	}

	return r.Set(*value)
}

func (r cohortQueryCreatedAtDateTime) Equals(value DateTime) cohortWithPrismaCreatedAtEqualsParam {

	return cohortWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) cohortWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return cohortWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r cohortQueryCreatedAtDateTime) Order(direction SortOrder) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r cohortQueryCreatedAtDateTime) Cursor(cursor DateTime) cohortCursorParam {
	return cohortCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r cohortQueryCreatedAtDateTime) In(value []DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryCreatedAtDateTime) InIfPresent(value []DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.In(value)
}

func (r cohortQueryCreatedAtDateTime) NotIn(value []DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.NotIn(value)
}

func (r cohortQueryCreatedAtDateTime) Lt(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryCreatedAtDateTime) LtIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Lt(*value)
}

func (r cohortQueryCreatedAtDateTime) Lte(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryCreatedAtDateTime) LteIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Lte(*value)
}

func (r cohortQueryCreatedAtDateTime) Gt(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryCreatedAtDateTime) GtIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Gt(*value)
}

func (r cohortQueryCreatedAtDateTime) Gte(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryCreatedAtDateTime) GteIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Gte(*value)
}

func (r cohortQueryCreatedAtDateTime) Not(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryCreatedAtDateTime) NotIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r cohortQueryCreatedAtDateTime) Before(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r cohortQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r cohortQueryCreatedAtDateTime) After(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r cohortQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r cohortQueryCreatedAtDateTime) BeforeEquals(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r cohortQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r cohortQueryCreatedAtDateTime) AfterEquals(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r cohortQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// base struct
type cohortQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r cohortQueryUpdatedAtDateTime) Set(value DateTime) cohortSetParam {

	return cohortSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r cohortQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) cohortSetParam {
	if value == nil {
		return cohortSetParam{}
	}

	return r.Set(*value)
}

func (r cohortQueryUpdatedAtDateTime) Equals(value DateTime) cohortWithPrismaUpdatedAtEqualsParam {

	return cohortWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) cohortWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return cohortWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r cohortQueryUpdatedAtDateTime) Order(direction SortOrder) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r cohortQueryUpdatedAtDateTime) Cursor(cursor DateTime) cohortCursorParam {
	return cohortCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r cohortQueryUpdatedAtDateTime) In(value []DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryUpdatedAtDateTime) InIfPresent(value []DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.In(value)
}

func (r cohortQueryUpdatedAtDateTime) NotIn(value []DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.NotIn(value)
}

func (r cohortQueryUpdatedAtDateTime) Lt(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Lt(*value)
}

func (r cohortQueryUpdatedAtDateTime) Lte(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Lte(*value)
}

func (r cohortQueryUpdatedAtDateTime) Gt(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Gt(*value)
}

func (r cohortQueryUpdatedAtDateTime) Gte(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Gte(*value)
}

func (r cohortQueryUpdatedAtDateTime) Not(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r cohortQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r cohortQueryUpdatedAtDateTime) Before(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r cohortQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r cohortQueryUpdatedAtDateTime) After(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r cohortQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r cohortQueryUpdatedAtDateTime) BeforeEquals(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r cohortQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r cohortQueryUpdatedAtDateTime) AfterEquals(value DateTime) cohortDefaultParam {
	return cohortDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r cohortQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) cohortDefaultParam {
	if value == nil {
		return cohortDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// base struct
type cohortQueryUsersCohortUser struct{}

type cohortQueryUsersRelations struct{}

// Cohort -> Users
//
// @relation
// @required
func (cohortQueryUsersRelations) Some(
	params ...CohortUserWhereParam,
) cohortDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return cohortDefaultParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Cohort -> Users
//
// @relation
// @required
func (cohortQueryUsersRelations) Every(
	params ...CohortUserWhereParam,
) cohortDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return cohortDefaultParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

func (cohortQueryUsersRelations) Fetch(

	params ...CohortUserWhereParam,

) cohortToUsersFindMany {
	var v cohortToUsersFindMany

	v.query.Operation = "query"
	v.query.Method = "users"
	v.query.Outputs = cohortUserOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r cohortQueryUsersRelations) Link(
	params ...CohortUserWhereParam,
) cohortSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return cohortSetParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r cohortQueryUsersRelations) Unlink(
	params ...CohortUserWhereParam,
) cohortSetParam {
	var v cohortSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = cohortSetParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

// CohortUser acts as a namespaces to access query methods for the CohortUser db_model
var CohortUser = cohortUserQuery{}

// cohortUserQuery exposes query functions for the cohortUser db_model
type cohortUserQuery struct {

	// UserID
	//
	// @required
	UserID cohortUserQueryUserIDString

	User cohortUserQueryUserRelations

	// CohortID
	//
	// @required
	CohortID cohortUserQueryCohortIDString

	Cohort cohortUserQueryCohortRelations
}

func (cohortUserQuery) Not(params ...CohortUserWhereParam) cohortUserDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return cohortUserDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (cohortUserQuery) Or(params ...CohortUserWhereParam) cohortUserDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return cohortUserDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (cohortUserQuery) And(params ...CohortUserWhereParam) cohortUserDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return cohortUserDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (cohortUserQuery) UserIDCohortID(
	_userID CohortUserWithPrismaUserIDWhereParam,

	_cohortID CohortUserWithPrismaCohortIDWhereParam,
) CohortUserEqualsUniqueWhereParam {
	var fields []builder.Field

	fields = append(fields, _userID.field())
	fields = append(fields, _cohortID.field())

	return cohortUserEqualsUniqueParam{
		data: builder.Field{
			Name:   "userID_cohortID",
			Fields: builder.TransformEquals(fields),
		},
	}
}

// base struct
type cohortUserQueryUserIDString struct{}

// Set the required value of UserID
func (r cohortUserQueryUserIDString) Set(value string) cohortUserSetParam {

	return cohortUserSetParam{
		data: builder.Field{
			Name:  "userID",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r cohortUserQueryUserIDString) SetIfPresent(value *string) cohortUserSetParam {
	if value == nil {
		return cohortUserSetParam{}
	}

	return r.Set(*value)
}

func (r cohortUserQueryUserIDString) Equals(value string) cohortUserWithPrismaUserIDEqualsParam {

	return cohortUserWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryUserIDString) EqualsIfPresent(value *string) cohortUserWithPrismaUserIDEqualsParam {
	if value == nil {
		return cohortUserWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r cohortUserQueryUserIDString) Order(direction SortOrder) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name:  "userID",
			Value: direction,
		},
	}
}

func (r cohortUserQueryUserIDString) Cursor(cursor string) cohortUserCursorParam {
	return cohortUserCursorParam{
		data: builder.Field{
			Name:  "userID",
			Value: cursor,
		},
	}
}

func (r cohortUserQueryUserIDString) In(value []string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryUserIDString) InIfPresent(value []string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.In(value)
}

func (r cohortUserQueryUserIDString) NotIn(value []string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryUserIDString) NotInIfPresent(value []string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.NotIn(value)
}

func (r cohortUserQueryUserIDString) Lt(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryUserIDString) LtIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Lt(*value)
}

func (r cohortUserQueryUserIDString) Lte(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryUserIDString) LteIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Lte(*value)
}

func (r cohortUserQueryUserIDString) Gt(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryUserIDString) GtIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Gt(*value)
}

func (r cohortUserQueryUserIDString) Gte(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryUserIDString) GteIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Gte(*value)
}

func (r cohortUserQueryUserIDString) Contains(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryUserIDString) ContainsIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Contains(*value)
}

func (r cohortUserQueryUserIDString) StartsWith(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryUserIDString) StartsWithIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r cohortUserQueryUserIDString) EndsWith(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryUserIDString) EndsWithIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r cohortUserQueryUserIDString) Mode(value QueryMode) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryUserIDString) ModeIfPresent(value *QueryMode) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Mode(*value)
}

func (r cohortUserQueryUserIDString) Not(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryUserIDString) NotIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r cohortUserQueryUserIDString) HasPrefix(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r cohortUserQueryUserIDString) HasPrefixIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r cohortUserQueryUserIDString) HasSuffix(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r cohortUserQueryUserIDString) HasSuffixIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.HasSuffix(*value)
}

// base struct
type cohortUserQueryUserUser struct{}

type cohortUserQueryUserRelations struct{}

// CohortUser -> User
//
// @relation
// @required
func (cohortUserQueryUserRelations) Where(
	params ...UserWhereParam,
) cohortUserDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (cohortUserQueryUserRelations) Fetch() cohortUserToUserFindUnique {
	var v cohortUserToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "user"
	v.query.Outputs = userOutput

	return v
}

func (r cohortUserQueryUserRelations) Link(
	params UserWhereParam,
) cohortUserWithPrismaUserSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return cohortUserWithPrismaUserSetParam{}
	}

	fields = append(fields, f)

	return cohortUserWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r cohortUserQueryUserRelations) Unlink() cohortUserWithPrismaUserSetParam {
	var v cohortUserWithPrismaUserSetParam

	v = cohortUserWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

// base struct
type cohortUserQueryCohortIDString struct{}

// Set the required value of CohortID
func (r cohortUserQueryCohortIDString) Set(value string) cohortUserSetParam {

	return cohortUserSetParam{
		data: builder.Field{
			Name:  "cohortID",
			Value: value,
		},
	}

}

// Set the optional value of CohortID dynamically
func (r cohortUserQueryCohortIDString) SetIfPresent(value *string) cohortUserSetParam {
	if value == nil {
		return cohortUserSetParam{}
	}

	return r.Set(*value)
}

func (r cohortUserQueryCohortIDString) Equals(value string) cohortUserWithPrismaCohortIDEqualsParam {

	return cohortUserWithPrismaCohortIDEqualsParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryCohortIDString) EqualsIfPresent(value *string) cohortUserWithPrismaCohortIDEqualsParam {
	if value == nil {
		return cohortUserWithPrismaCohortIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r cohortUserQueryCohortIDString) Order(direction SortOrder) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name:  "cohortID",
			Value: direction,
		},
	}
}

func (r cohortUserQueryCohortIDString) Cursor(cursor string) cohortUserCursorParam {
	return cohortUserCursorParam{
		data: builder.Field{
			Name:  "cohortID",
			Value: cursor,
		},
	}
}

func (r cohortUserQueryCohortIDString) In(value []string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryCohortIDString) InIfPresent(value []string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.In(value)
}

func (r cohortUserQueryCohortIDString) NotIn(value []string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryCohortIDString) NotInIfPresent(value []string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.NotIn(value)
}

func (r cohortUserQueryCohortIDString) Lt(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryCohortIDString) LtIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Lt(*value)
}

func (r cohortUserQueryCohortIDString) Lte(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryCohortIDString) LteIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Lte(*value)
}

func (r cohortUserQueryCohortIDString) Gt(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryCohortIDString) GtIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Gt(*value)
}

func (r cohortUserQueryCohortIDString) Gte(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryCohortIDString) GteIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Gte(*value)
}

func (r cohortUserQueryCohortIDString) Contains(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryCohortIDString) ContainsIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Contains(*value)
}

func (r cohortUserQueryCohortIDString) StartsWith(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryCohortIDString) StartsWithIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r cohortUserQueryCohortIDString) EndsWith(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryCohortIDString) EndsWithIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r cohortUserQueryCohortIDString) Mode(value QueryMode) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryCohortIDString) ModeIfPresent(value *QueryMode) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Mode(*value)
}

func (r cohortUserQueryCohortIDString) Not(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r cohortUserQueryCohortIDString) NotIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r cohortUserQueryCohortIDString) HasPrefix(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r cohortUserQueryCohortIDString) HasPrefixIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r cohortUserQueryCohortIDString) HasSuffix(value string) cohortUserDefaultParam {
	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohortID",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r cohortUserQueryCohortIDString) HasSuffixIfPresent(value *string) cohortUserDefaultParam {
	if value == nil {
		return cohortUserDefaultParam{}
	}
	return r.HasSuffix(*value)
}

// base struct
type cohortUserQueryCohortCohort struct{}

type cohortUserQueryCohortRelations struct{}

// CohortUser -> Cohort
//
// @relation
// @required
func (cohortUserQueryCohortRelations) Where(
	params ...CohortWhereParam,
) cohortUserDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return cohortUserDefaultParam{
		data: builder.Field{
			Name: "cohort",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (cohortUserQueryCohortRelations) Fetch() cohortUserToCohortFindUnique {
	var v cohortUserToCohortFindUnique

	v.query.Operation = "query"
	v.query.Method = "cohort"
	v.query.Outputs = cohortOutput

	return v
}

func (r cohortUserQueryCohortRelations) Link(
	params CohortWhereParam,
) cohortUserWithPrismaCohortSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return cohortUserWithPrismaCohortSetParam{}
	}

	fields = append(fields, f)

	return cohortUserWithPrismaCohortSetParam{
		data: builder.Field{
			Name: "cohort",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r cohortUserQueryCohortRelations) Unlink() cohortUserWithPrismaCohortSetParam {
	var v cohortUserWithPrismaCohortSetParam

	v = cohortUserWithPrismaCohortSetParam{
		data: builder.Field{
			Name: "cohort",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

// NotificationMeta acts as a namespaces to access query methods for the NotificationMeta db_model
var NotificationMeta = notificationMetaQuery{}

// notificationMetaQuery exposes query functions for the notificationMeta db_model
type notificationMetaQuery struct {

	// ID
	//
	// @required
	ID notificationMetaQueryIDString

	// Data
	//
	// @required
	Data notificationMetaQueryDataJson

	Notifications notificationMetaQueryNotificationsRelations

	Campaign notificationMetaQueryCampaignRelations

	// CreatedAt
	//
	// @required
	CreatedAt notificationMetaQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt notificationMetaQueryUpdatedAtDateTime
}

func (notificationMetaQuery) Not(params ...NotificationMetaWhereParam) notificationMetaDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return notificationMetaDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (notificationMetaQuery) Or(params ...NotificationMetaWhereParam) notificationMetaDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return notificationMetaDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (notificationMetaQuery) And(params ...NotificationMetaWhereParam) notificationMetaDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return notificationMetaDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type notificationMetaQueryIDString struct{}

// Set the required value of UserID
func (r notificationMetaQueryIDString) Set(value string) notificationMetaSetParam {

	return notificationMetaSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r notificationMetaQueryIDString) SetIfPresent(value *string) notificationMetaSetParam {
	if value == nil {
		return notificationMetaSetParam{}
	}

	return r.Set(*value)
}

func (r notificationMetaQueryIDString) Equals(value string) notificationMetaWithPrismaIDEqualsUniqueParam {

	return notificationMetaWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryIDString) EqualsIfPresent(value *string) notificationMetaWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return notificationMetaWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r notificationMetaQueryIDString) Order(direction SortOrder) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r notificationMetaQueryIDString) Cursor(cursor string) notificationMetaCursorParam {
	return notificationMetaCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r notificationMetaQueryIDString) In(value []string) notificationMetaParamUnique {
	return notificationMetaParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryIDString) InIfPresent(value []string) notificationMetaParamUnique {
	if value == nil {
		return notificationMetaParamUnique{}
	}
	return r.In(value)
}

func (r notificationMetaQueryIDString) NotIn(value []string) notificationMetaParamUnique {
	return notificationMetaParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryIDString) NotInIfPresent(value []string) notificationMetaParamUnique {
	if value == nil {
		return notificationMetaParamUnique{}
	}
	return r.NotIn(value)
}

func (r notificationMetaQueryIDString) Lt(value string) notificationMetaParamUnique {
	return notificationMetaParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryIDString) LtIfPresent(value *string) notificationMetaParamUnique {
	if value == nil {
		return notificationMetaParamUnique{}
	}
	return r.Lt(*value)
}

func (r notificationMetaQueryIDString) Lte(value string) notificationMetaParamUnique {
	return notificationMetaParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryIDString) LteIfPresent(value *string) notificationMetaParamUnique {
	if value == nil {
		return notificationMetaParamUnique{}
	}
	return r.Lte(*value)
}

func (r notificationMetaQueryIDString) Gt(value string) notificationMetaParamUnique {
	return notificationMetaParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryIDString) GtIfPresent(value *string) notificationMetaParamUnique {
	if value == nil {
		return notificationMetaParamUnique{}
	}
	return r.Gt(*value)
}

func (r notificationMetaQueryIDString) Gte(value string) notificationMetaParamUnique {
	return notificationMetaParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryIDString) GteIfPresent(value *string) notificationMetaParamUnique {
	if value == nil {
		return notificationMetaParamUnique{}
	}
	return r.Gte(*value)
}

func (r notificationMetaQueryIDString) Contains(value string) notificationMetaParamUnique {
	return notificationMetaParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryIDString) ContainsIfPresent(value *string) notificationMetaParamUnique {
	if value == nil {
		return notificationMetaParamUnique{}
	}
	return r.Contains(*value)
}

func (r notificationMetaQueryIDString) StartsWith(value string) notificationMetaParamUnique {
	return notificationMetaParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryIDString) StartsWithIfPresent(value *string) notificationMetaParamUnique {
	if value == nil {
		return notificationMetaParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r notificationMetaQueryIDString) EndsWith(value string) notificationMetaParamUnique {
	return notificationMetaParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryIDString) EndsWithIfPresent(value *string) notificationMetaParamUnique {
	if value == nil {
		return notificationMetaParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r notificationMetaQueryIDString) Mode(value QueryMode) notificationMetaParamUnique {
	return notificationMetaParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryIDString) ModeIfPresent(value *QueryMode) notificationMetaParamUnique {
	if value == nil {
		return notificationMetaParamUnique{}
	}
	return r.Mode(*value)
}

func (r notificationMetaQueryIDString) Not(value string) notificationMetaParamUnique {
	return notificationMetaParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryIDString) NotIfPresent(value *string) notificationMetaParamUnique {
	if value == nil {
		return notificationMetaParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r notificationMetaQueryIDString) HasPrefix(value string) notificationMetaParamUnique {
	return notificationMetaParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r notificationMetaQueryIDString) HasPrefixIfPresent(value *string) notificationMetaParamUnique {
	if value == nil {
		return notificationMetaParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r notificationMetaQueryIDString) HasSuffix(value string) notificationMetaParamUnique {
	return notificationMetaParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r notificationMetaQueryIDString) HasSuffixIfPresent(value *string) notificationMetaParamUnique {
	if value == nil {
		return notificationMetaParamUnique{}
	}
	return r.HasSuffix(*value)
}

// base struct
type notificationMetaQueryDataJson struct{}

// Set the required value of Data
func (r notificationMetaQueryDataJson) Set(value JSON) notificationMetaWithPrismaDataSetParam {

	return notificationMetaWithPrismaDataSetParam{
		data: builder.Field{
			Name:  "data",
			Value: value,
		},
	}

}

// Set the optional value of Data dynamically
func (r notificationMetaQueryDataJson) SetIfPresent(value *JSON) notificationMetaWithPrismaDataSetParam {
	if value == nil {
		return notificationMetaWithPrismaDataSetParam{}
	}

	return r.Set(*value)
}

func (r notificationMetaQueryDataJson) Equals(value JSON) notificationMetaWithPrismaDataEqualsParam {

	return notificationMetaWithPrismaDataEqualsParam{
		data: builder.Field{
			Name: "data",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryDataJson) EqualsIfPresent(value *JSON) notificationMetaWithPrismaDataEqualsParam {
	if value == nil {
		return notificationMetaWithPrismaDataEqualsParam{}
	}
	return r.Equals(*value)
}

func (r notificationMetaQueryDataJson) Order(direction SortOrder) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name:  "data",
			Value: direction,
		},
	}
}

func (r notificationMetaQueryDataJson) Cursor(cursor JSON) notificationMetaCursorParam {
	return notificationMetaCursorParam{
		data: builder.Field{
			Name:  "data",
			Value: cursor,
		},
	}
}

func (r notificationMetaQueryDataJson) Path(value []string) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "data",
			Fields: []builder.Field{
				{
					Name:  "path",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryDataJson) PathIfPresent(value []string) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Path(value)
}

func (r notificationMetaQueryDataJson) StringContains(value string) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "data",
			Fields: []builder.Field{
				{
					Name:  "string_contains",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryDataJson) StringContainsIfPresent(value *string) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.StringContains(*value)
}

func (r notificationMetaQueryDataJson) StringStartsWith(value string) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "data",
			Fields: []builder.Field{
				{
					Name:  "string_starts_with",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryDataJson) StringStartsWithIfPresent(value *string) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.StringStartsWith(*value)
}

func (r notificationMetaQueryDataJson) StringEndsWith(value string) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "data",
			Fields: []builder.Field{
				{
					Name:  "string_ends_with",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryDataJson) StringEndsWithIfPresent(value *string) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.StringEndsWith(*value)
}

func (r notificationMetaQueryDataJson) ArrayContains(value JSON) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "data",
			Fields: []builder.Field{
				{
					Name:  "array_contains",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryDataJson) ArrayContainsIfPresent(value *JSON) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.ArrayContains(*value)
}

func (r notificationMetaQueryDataJson) ArrayStartsWith(value JSON) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "data",
			Fields: []builder.Field{
				{
					Name:  "array_starts_with",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryDataJson) ArrayStartsWithIfPresent(value *JSON) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.ArrayStartsWith(*value)
}

func (r notificationMetaQueryDataJson) ArrayEndsWith(value JSON) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "data",
			Fields: []builder.Field{
				{
					Name:  "array_ends_with",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryDataJson) ArrayEndsWithIfPresent(value *JSON) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.ArrayEndsWith(*value)
}

func (r notificationMetaQueryDataJson) Lt(value JSON) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "data",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryDataJson) LtIfPresent(value *JSON) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Lt(*value)
}

func (r notificationMetaQueryDataJson) Lte(value JSON) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "data",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryDataJson) LteIfPresent(value *JSON) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Lte(*value)
}

func (r notificationMetaQueryDataJson) Gt(value JSON) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "data",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryDataJson) GtIfPresent(value *JSON) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Gt(*value)
}

func (r notificationMetaQueryDataJson) Gte(value JSON) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "data",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryDataJson) GteIfPresent(value *JSON) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Gte(*value)
}

func (r notificationMetaQueryDataJson) Not(value JSONNullValueFilter) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "data",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryDataJson) NotIfPresent(value *JSONNullValueFilter) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Not(*value)
}

// base struct
type notificationMetaQueryNotificationsNotification struct{}

type notificationMetaQueryNotificationsRelations struct{}

// NotificationMeta -> Notifications
//
// @relation
// @required
func (notificationMetaQueryNotificationsRelations) Some(
	params ...NotificationWhereParam,
) notificationMetaDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "notifications",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// NotificationMeta -> Notifications
//
// @relation
// @required
func (notificationMetaQueryNotificationsRelations) Every(
	params ...NotificationWhereParam,
) notificationMetaDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "notifications",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

func (notificationMetaQueryNotificationsRelations) Fetch(

	params ...NotificationWhereParam,

) notificationMetaToNotificationsFindMany {
	var v notificationMetaToNotificationsFindMany

	v.query.Operation = "query"
	v.query.Method = "notifications"
	v.query.Outputs = notificationOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r notificationMetaQueryNotificationsRelations) Link(
	params ...NotificationWhereParam,
) notificationMetaSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return notificationMetaSetParam{
		data: builder.Field{
			Name: "notifications",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r notificationMetaQueryNotificationsRelations) Unlink(
	params ...NotificationWhereParam,
) notificationMetaSetParam {
	var v notificationMetaSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = notificationMetaSetParam{
		data: builder.Field{
			Name: "notifications",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

// base struct
type notificationMetaQueryCampaignCampaign struct{}

type notificationMetaQueryCampaignRelations struct{}

// NotificationMeta -> Campaign
//
// @relation
// @optional
func (notificationMetaQueryCampaignRelations) Where(
	params ...CampaignWhereParam,
) notificationMetaDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "campaign",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (notificationMetaQueryCampaignRelations) Fetch() notificationMetaToCampaignFindUnique {
	var v notificationMetaToCampaignFindUnique

	v.query.Operation = "query"
	v.query.Method = "campaign"
	v.query.Outputs = campaignOutput

	return v
}

func (r notificationMetaQueryCampaignRelations) Link(
	params CampaignWhereParam,
) notificationMetaSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return notificationMetaSetParam{}
	}

	fields = append(fields, f)

	return notificationMetaSetParam{
		data: builder.Field{
			Name: "campaign",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r notificationMetaQueryCampaignRelations) Unlink() notificationMetaSetParam {
	var v notificationMetaSetParam

	v = notificationMetaSetParam{
		data: builder.Field{
			Name: "campaign",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

// base struct
type notificationMetaQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r notificationMetaQueryCreatedAtDateTime) Set(value DateTime) notificationMetaSetParam {

	return notificationMetaSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r notificationMetaQueryCreatedAtDateTime) SetIfPresent(value *DateTime) notificationMetaSetParam {
	if value == nil {
		return notificationMetaSetParam{}
	}

	return r.Set(*value)
}

func (r notificationMetaQueryCreatedAtDateTime) Equals(value DateTime) notificationMetaWithPrismaCreatedAtEqualsParam {

	return notificationMetaWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) notificationMetaWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return notificationMetaWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r notificationMetaQueryCreatedAtDateTime) Order(direction SortOrder) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r notificationMetaQueryCreatedAtDateTime) Cursor(cursor DateTime) notificationMetaCursorParam {
	return notificationMetaCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r notificationMetaQueryCreatedAtDateTime) In(value []DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryCreatedAtDateTime) InIfPresent(value []DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.In(value)
}

func (r notificationMetaQueryCreatedAtDateTime) NotIn(value []DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.NotIn(value)
}

func (r notificationMetaQueryCreatedAtDateTime) Lt(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryCreatedAtDateTime) LtIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Lt(*value)
}

func (r notificationMetaQueryCreatedAtDateTime) Lte(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryCreatedAtDateTime) LteIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Lte(*value)
}

func (r notificationMetaQueryCreatedAtDateTime) Gt(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryCreatedAtDateTime) GtIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Gt(*value)
}

func (r notificationMetaQueryCreatedAtDateTime) Gte(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryCreatedAtDateTime) GteIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Gte(*value)
}

func (r notificationMetaQueryCreatedAtDateTime) Not(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryCreatedAtDateTime) NotIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r notificationMetaQueryCreatedAtDateTime) Before(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r notificationMetaQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r notificationMetaQueryCreatedAtDateTime) After(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r notificationMetaQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r notificationMetaQueryCreatedAtDateTime) BeforeEquals(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r notificationMetaQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r notificationMetaQueryCreatedAtDateTime) AfterEquals(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r notificationMetaQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// base struct
type notificationMetaQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r notificationMetaQueryUpdatedAtDateTime) Set(value DateTime) notificationMetaSetParam {

	return notificationMetaSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r notificationMetaQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) notificationMetaSetParam {
	if value == nil {
		return notificationMetaSetParam{}
	}

	return r.Set(*value)
}

func (r notificationMetaQueryUpdatedAtDateTime) Equals(value DateTime) notificationMetaWithPrismaUpdatedAtEqualsParam {

	return notificationMetaWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) notificationMetaWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return notificationMetaWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r notificationMetaQueryUpdatedAtDateTime) Order(direction SortOrder) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r notificationMetaQueryUpdatedAtDateTime) Cursor(cursor DateTime) notificationMetaCursorParam {
	return notificationMetaCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r notificationMetaQueryUpdatedAtDateTime) In(value []DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryUpdatedAtDateTime) InIfPresent(value []DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.In(value)
}

func (r notificationMetaQueryUpdatedAtDateTime) NotIn(value []DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.NotIn(value)
}

func (r notificationMetaQueryUpdatedAtDateTime) Lt(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Lt(*value)
}

func (r notificationMetaQueryUpdatedAtDateTime) Lte(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Lte(*value)
}

func (r notificationMetaQueryUpdatedAtDateTime) Gt(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Gt(*value)
}

func (r notificationMetaQueryUpdatedAtDateTime) Gte(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Gte(*value)
}

func (r notificationMetaQueryUpdatedAtDateTime) Not(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r notificationMetaQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r notificationMetaQueryUpdatedAtDateTime) Before(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r notificationMetaQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r notificationMetaQueryUpdatedAtDateTime) After(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r notificationMetaQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r notificationMetaQueryUpdatedAtDateTime) BeforeEquals(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r notificationMetaQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r notificationMetaQueryUpdatedAtDateTime) AfterEquals(value DateTime) notificationMetaDefaultParam {
	return notificationMetaDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r notificationMetaQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) notificationMetaDefaultParam {
	if value == nil {
		return notificationMetaDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// Notification acts as a namespaces to access query methods for the Notification db_model
var Notification = notificationQuery{}

// notificationQuery exposes query functions for the notification db_model
type notificationQuery struct {

	// ID
	//
	// @required
	ID notificationQueryIDString

	// Token
	//
	// @required
	Token notificationQueryTokenString

	// UserID
	//
	// @required
	UserID notificationQueryUserIDString

	// Status
	//
	// @required
	Status notificationQueryStatusNotificationStatus

	// MetaID
	//
	// @required
	MetaID notificationQueryMetaIDString

	Meta notificationQueryMetaRelations

	// CreatedAt
	//
	// @required
	CreatedAt notificationQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt notificationQueryUpdatedAtDateTime
}

func (notificationQuery) Not(params ...NotificationWhereParam) notificationDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return notificationDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (notificationQuery) Or(params ...NotificationWhereParam) notificationDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return notificationDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (notificationQuery) And(params ...NotificationWhereParam) notificationDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return notificationDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type notificationQueryIDString struct{}

// Set the required value of UserID
func (r notificationQueryIDString) Set(value string) notificationSetParam {

	return notificationSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r notificationQueryIDString) SetIfPresent(value *string) notificationSetParam {
	if value == nil {
		return notificationSetParam{}
	}

	return r.Set(*value)
}

func (r notificationQueryIDString) Equals(value string) notificationWithPrismaIDEqualsUniqueParam {

	return notificationWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryIDString) EqualsIfPresent(value *string) notificationWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return notificationWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r notificationQueryIDString) Order(direction SortOrder) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r notificationQueryIDString) Cursor(cursor string) notificationCursorParam {
	return notificationCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r notificationQueryIDString) In(value []string) notificationParamUnique {
	return notificationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryIDString) InIfPresent(value []string) notificationParamUnique {
	if value == nil {
		return notificationParamUnique{}
	}
	return r.In(value)
}

func (r notificationQueryIDString) NotIn(value []string) notificationParamUnique {
	return notificationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryIDString) NotInIfPresent(value []string) notificationParamUnique {
	if value == nil {
		return notificationParamUnique{}
	}
	return r.NotIn(value)
}

func (r notificationQueryIDString) Lt(value string) notificationParamUnique {
	return notificationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryIDString) LtIfPresent(value *string) notificationParamUnique {
	if value == nil {
		return notificationParamUnique{}
	}
	return r.Lt(*value)
}

func (r notificationQueryIDString) Lte(value string) notificationParamUnique {
	return notificationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryIDString) LteIfPresent(value *string) notificationParamUnique {
	if value == nil {
		return notificationParamUnique{}
	}
	return r.Lte(*value)
}

func (r notificationQueryIDString) Gt(value string) notificationParamUnique {
	return notificationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryIDString) GtIfPresent(value *string) notificationParamUnique {
	if value == nil {
		return notificationParamUnique{}
	}
	return r.Gt(*value)
}

func (r notificationQueryIDString) Gte(value string) notificationParamUnique {
	return notificationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryIDString) GteIfPresent(value *string) notificationParamUnique {
	if value == nil {
		return notificationParamUnique{}
	}
	return r.Gte(*value)
}

func (r notificationQueryIDString) Contains(value string) notificationParamUnique {
	return notificationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryIDString) ContainsIfPresent(value *string) notificationParamUnique {
	if value == nil {
		return notificationParamUnique{}
	}
	return r.Contains(*value)
}

func (r notificationQueryIDString) StartsWith(value string) notificationParamUnique {
	return notificationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryIDString) StartsWithIfPresent(value *string) notificationParamUnique {
	if value == nil {
		return notificationParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r notificationQueryIDString) EndsWith(value string) notificationParamUnique {
	return notificationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryIDString) EndsWithIfPresent(value *string) notificationParamUnique {
	if value == nil {
		return notificationParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r notificationQueryIDString) Mode(value QueryMode) notificationParamUnique {
	return notificationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryIDString) ModeIfPresent(value *QueryMode) notificationParamUnique {
	if value == nil {
		return notificationParamUnique{}
	}
	return r.Mode(*value)
}

func (r notificationQueryIDString) Not(value string) notificationParamUnique {
	return notificationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryIDString) NotIfPresent(value *string) notificationParamUnique {
	if value == nil {
		return notificationParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r notificationQueryIDString) HasPrefix(value string) notificationParamUnique {
	return notificationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r notificationQueryIDString) HasPrefixIfPresent(value *string) notificationParamUnique {
	if value == nil {
		return notificationParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r notificationQueryIDString) HasSuffix(value string) notificationParamUnique {
	return notificationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r notificationQueryIDString) HasSuffixIfPresent(value *string) notificationParamUnique {
	if value == nil {
		return notificationParamUnique{}
	}
	return r.HasSuffix(*value)
}

// base struct
type notificationQueryTokenString struct{}

// Set the required value of Token
func (r notificationQueryTokenString) Set(value string) notificationWithPrismaTokenSetParam {

	return notificationWithPrismaTokenSetParam{
		data: builder.Field{
			Name:  "token",
			Value: value,
		},
	}

}

// Set the optional value of Token dynamically
func (r notificationQueryTokenString) SetIfPresent(value *string) notificationWithPrismaTokenSetParam {
	if value == nil {
		return notificationWithPrismaTokenSetParam{}
	}

	return r.Set(*value)
}

func (r notificationQueryTokenString) Equals(value string) notificationWithPrismaTokenEqualsParam {

	return notificationWithPrismaTokenEqualsParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryTokenString) EqualsIfPresent(value *string) notificationWithPrismaTokenEqualsParam {
	if value == nil {
		return notificationWithPrismaTokenEqualsParam{}
	}
	return r.Equals(*value)
}

func (r notificationQueryTokenString) Order(direction SortOrder) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name:  "token",
			Value: direction,
		},
	}
}

func (r notificationQueryTokenString) Cursor(cursor string) notificationCursorParam {
	return notificationCursorParam{
		data: builder.Field{
			Name:  "token",
			Value: cursor,
		},
	}
}

func (r notificationQueryTokenString) In(value []string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryTokenString) InIfPresent(value []string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.In(value)
}

func (r notificationQueryTokenString) NotIn(value []string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryTokenString) NotInIfPresent(value []string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r notificationQueryTokenString) Lt(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryTokenString) LtIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Lt(*value)
}

func (r notificationQueryTokenString) Lte(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryTokenString) LteIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Lte(*value)
}

func (r notificationQueryTokenString) Gt(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryTokenString) GtIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Gt(*value)
}

func (r notificationQueryTokenString) Gte(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryTokenString) GteIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Gte(*value)
}

func (r notificationQueryTokenString) Contains(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryTokenString) ContainsIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Contains(*value)
}

func (r notificationQueryTokenString) StartsWith(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryTokenString) StartsWithIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r notificationQueryTokenString) EndsWith(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryTokenString) EndsWithIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r notificationQueryTokenString) Mode(value QueryMode) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryTokenString) ModeIfPresent(value *QueryMode) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Mode(*value)
}

func (r notificationQueryTokenString) Not(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryTokenString) NotIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r notificationQueryTokenString) HasPrefix(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r notificationQueryTokenString) HasPrefixIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r notificationQueryTokenString) HasSuffix(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "token",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r notificationQueryTokenString) HasSuffixIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.HasSuffix(*value)
}

// base struct
type notificationQueryUserIDString struct{}

// Set the required value of UserID
func (r notificationQueryUserIDString) Set(value string) notificationWithPrismaUserIDSetParam {

	return notificationWithPrismaUserIDSetParam{
		data: builder.Field{
			Name:  "userID",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r notificationQueryUserIDString) SetIfPresent(value *string) notificationWithPrismaUserIDSetParam {
	if value == nil {
		return notificationWithPrismaUserIDSetParam{}
	}

	return r.Set(*value)
}

func (r notificationQueryUserIDString) Equals(value string) notificationWithPrismaUserIDEqualsParam {

	return notificationWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUserIDString) EqualsIfPresent(value *string) notificationWithPrismaUserIDEqualsParam {
	if value == nil {
		return notificationWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r notificationQueryUserIDString) Order(direction SortOrder) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name:  "userID",
			Value: direction,
		},
	}
}

func (r notificationQueryUserIDString) Cursor(cursor string) notificationCursorParam {
	return notificationCursorParam{
		data: builder.Field{
			Name:  "userID",
			Value: cursor,
		},
	}
}

func (r notificationQueryUserIDString) In(value []string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUserIDString) InIfPresent(value []string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.In(value)
}

func (r notificationQueryUserIDString) NotIn(value []string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUserIDString) NotInIfPresent(value []string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r notificationQueryUserIDString) Lt(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUserIDString) LtIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Lt(*value)
}

func (r notificationQueryUserIDString) Lte(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUserIDString) LteIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Lte(*value)
}

func (r notificationQueryUserIDString) Gt(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUserIDString) GtIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Gt(*value)
}

func (r notificationQueryUserIDString) Gte(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUserIDString) GteIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Gte(*value)
}

func (r notificationQueryUserIDString) Contains(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUserIDString) ContainsIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Contains(*value)
}

func (r notificationQueryUserIDString) StartsWith(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUserIDString) StartsWithIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r notificationQueryUserIDString) EndsWith(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUserIDString) EndsWithIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r notificationQueryUserIDString) Mode(value QueryMode) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUserIDString) ModeIfPresent(value *QueryMode) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Mode(*value)
}

func (r notificationQueryUserIDString) Not(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUserIDString) NotIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r notificationQueryUserIDString) HasPrefix(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r notificationQueryUserIDString) HasPrefixIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r notificationQueryUserIDString) HasSuffix(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "userID",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r notificationQueryUserIDString) HasSuffixIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.HasSuffix(*value)
}

// base struct
type notificationQueryStatusNotificationStatus struct{}

// Set the required value of Status
func (r notificationQueryStatusNotificationStatus) Set(value NotificationStatus) notificationSetParam {

	return notificationSetParam{
		data: builder.Field{
			Name:  "status",
			Value: value,
		},
	}

}

// Set the optional value of Status dynamically
func (r notificationQueryStatusNotificationStatus) SetIfPresent(value *NotificationStatus) notificationSetParam {
	if value == nil {
		return notificationSetParam{}
	}

	return r.Set(*value)
}

func (r notificationQueryStatusNotificationStatus) Equals(value NotificationStatus) notificationWithPrismaStatusEqualsParam {

	return notificationWithPrismaStatusEqualsParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryStatusNotificationStatus) EqualsIfPresent(value *NotificationStatus) notificationWithPrismaStatusEqualsParam {
	if value == nil {
		return notificationWithPrismaStatusEqualsParam{}
	}
	return r.Equals(*value)
}

func (r notificationQueryStatusNotificationStatus) Order(direction SortOrder) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name:  "status",
			Value: direction,
		},
	}
}

func (r notificationQueryStatusNotificationStatus) Cursor(cursor NotificationStatus) notificationCursorParam {
	return notificationCursorParam{
		data: builder.Field{
			Name:  "status",
			Value: cursor,
		},
	}
}

func (r notificationQueryStatusNotificationStatus) In(value []NotificationStatus) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryStatusNotificationStatus) InIfPresent(value []NotificationStatus) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.In(value)
}

func (r notificationQueryStatusNotificationStatus) NotIn(value []NotificationStatus) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryStatusNotificationStatus) NotInIfPresent(value []NotificationStatus) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r notificationQueryStatusNotificationStatus) Not(value NotificationStatus) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryStatusNotificationStatus) NotIfPresent(value *NotificationStatus) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Not(*value)
}

// base struct
type notificationQueryMetaIDString struct{}

// Set the required value of MetaID
func (r notificationQueryMetaIDString) Set(value string) notificationSetParam {

	return notificationSetParam{
		data: builder.Field{
			Name:  "metaID",
			Value: value,
		},
	}

}

// Set the optional value of MetaID dynamically
func (r notificationQueryMetaIDString) SetIfPresent(value *string) notificationSetParam {
	if value == nil {
		return notificationSetParam{}
	}

	return r.Set(*value)
}

func (r notificationQueryMetaIDString) Equals(value string) notificationWithPrismaMetaIDEqualsParam {

	return notificationWithPrismaMetaIDEqualsParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryMetaIDString) EqualsIfPresent(value *string) notificationWithPrismaMetaIDEqualsParam {
	if value == nil {
		return notificationWithPrismaMetaIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r notificationQueryMetaIDString) Order(direction SortOrder) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name:  "metaID",
			Value: direction,
		},
	}
}

func (r notificationQueryMetaIDString) Cursor(cursor string) notificationCursorParam {
	return notificationCursorParam{
		data: builder.Field{
			Name:  "metaID",
			Value: cursor,
		},
	}
}

func (r notificationQueryMetaIDString) In(value []string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryMetaIDString) InIfPresent(value []string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.In(value)
}

func (r notificationQueryMetaIDString) NotIn(value []string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryMetaIDString) NotInIfPresent(value []string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r notificationQueryMetaIDString) Lt(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryMetaIDString) LtIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Lt(*value)
}

func (r notificationQueryMetaIDString) Lte(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryMetaIDString) LteIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Lte(*value)
}

func (r notificationQueryMetaIDString) Gt(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryMetaIDString) GtIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Gt(*value)
}

func (r notificationQueryMetaIDString) Gte(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryMetaIDString) GteIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Gte(*value)
}

func (r notificationQueryMetaIDString) Contains(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryMetaIDString) ContainsIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Contains(*value)
}

func (r notificationQueryMetaIDString) StartsWith(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryMetaIDString) StartsWithIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r notificationQueryMetaIDString) EndsWith(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryMetaIDString) EndsWithIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r notificationQueryMetaIDString) Mode(value QueryMode) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryMetaIDString) ModeIfPresent(value *QueryMode) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Mode(*value)
}

func (r notificationQueryMetaIDString) Not(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryMetaIDString) NotIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r notificationQueryMetaIDString) HasPrefix(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r notificationQueryMetaIDString) HasPrefixIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r notificationQueryMetaIDString) HasSuffix(value string) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "metaID",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r notificationQueryMetaIDString) HasSuffixIfPresent(value *string) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.HasSuffix(*value)
}

// base struct
type notificationQueryMetaNotificationMeta struct{}

type notificationQueryMetaRelations struct{}

// Notification -> Meta
//
// @relation
// @required
func (notificationQueryMetaRelations) Where(
	params ...NotificationMetaWhereParam,
) notificationDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return notificationDefaultParam{
		data: builder.Field{
			Name: "meta",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (notificationQueryMetaRelations) Fetch() notificationToMetaFindUnique {
	var v notificationToMetaFindUnique

	v.query.Operation = "query"
	v.query.Method = "meta"
	v.query.Outputs = notificationMetaOutput

	return v
}

func (r notificationQueryMetaRelations) Link(
	params NotificationMetaWhereParam,
) notificationWithPrismaMetaSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return notificationWithPrismaMetaSetParam{}
	}

	fields = append(fields, f)

	return notificationWithPrismaMetaSetParam{
		data: builder.Field{
			Name: "meta",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r notificationQueryMetaRelations) Unlink() notificationWithPrismaMetaSetParam {
	var v notificationWithPrismaMetaSetParam

	v = notificationWithPrismaMetaSetParam{
		data: builder.Field{
			Name: "meta",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

// base struct
type notificationQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r notificationQueryCreatedAtDateTime) Set(value DateTime) notificationSetParam {

	return notificationSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r notificationQueryCreatedAtDateTime) SetIfPresent(value *DateTime) notificationSetParam {
	if value == nil {
		return notificationSetParam{}
	}

	return r.Set(*value)
}

func (r notificationQueryCreatedAtDateTime) Equals(value DateTime) notificationWithPrismaCreatedAtEqualsParam {

	return notificationWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) notificationWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return notificationWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r notificationQueryCreatedAtDateTime) Order(direction SortOrder) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r notificationQueryCreatedAtDateTime) Cursor(cursor DateTime) notificationCursorParam {
	return notificationCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r notificationQueryCreatedAtDateTime) In(value []DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryCreatedAtDateTime) InIfPresent(value []DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.In(value)
}

func (r notificationQueryCreatedAtDateTime) NotIn(value []DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r notificationQueryCreatedAtDateTime) Lt(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryCreatedAtDateTime) LtIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Lt(*value)
}

func (r notificationQueryCreatedAtDateTime) Lte(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryCreatedAtDateTime) LteIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Lte(*value)
}

func (r notificationQueryCreatedAtDateTime) Gt(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryCreatedAtDateTime) GtIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Gt(*value)
}

func (r notificationQueryCreatedAtDateTime) Gte(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryCreatedAtDateTime) GteIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Gte(*value)
}

func (r notificationQueryCreatedAtDateTime) Not(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryCreatedAtDateTime) NotIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r notificationQueryCreatedAtDateTime) Before(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r notificationQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r notificationQueryCreatedAtDateTime) After(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r notificationQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r notificationQueryCreatedAtDateTime) BeforeEquals(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r notificationQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r notificationQueryCreatedAtDateTime) AfterEquals(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r notificationQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// base struct
type notificationQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r notificationQueryUpdatedAtDateTime) Set(value DateTime) notificationSetParam {

	return notificationSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r notificationQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) notificationSetParam {
	if value == nil {
		return notificationSetParam{}
	}

	return r.Set(*value)
}

func (r notificationQueryUpdatedAtDateTime) Equals(value DateTime) notificationWithPrismaUpdatedAtEqualsParam {

	return notificationWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) notificationWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return notificationWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r notificationQueryUpdatedAtDateTime) Order(direction SortOrder) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r notificationQueryUpdatedAtDateTime) Cursor(cursor DateTime) notificationCursorParam {
	return notificationCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r notificationQueryUpdatedAtDateTime) In(value []DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUpdatedAtDateTime) InIfPresent(value []DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.In(value)
}

func (r notificationQueryUpdatedAtDateTime) NotIn(value []DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r notificationQueryUpdatedAtDateTime) Lt(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Lt(*value)
}

func (r notificationQueryUpdatedAtDateTime) Lte(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Lte(*value)
}

func (r notificationQueryUpdatedAtDateTime) Gt(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Gt(*value)
}

func (r notificationQueryUpdatedAtDateTime) Gte(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Gte(*value)
}

func (r notificationQueryUpdatedAtDateTime) Not(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r notificationQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r notificationQueryUpdatedAtDateTime) Before(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r notificationQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r notificationQueryUpdatedAtDateTime) After(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r notificationQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r notificationQueryUpdatedAtDateTime) BeforeEquals(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r notificationQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r notificationQueryUpdatedAtDateTime) AfterEquals(value DateTime) notificationDefaultParam {
	return notificationDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r notificationQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) notificationDefaultParam {
	if value == nil {
		return notificationDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// Campaign acts as a namespaces to access query methods for the Campaign db_model
var Campaign = campaignQuery{}

// campaignQuery exposes query functions for the campaign db_model
type campaignQuery struct {

	// ID
	//
	// @required
	ID campaignQueryIDString

	// Name
	//
	// @required
	Name campaignQueryNameString

	// Criteria
	//
	// @required
	Criteria campaignQueryCriteriaJson

	// NotificationMetaID
	//
	// @required
	// @unique
	NotificationMetaID campaignQueryNotificationMetaIDString

	// Status
	//
	// @required
	Status campaignQueryStatusCampaignStatus

	NotificationMeta campaignQueryNotificationMetaRelations

	// CreatedAt
	//
	// @required
	CreatedAt campaignQueryCreatedAtDateTime

	// UpdatedAt
	//
	// @required
	UpdatedAt campaignQueryUpdatedAtDateTime
}

func (campaignQuery) Not(params ...CampaignWhereParam) campaignDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return campaignDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (campaignQuery) Or(params ...CampaignWhereParam) campaignDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return campaignDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (campaignQuery) And(params ...CampaignWhereParam) campaignDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return campaignDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type campaignQueryIDString struct{}

// Set the required value of UserID
func (r campaignQueryIDString) Set(value string) campaignSetParam {

	return campaignSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r campaignQueryIDString) SetIfPresent(value *string) campaignSetParam {
	if value == nil {
		return campaignSetParam{}
	}

	return r.Set(*value)
}

func (r campaignQueryIDString) Equals(value string) campaignWithPrismaIDEqualsUniqueParam {

	return campaignWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryIDString) EqualsIfPresent(value *string) campaignWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return campaignWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r campaignQueryIDString) Order(direction SortOrder) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r campaignQueryIDString) Cursor(cursor string) campaignCursorParam {
	return campaignCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r campaignQueryIDString) In(value []string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryIDString) InIfPresent(value []string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.In(value)
}

func (r campaignQueryIDString) NotIn(value []string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryIDString) NotInIfPresent(value []string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.NotIn(value)
}

func (r campaignQueryIDString) Lt(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryIDString) LtIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Lt(*value)
}

func (r campaignQueryIDString) Lte(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryIDString) LteIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Lte(*value)
}

func (r campaignQueryIDString) Gt(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryIDString) GtIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Gt(*value)
}

func (r campaignQueryIDString) Gte(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryIDString) GteIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Gte(*value)
}

func (r campaignQueryIDString) Contains(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryIDString) ContainsIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Contains(*value)
}

func (r campaignQueryIDString) StartsWith(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryIDString) StartsWithIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r campaignQueryIDString) EndsWith(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryIDString) EndsWithIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r campaignQueryIDString) Mode(value QueryMode) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryIDString) ModeIfPresent(value *QueryMode) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Mode(*value)
}

func (r campaignQueryIDString) Not(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryIDString) NotIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r campaignQueryIDString) HasPrefix(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r campaignQueryIDString) HasPrefixIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r campaignQueryIDString) HasSuffix(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r campaignQueryIDString) HasSuffixIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.HasSuffix(*value)
}

// base struct
type campaignQueryNameString struct{}

// Set the required value of Name
func (r campaignQueryNameString) Set(value string) campaignWithPrismaNameSetParam {

	return campaignWithPrismaNameSetParam{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

// Set the optional value of Name dynamically
func (r campaignQueryNameString) SetIfPresent(value *string) campaignWithPrismaNameSetParam {
	if value == nil {
		return campaignWithPrismaNameSetParam{}
	}

	return r.Set(*value)
}

func (r campaignQueryNameString) Equals(value string) campaignWithPrismaNameEqualsParam {

	return campaignWithPrismaNameEqualsParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNameString) EqualsIfPresent(value *string) campaignWithPrismaNameEqualsParam {
	if value == nil {
		return campaignWithPrismaNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r campaignQueryNameString) Order(direction SortOrder) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r campaignQueryNameString) Cursor(cursor string) campaignCursorParam {
	return campaignCursorParam{
		data: builder.Field{
			Name:  "name",
			Value: cursor,
		},
	}
}

func (r campaignQueryNameString) In(value []string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNameString) InIfPresent(value []string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.In(value)
}

func (r campaignQueryNameString) NotIn(value []string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNameString) NotInIfPresent(value []string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.NotIn(value)
}

func (r campaignQueryNameString) Lt(value string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNameString) LtIfPresent(value *string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Lt(*value)
}

func (r campaignQueryNameString) Lte(value string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNameString) LteIfPresent(value *string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Lte(*value)
}

func (r campaignQueryNameString) Gt(value string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNameString) GtIfPresent(value *string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Gt(*value)
}

func (r campaignQueryNameString) Gte(value string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNameString) GteIfPresent(value *string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Gte(*value)
}

func (r campaignQueryNameString) Contains(value string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNameString) ContainsIfPresent(value *string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Contains(*value)
}

func (r campaignQueryNameString) StartsWith(value string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNameString) StartsWithIfPresent(value *string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r campaignQueryNameString) EndsWith(value string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNameString) EndsWithIfPresent(value *string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r campaignQueryNameString) Mode(value QueryMode) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNameString) ModeIfPresent(value *QueryMode) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Mode(*value)
}

func (r campaignQueryNameString) Not(value string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNameString) NotIfPresent(value *string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r campaignQueryNameString) HasPrefix(value string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r campaignQueryNameString) HasPrefixIfPresent(value *string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r campaignQueryNameString) HasSuffix(value string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r campaignQueryNameString) HasSuffixIfPresent(value *string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.HasSuffix(*value)
}

// base struct
type campaignQueryCriteriaJson struct{}

// Set the required value of Criteria
func (r campaignQueryCriteriaJson) Set(value JSON) campaignWithPrismaCriteriaSetParam {

	return campaignWithPrismaCriteriaSetParam{
		data: builder.Field{
			Name:  "criteria",
			Value: value,
		},
	}

}

// Set the optional value of Criteria dynamically
func (r campaignQueryCriteriaJson) SetIfPresent(value *JSON) campaignWithPrismaCriteriaSetParam {
	if value == nil {
		return campaignWithPrismaCriteriaSetParam{}
	}

	return r.Set(*value)
}

func (r campaignQueryCriteriaJson) Equals(value JSON) campaignWithPrismaCriteriaEqualsParam {

	return campaignWithPrismaCriteriaEqualsParam{
		data: builder.Field{
			Name: "criteria",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCriteriaJson) EqualsIfPresent(value *JSON) campaignWithPrismaCriteriaEqualsParam {
	if value == nil {
		return campaignWithPrismaCriteriaEqualsParam{}
	}
	return r.Equals(*value)
}

func (r campaignQueryCriteriaJson) Order(direction SortOrder) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name:  "criteria",
			Value: direction,
		},
	}
}

func (r campaignQueryCriteriaJson) Cursor(cursor JSON) campaignCursorParam {
	return campaignCursorParam{
		data: builder.Field{
			Name:  "criteria",
			Value: cursor,
		},
	}
}

func (r campaignQueryCriteriaJson) Path(value []string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "criteria",
			Fields: []builder.Field{
				{
					Name:  "path",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCriteriaJson) PathIfPresent(value []string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Path(value)
}

func (r campaignQueryCriteriaJson) StringContains(value string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "criteria",
			Fields: []builder.Field{
				{
					Name:  "string_contains",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCriteriaJson) StringContainsIfPresent(value *string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.StringContains(*value)
}

func (r campaignQueryCriteriaJson) StringStartsWith(value string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "criteria",
			Fields: []builder.Field{
				{
					Name:  "string_starts_with",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCriteriaJson) StringStartsWithIfPresent(value *string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.StringStartsWith(*value)
}

func (r campaignQueryCriteriaJson) StringEndsWith(value string) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "criteria",
			Fields: []builder.Field{
				{
					Name:  "string_ends_with",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCriteriaJson) StringEndsWithIfPresent(value *string) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.StringEndsWith(*value)
}

func (r campaignQueryCriteriaJson) ArrayContains(value JSON) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "criteria",
			Fields: []builder.Field{
				{
					Name:  "array_contains",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCriteriaJson) ArrayContainsIfPresent(value *JSON) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.ArrayContains(*value)
}

func (r campaignQueryCriteriaJson) ArrayStartsWith(value JSON) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "criteria",
			Fields: []builder.Field{
				{
					Name:  "array_starts_with",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCriteriaJson) ArrayStartsWithIfPresent(value *JSON) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.ArrayStartsWith(*value)
}

func (r campaignQueryCriteriaJson) ArrayEndsWith(value JSON) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "criteria",
			Fields: []builder.Field{
				{
					Name:  "array_ends_with",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCriteriaJson) ArrayEndsWithIfPresent(value *JSON) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.ArrayEndsWith(*value)
}

func (r campaignQueryCriteriaJson) Lt(value JSON) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "criteria",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCriteriaJson) LtIfPresent(value *JSON) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Lt(*value)
}

func (r campaignQueryCriteriaJson) Lte(value JSON) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "criteria",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCriteriaJson) LteIfPresent(value *JSON) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Lte(*value)
}

func (r campaignQueryCriteriaJson) Gt(value JSON) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "criteria",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCriteriaJson) GtIfPresent(value *JSON) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Gt(*value)
}

func (r campaignQueryCriteriaJson) Gte(value JSON) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "criteria",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCriteriaJson) GteIfPresent(value *JSON) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Gte(*value)
}

func (r campaignQueryCriteriaJson) Not(value JSONNullValueFilter) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "criteria",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCriteriaJson) NotIfPresent(value *JSONNullValueFilter) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Not(*value)
}

// base struct
type campaignQueryNotificationMetaIDString struct{}

// Set the required value of NotificationMetaID
func (r campaignQueryNotificationMetaIDString) Set(value string) campaignSetParam {

	return campaignSetParam{
		data: builder.Field{
			Name:  "notificationMetaID",
			Value: value,
		},
	}

}

// Set the optional value of NotificationMetaID dynamically
func (r campaignQueryNotificationMetaIDString) SetIfPresent(value *string) campaignSetParam {
	if value == nil {
		return campaignSetParam{}
	}

	return r.Set(*value)
}

func (r campaignQueryNotificationMetaIDString) Equals(value string) campaignWithPrismaNotificationMetaIDEqualsUniqueParam {

	return campaignWithPrismaNotificationMetaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNotificationMetaIDString) EqualsIfPresent(value *string) campaignWithPrismaNotificationMetaIDEqualsUniqueParam {
	if value == nil {
		return campaignWithPrismaNotificationMetaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r campaignQueryNotificationMetaIDString) Order(direction SortOrder) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name:  "notificationMetaID",
			Value: direction,
		},
	}
}

func (r campaignQueryNotificationMetaIDString) Cursor(cursor string) campaignCursorParam {
	return campaignCursorParam{
		data: builder.Field{
			Name:  "notificationMetaID",
			Value: cursor,
		},
	}
}

func (r campaignQueryNotificationMetaIDString) In(value []string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNotificationMetaIDString) InIfPresent(value []string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.In(value)
}

func (r campaignQueryNotificationMetaIDString) NotIn(value []string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNotificationMetaIDString) NotInIfPresent(value []string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.NotIn(value)
}

func (r campaignQueryNotificationMetaIDString) Lt(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNotificationMetaIDString) LtIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Lt(*value)
}

func (r campaignQueryNotificationMetaIDString) Lte(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNotificationMetaIDString) LteIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Lte(*value)
}

func (r campaignQueryNotificationMetaIDString) Gt(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNotificationMetaIDString) GtIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Gt(*value)
}

func (r campaignQueryNotificationMetaIDString) Gte(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNotificationMetaIDString) GteIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Gte(*value)
}

func (r campaignQueryNotificationMetaIDString) Contains(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNotificationMetaIDString) ContainsIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Contains(*value)
}

func (r campaignQueryNotificationMetaIDString) StartsWith(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNotificationMetaIDString) StartsWithIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r campaignQueryNotificationMetaIDString) EndsWith(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNotificationMetaIDString) EndsWithIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r campaignQueryNotificationMetaIDString) Mode(value QueryMode) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNotificationMetaIDString) ModeIfPresent(value *QueryMode) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Mode(*value)
}

func (r campaignQueryNotificationMetaIDString) Not(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryNotificationMetaIDString) NotIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r campaignQueryNotificationMetaIDString) HasPrefix(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r campaignQueryNotificationMetaIDString) HasPrefixIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r campaignQueryNotificationMetaIDString) HasSuffix(value string) campaignParamUnique {
	return campaignParamUnique{
		data: builder.Field{
			Name: "notificationMetaID",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r campaignQueryNotificationMetaIDString) HasSuffixIfPresent(value *string) campaignParamUnique {
	if value == nil {
		return campaignParamUnique{}
	}
	return r.HasSuffix(*value)
}

// base struct
type campaignQueryStatusCampaignStatus struct{}

// Set the required value of Status
func (r campaignQueryStatusCampaignStatus) Set(value CampaignStatus) campaignSetParam {

	return campaignSetParam{
		data: builder.Field{
			Name:  "status",
			Value: value,
		},
	}

}

// Set the optional value of Status dynamically
func (r campaignQueryStatusCampaignStatus) SetIfPresent(value *CampaignStatus) campaignSetParam {
	if value == nil {
		return campaignSetParam{}
	}

	return r.Set(*value)
}

func (r campaignQueryStatusCampaignStatus) Equals(value CampaignStatus) campaignWithPrismaStatusEqualsParam {

	return campaignWithPrismaStatusEqualsParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryStatusCampaignStatus) EqualsIfPresent(value *CampaignStatus) campaignWithPrismaStatusEqualsParam {
	if value == nil {
		return campaignWithPrismaStatusEqualsParam{}
	}
	return r.Equals(*value)
}

func (r campaignQueryStatusCampaignStatus) Order(direction SortOrder) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name:  "status",
			Value: direction,
		},
	}
}

func (r campaignQueryStatusCampaignStatus) Cursor(cursor CampaignStatus) campaignCursorParam {
	return campaignCursorParam{
		data: builder.Field{
			Name:  "status",
			Value: cursor,
		},
	}
}

func (r campaignQueryStatusCampaignStatus) In(value []CampaignStatus) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryStatusCampaignStatus) InIfPresent(value []CampaignStatus) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.In(value)
}

func (r campaignQueryStatusCampaignStatus) NotIn(value []CampaignStatus) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryStatusCampaignStatus) NotInIfPresent(value []CampaignStatus) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.NotIn(value)
}

func (r campaignQueryStatusCampaignStatus) Not(value CampaignStatus) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryStatusCampaignStatus) NotIfPresent(value *CampaignStatus) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Not(*value)
}

// base struct
type campaignQueryNotificationMetaNotificationMeta struct{}

type campaignQueryNotificationMetaRelations struct{}

// Campaign -> NotificationMeta
//
// @relation
// @required
func (campaignQueryNotificationMetaRelations) Where(
	params ...NotificationMetaWhereParam,
) campaignDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return campaignDefaultParam{
		data: builder.Field{
			Name: "notificationMeta",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (campaignQueryNotificationMetaRelations) Fetch() campaignToNotificationMetaFindUnique {
	var v campaignToNotificationMetaFindUnique

	v.query.Operation = "query"
	v.query.Method = "notificationMeta"
	v.query.Outputs = notificationMetaOutput

	return v
}

func (r campaignQueryNotificationMetaRelations) Link(
	params NotificationMetaWhereParam,
) campaignWithPrismaNotificationMetaSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return campaignWithPrismaNotificationMetaSetParam{}
	}

	fields = append(fields, f)

	return campaignWithPrismaNotificationMetaSetParam{
		data: builder.Field{
			Name: "notificationMeta",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r campaignQueryNotificationMetaRelations) Unlink() campaignWithPrismaNotificationMetaSetParam {
	var v campaignWithPrismaNotificationMetaSetParam

	v = campaignWithPrismaNotificationMetaSetParam{
		data: builder.Field{
			Name: "notificationMeta",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

// base struct
type campaignQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r campaignQueryCreatedAtDateTime) Set(value DateTime) campaignSetParam {

	return campaignSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r campaignQueryCreatedAtDateTime) SetIfPresent(value *DateTime) campaignSetParam {
	if value == nil {
		return campaignSetParam{}
	}

	return r.Set(*value)
}

func (r campaignQueryCreatedAtDateTime) Equals(value DateTime) campaignWithPrismaCreatedAtEqualsParam {

	return campaignWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) campaignWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return campaignWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r campaignQueryCreatedAtDateTime) Order(direction SortOrder) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r campaignQueryCreatedAtDateTime) Cursor(cursor DateTime) campaignCursorParam {
	return campaignCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r campaignQueryCreatedAtDateTime) In(value []DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCreatedAtDateTime) InIfPresent(value []DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.In(value)
}

func (r campaignQueryCreatedAtDateTime) NotIn(value []DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.NotIn(value)
}

func (r campaignQueryCreatedAtDateTime) Lt(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCreatedAtDateTime) LtIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Lt(*value)
}

func (r campaignQueryCreatedAtDateTime) Lte(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCreatedAtDateTime) LteIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Lte(*value)
}

func (r campaignQueryCreatedAtDateTime) Gt(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCreatedAtDateTime) GtIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Gt(*value)
}

func (r campaignQueryCreatedAtDateTime) Gte(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCreatedAtDateTime) GteIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Gte(*value)
}

func (r campaignQueryCreatedAtDateTime) Not(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryCreatedAtDateTime) NotIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r campaignQueryCreatedAtDateTime) Before(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r campaignQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r campaignQueryCreatedAtDateTime) After(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r campaignQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r campaignQueryCreatedAtDateTime) BeforeEquals(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r campaignQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r campaignQueryCreatedAtDateTime) AfterEquals(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r campaignQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// base struct
type campaignQueryUpdatedAtDateTime struct{}

// Set the required value of UpdatedAt
func (r campaignQueryUpdatedAtDateTime) Set(value DateTime) campaignSetParam {

	return campaignSetParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: value,
		},
	}

}

// Set the optional value of UpdatedAt dynamically
func (r campaignQueryUpdatedAtDateTime) SetIfPresent(value *DateTime) campaignSetParam {
	if value == nil {
		return campaignSetParam{}
	}

	return r.Set(*value)
}

func (r campaignQueryUpdatedAtDateTime) Equals(value DateTime) campaignWithPrismaUpdatedAtEqualsParam {

	return campaignWithPrismaUpdatedAtEqualsParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryUpdatedAtDateTime) EqualsIfPresent(value *DateTime) campaignWithPrismaUpdatedAtEqualsParam {
	if value == nil {
		return campaignWithPrismaUpdatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r campaignQueryUpdatedAtDateTime) Order(direction SortOrder) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: direction,
		},
	}
}

func (r campaignQueryUpdatedAtDateTime) Cursor(cursor DateTime) campaignCursorParam {
	return campaignCursorParam{
		data: builder.Field{
			Name:  "updatedAt",
			Value: cursor,
		},
	}
}

func (r campaignQueryUpdatedAtDateTime) In(value []DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryUpdatedAtDateTime) InIfPresent(value []DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.In(value)
}

func (r campaignQueryUpdatedAtDateTime) NotIn(value []DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryUpdatedAtDateTime) NotInIfPresent(value []DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.NotIn(value)
}

func (r campaignQueryUpdatedAtDateTime) Lt(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryUpdatedAtDateTime) LtIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Lt(*value)
}

func (r campaignQueryUpdatedAtDateTime) Lte(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryUpdatedAtDateTime) LteIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Lte(*value)
}

func (r campaignQueryUpdatedAtDateTime) Gt(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryUpdatedAtDateTime) GtIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Gt(*value)
}

func (r campaignQueryUpdatedAtDateTime) Gte(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryUpdatedAtDateTime) GteIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Gte(*value)
}

func (r campaignQueryUpdatedAtDateTime) Not(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r campaignQueryUpdatedAtDateTime) NotIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r campaignQueryUpdatedAtDateTime) Before(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r campaignQueryUpdatedAtDateTime) BeforeIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r campaignQueryUpdatedAtDateTime) After(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r campaignQueryUpdatedAtDateTime) AfterIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r campaignQueryUpdatedAtDateTime) BeforeEquals(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r campaignQueryUpdatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r campaignQueryUpdatedAtDateTime) AfterEquals(value DateTime) campaignDefaultParam {
	return campaignDefaultParam{
		data: builder.Field{
			Name: "updatedAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r campaignQueryUpdatedAtDateTime) AfterEqualsIfPresent(value *DateTime) campaignDefaultParam {
	if value == nil {
		return campaignDefaultParam{}
	}
	return r.AfterEquals(*value)
}

// --- template transaction.gotpl ---

func NewuserUniqueTxResult() userUniqueTxResult {
	return userUniqueTxResult{
		result: &transaction.Result{},
	}
}

type userUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p userUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p userUniqueTxResult) IsTx() {}

func (r userUniqueTxResult) Result() (v *UserModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewuserManyTxResult() userManyTxResult {
	return userManyTxResult{
		result: &transaction.Result{},
	}
}

type userManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p userManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p userManyTxResult) IsTx() {}

func (r userManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewtokenUniqueTxResult() tokenUniqueTxResult {
	return tokenUniqueTxResult{
		result: &transaction.Result{},
	}
}

type tokenUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p tokenUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p tokenUniqueTxResult) IsTx() {}

func (r tokenUniqueTxResult) Result() (v *TokenModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewtokenManyTxResult() tokenManyTxResult {
	return tokenManyTxResult{
		result: &transaction.Result{},
	}
}

type tokenManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p tokenManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p tokenManyTxResult) IsTx() {}

func (r tokenManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewcohortUniqueTxResult() cohortUniqueTxResult {
	return cohortUniqueTxResult{
		result: &transaction.Result{},
	}
}

type cohortUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p cohortUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p cohortUniqueTxResult) IsTx() {}

func (r cohortUniqueTxResult) Result() (v *CohortModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewcohortManyTxResult() cohortManyTxResult {
	return cohortManyTxResult{
		result: &transaction.Result{},
	}
}

type cohortManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p cohortManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p cohortManyTxResult) IsTx() {}

func (r cohortManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewcohortUserUniqueTxResult() cohortUserUniqueTxResult {
	return cohortUserUniqueTxResult{
		result: &transaction.Result{},
	}
}

type cohortUserUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p cohortUserUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p cohortUserUniqueTxResult) IsTx() {}

func (r cohortUserUniqueTxResult) Result() (v *CohortUserModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewcohortUserManyTxResult() cohortUserManyTxResult {
	return cohortUserManyTxResult{
		result: &transaction.Result{},
	}
}

type cohortUserManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p cohortUserManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p cohortUserManyTxResult) IsTx() {}

func (r cohortUserManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewnotificationMetaUniqueTxResult() notificationMetaUniqueTxResult {
	return notificationMetaUniqueTxResult{
		result: &transaction.Result{},
	}
}

type notificationMetaUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p notificationMetaUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p notificationMetaUniqueTxResult) IsTx() {}

func (r notificationMetaUniqueTxResult) Result() (v *NotificationMetaModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewnotificationMetaManyTxResult() notificationMetaManyTxResult {
	return notificationMetaManyTxResult{
		result: &transaction.Result{},
	}
}

type notificationMetaManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p notificationMetaManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p notificationMetaManyTxResult) IsTx() {}

func (r notificationMetaManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewnotificationUniqueTxResult() notificationUniqueTxResult {
	return notificationUniqueTxResult{
		result: &transaction.Result{},
	}
}

type notificationUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p notificationUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p notificationUniqueTxResult) IsTx() {}

func (r notificationUniqueTxResult) Result() (v *NotificationModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewnotificationManyTxResult() notificationManyTxResult {
	return notificationManyTxResult{
		result: &transaction.Result{},
	}
}

type notificationManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p notificationManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p notificationManyTxResult) IsTx() {}

func (r notificationManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewcampaignUniqueTxResult() campaignUniqueTxResult {
	return campaignUniqueTxResult{
		result: &transaction.Result{},
	}
}

type campaignUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p campaignUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p campaignUniqueTxResult) IsTx() {}

func (r campaignUniqueTxResult) Result() (v *CampaignModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func NewcampaignManyTxResult() campaignManyTxResult {
	return campaignManyTxResult{
		result: &transaction.Result{},
	}
}

type campaignManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p campaignManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p campaignManyTxResult) IsTx() {}

func (r campaignManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}
