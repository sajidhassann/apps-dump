// Code generated by MockGen. DO NOT EDIT.
// Source: fcm/fcm.go
//
// Generated by this command:
//
//	mockgen -source=fcm/fcm.go -destination=fcm/mocks/fcm.go
//
// Package mock_fcm is a generated GoMock package.
package mock_fcm

import (
	reflect "reflect"

	messaging "firebase.google.com/go/messaging"
	gomock "go.uber.org/mock/gomock"
)

// MockIFCMService is a mock of IFCMService interface.
type MockIFCMService struct {
	ctrl     *gomock.Controller
	recorder *MockIFCMServiceMockRecorder
}

// MockIFCMServiceMockRecorder is the mock recorder for MockIFCMService.
type MockIFCMServiceMockRecorder struct {
	mock *MockIFCMService
}

// NewMockIFCMService creates a new mock instance.
func NewMockIFCMService(ctrl *gomock.Controller) *MockIFCMService {
	mock := &MockIFCMService{ctrl: ctrl}
	mock.recorder = &MockIFCMServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFCMService) EXPECT() *MockIFCMServiceMockRecorder {
	return m.recorder
}

// SendNotification mocks base method.
func (m *MockIFCMService) SendNotification(tokens []string, data map[string]string) (*messaging.BatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", tokens, data)
	ret0, _ := ret[0].(*messaging.BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockIFCMServiceMockRecorder) SendNotification(tokens, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockIFCMService)(nil).SendNotification), tokens, data)
}
