// Code generated by MockGen. DO NOT EDIT.
// Source: user/repository/user_repository.go
//
// Generated by this command:
//
//	mockgen -source=user/repository/user_repository.go -destination=user/mocks/user_repository.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetToken mocks base method.
func (m *MockUserRepository) GetToken(userID string) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", userID)
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetToken indicates an expected call of GetToken.
func (mr *MockUserRepositoryMockRecorder) GetToken(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockUserRepository)(nil).GetToken), userID)
}
