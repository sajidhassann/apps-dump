// Code generated by MockGen. DO NOT EDIT.
// Source: producer/producer.go
//
// Generated by this command:
//
//	mockgen -source=producer/producer.go --destination=producer/mocks/producer.go
//
// Package mock_producer is a generated GoMock package.
package mock_producer

import (
	model "go-app/campaign/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIProducer is a mock of IProducer interface.
type MockIProducer struct {
	ctrl     *gomock.Controller
	recorder *MockIProducerMockRecorder
}

// MockIProducerMockRecorder is the mock recorder for MockIProducer.
type MockIProducerMockRecorder struct {
	mock *MockIProducer
}

// NewMockIProducer creates a new mock instance.
func NewMockIProducer(ctrl *gomock.Controller) *MockIProducer {
	mock := &MockIProducer{ctrl: ctrl}
	mock.recorder = &MockIProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProducer) EXPECT() *MockIProducerMockRecorder {
	return m.recorder
}

// CampaignNotification mocks base method.
func (m *MockIProducer) CampaignNotification(campaign model.CampaignNotification) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CampaignNotification", campaign)
}

// CampaignNotification indicates an expected call of CampaignNotification.
func (mr *MockIProducerMockRecorder) CampaignNotification(campaign any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CampaignNotification", reflect.TypeOf((*MockIProducer)(nil).CampaignNotification), campaign)
}
