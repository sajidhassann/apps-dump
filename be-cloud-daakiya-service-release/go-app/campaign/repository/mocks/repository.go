// Code generated by MockGen. DO NOT EDIT.
// Source: campaign/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=campaign/repository/repository.go --destination=campaign/repository/mocks/repository.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	db_model "go-app/campaign/repository/db_model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICampaignRepository is a mock of ICampaignRepository interface.
type MockICampaignRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICampaignRepositoryMockRecorder
}

// MockICampaignRepositoryMockRecorder is the mock recorder for MockICampaignRepository.
type MockICampaignRepositoryMockRecorder struct {
	mock *MockICampaignRepository
}

// NewMockICampaignRepository creates a new mock instance.
func NewMockICampaignRepository(ctrl *gomock.Controller) *MockICampaignRepository {
	mock := &MockICampaignRepository{ctrl: ctrl}
	mock.recorder = &MockICampaignRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICampaignRepository) EXPECT() *MockICampaignRepositoryMockRecorder {
	return m.recorder
}

// AddUsersToCampaign mocks base method.
func (m *MockICampaignRepository) AddUsersToCampaign(campaignID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUsersToCampaign", campaignID)
}

// AddUsersToCampaign indicates an expected call of AddUsersToCampaign.
func (mr *MockICampaignRepositoryMockRecorder) AddUsersToCampaign(campaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsersToCampaign", reflect.TypeOf((*MockICampaignRepository)(nil).AddUsersToCampaign), campaignID)
}

// CreateCampaign mocks base method.
func (m *MockICampaignRepository) CreateCampaign(name, source string) db_model.CampaignModelDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaign", name, source)
	ret0, _ := ret[0].(db_model.CampaignModelDB)
	return ret0
}

// CreateCampaign indicates an expected call of CreateCampaign.
func (mr *MockICampaignRepositoryMockRecorder) CreateCampaign(name, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaign", reflect.TypeOf((*MockICampaignRepository)(nil).CreateCampaign), name, source)
}

// GetTokensForUser mocks base method.
func (m *MockICampaignRepository) GetTokensForUser(campaignID string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokensForUser", campaignID)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTokensForUser indicates an expected call of GetTokensForUser.
func (mr *MockICampaignRepositoryMockRecorder) GetTokensForUser(campaignID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokensForUser", reflect.TypeOf((*MockICampaignRepository)(nil).GetTokensForUser), campaignID)
}

// GetUsersFromCohorts mocks base method.
func (m *MockICampaignRepository) GetUsersFromCohorts(cohortIDs *[]string, offset, limit int) *[]db_model.CohortUser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersFromCohorts", cohortIDs, offset, limit)
	ret0, _ := ret[0].(*[]db_model.CohortUser)
	return ret0
}

// GetUsersFromCohorts indicates an expected call of GetUsersFromCohorts.
func (mr *MockICampaignRepositoryMockRecorder) GetUsersFromCohorts(cohortIDs, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersFromCohorts", reflect.TypeOf((*MockICampaignRepository)(nil).GetUsersFromCohorts), cohortIDs, offset, limit)
}

// UpdateCampaignStatus mocks base method.
func (m *MockICampaignRepository) UpdateCampaignStatus(campaignID string, status db_model.CampaignStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCampaignStatus", campaignID, status)
}

// UpdateCampaignStatus indicates an expected call of UpdateCampaignStatus.
func (mr *MockICampaignRepositoryMockRecorder) UpdateCampaignStatus(campaignID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCampaignStatus", reflect.TypeOf((*MockICampaignRepository)(nil).UpdateCampaignStatus), campaignID, status)
}
