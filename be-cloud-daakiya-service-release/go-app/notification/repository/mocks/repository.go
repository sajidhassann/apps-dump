// Code generated by MockGen. DO NOT EDIT.
// Source: notification/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=notification/repository/repository.go --destination=notification/repository/mocks/repository.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	db_model "go-app/notification/repository/db_model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockINotificationRepository is a mock of INotificationRepository interface.
type MockINotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockINotificationRepositoryMockRecorder
}

// MockINotificationRepositoryMockRecorder is the mock recorder for MockINotificationRepository.
type MockINotificationRepositoryMockRecorder struct {
	mock *MockINotificationRepository
}

// NewMockINotificationRepository creates a new mock instance.
func NewMockINotificationRepository(ctrl *gomock.Controller) *MockINotificationRepository {
	mock := &MockINotificationRepository{ctrl: ctrl}
	mock.recorder = &MockINotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotificationRepository) EXPECT() *MockINotificationRepositoryMockRecorder {
	return m.recorder
}

// CreateBulkNotification mocks base method.
func (m *MockINotificationRepository) CreateBulkNotification(notification []db_model.Notification) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateBulkNotification", notification)
}

// CreateBulkNotification indicates an expected call of CreateBulkNotification.
func (mr *MockINotificationRepositoryMockRecorder) CreateBulkNotification(notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulkNotification", reflect.TypeOf((*MockINotificationRepository)(nil).CreateBulkNotification), notification)
}
